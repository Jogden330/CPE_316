
Trash_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f50  08002f50  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002f50  08002f50  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f50  08002f50  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002f58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000018  08002f70  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002f70  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b379  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d4  00000000  00000000  0002b3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002d710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254a5  00000000  00000000  0002e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b77d  00000000  00000000  00053675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea449  00000000  00000000  0005edf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014923b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb4  00000000  00000000  00149290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ef8 	.word	0x08002ef8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002ef8 	.word	0x08002ef8

080001c8 <drive_left_arm>:
uint64_t count = 0;
uint64_t head_pose = 1500;
uint8_t head_increase = 1;

//sets the position of the left are
void drive_left_arm(uint16_t pose){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = pose;
 80001d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001d6:	88fb      	ldrh	r3, [r7, #6]
 80001d8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <drive_right_arm>:

//sets the position of the Right are
void drive_right_arm(uint16_t pose){
 80001e6:	b480      	push	{r7}
 80001e8:	b083      	sub	sp, #12
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	4603      	mov	r3, r0
 80001ee:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = pose;
 80001f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001f4:	88fb      	ldrh	r3, [r7, #6]
 80001f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <mydelay>:
	TIM4->CCR1 = pose;
}

//softwere delay used to not interfear with interupts
void mydelay(int count)
{
 8000204:	b480      	push	{r7}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	int i, j;
	int x = 0;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
	for(i=0; i<count; i++)
 8000210:	2300      	movs	r3, #0
 8000212:	617b      	str	r3, [r7, #20]
 8000214:	e00f      	b.n	8000236 <mydelay+0x32>
		for(j=0; j<1000; j++)  // need to tune this?
 8000216:	2300      	movs	r3, #0
 8000218:	613b      	str	r3, [r7, #16]
 800021a:	e005      	b.n	8000228 <mydelay+0x24>
			x = x + 1;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	3301      	adds	r3, #1
 8000220:	60fb      	str	r3, [r7, #12]
		for(j=0; j<1000; j++)  // need to tune this?
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	3301      	adds	r3, #1
 8000226:	613b      	str	r3, [r7, #16]
 8000228:	693b      	ldr	r3, [r7, #16]
 800022a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800022e:	dbf5      	blt.n	800021c <mydelay+0x18>
	for(i=0; i<count; i++)
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	3301      	adds	r3, #1
 8000234:	617b      	str	r3, [r7, #20]
 8000236:	697a      	ldr	r2, [r7, #20]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	429a      	cmp	r2, r3
 800023c:	dbeb      	blt.n	8000216 <mydelay+0x12>
}
 800023e:	bf00      	nop
 8000240:	bf00      	nop
 8000242:	371c      	adds	r7, #28
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <The_Monkey>:

//make the robot swing his arms up and down in oposite directios
void The_Monkey(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

	drive_left_arm(2500);
 8000250:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000254:	f7ff ffb8 	bl	80001c8 <drive_left_arm>
	drive_right_arm(2500);
 8000258:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800025c:	f7ff ffc3 	bl	80001e6 <drive_right_arm>

	mydelay(60);
 8000260:	203c      	movs	r0, #60	; 0x3c
 8000262:	f7ff ffcf 	bl	8000204 <mydelay>
	drive_left_arm(500);
 8000266:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800026a:	f7ff ffad 	bl	80001c8 <drive_left_arm>
	drive_right_arm(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f7ff ffb8 	bl	80001e6 <drive_right_arm>

    mydelay(60);
 8000276:	203c      	movs	r0, #60	; 0x3c
 8000278:	f7ff ffc4 	bl	8000204 <mydelay>

}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <The_Wave>:

//make the robot wave with its left hand
void The_Wave(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	80fb      	strh	r3, [r7, #6]

	drive_left_arm(2500);
 800028a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800028e:	f7ff ff9b 	bl	80001c8 <drive_left_arm>
	drive_right_arm(500);
 8000292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000296:	f7ff ffa6 	bl	80001e6 <drive_right_arm>


    mydelay(60);
 800029a:	203c      	movs	r0, #60	; 0x3c
 800029c:	f7ff ffb2 	bl	8000204 <mydelay>
    for(i = 0; i < 4; i++){
 80002a0:	2300      	movs	r3, #0
 80002a2:	80fb      	strh	r3, [r7, #6]
 80002a4:	e010      	b.n	80002c8 <The_Wave+0x48>
    	drive_left_arm(1000);
 80002a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002aa:	f7ff ff8d 	bl	80001c8 <drive_left_arm>

    	mydelay(30);
 80002ae:	201e      	movs	r0, #30
 80002b0:	f7ff ffa8 	bl	8000204 <mydelay>
    	drive_left_arm(500);
 80002b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b8:	f7ff ff86 	bl	80001c8 <drive_left_arm>

    	mydelay(30);
 80002bc:	201e      	movs	r0, #30
 80002be:	f7ff ffa1 	bl	8000204 <mydelay>
    for(i = 0; i < 4; i++){
 80002c2:	88fb      	ldrh	r3, [r7, #6]
 80002c4:	3301      	adds	r3, #1
 80002c6:	80fb      	strh	r3, [r7, #6]
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	d9eb      	bls.n	80002a6 <The_Wave+0x26>
    }
    drive_left_arm(2500);
 80002ce:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80002d2:	f7ff ff79 	bl	80001c8 <drive_left_arm>

    mydelay(200);
 80002d6:	20c8      	movs	r0, #200	; 0xc8
 80002d8:	f7ff ff94 	bl	8000204 <mydelay>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <The_Right_Hiker>:

//make the robot raises its right are and moves it back and forth
void The_Right_Hiker(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	80fb      	strh	r3, [r7, #6]

	drive_left_arm(2500);
 80002ee:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80002f2:	f7ff ff69 	bl	80001c8 <drive_left_arm>
	drive_right_arm(2500);
 80002f6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80002fa:	f7ff ff74 	bl	80001e6 <drive_right_arm>


    mydelay(30);
 80002fe:	201e      	movs	r0, #30
 8000300:	f7ff ff80 	bl	8000204 <mydelay>
    for(i = 0; i < 4; i++){
 8000304:	2300      	movs	r3, #0
 8000306:	80fb      	strh	r3, [r7, #6]
 8000308:	e010      	b.n	800032c <The_Right_Hiker+0x48>
    	drive_right_arm(2500);
 800030a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800030e:	f7ff ff6a 	bl	80001e6 <drive_right_arm>

    	mydelay(25);
 8000312:	2019      	movs	r0, #25
 8000314:	f7ff ff76 	bl	8000204 <mydelay>
    	drive_right_arm(2000);
 8000318:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800031c:	f7ff ff63 	bl	80001e6 <drive_right_arm>

    	mydelay(25);
 8000320:	2019      	movs	r0, #25
 8000322:	f7ff ff6f 	bl	8000204 <mydelay>
    for(i = 0; i < 4; i++){
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	3301      	adds	r3, #1
 800032a:	80fb      	strh	r3, [r7, #6]
 800032c:	88fb      	ldrh	r3, [r7, #6]
 800032e:	2b03      	cmp	r3, #3
 8000330:	d9eb      	bls.n	800030a <The_Right_Hiker+0x26>


    }
    drive_right_arm(500);
 8000332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000336:	f7ff ff56 	bl	80001e6 <drive_right_arm>

    mydelay(30);
 800033a:	201e      	movs	r0, #30
 800033c:	f7ff ff62 	bl	8000204 <mydelay>

}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <The_left_Hiker>:

//make the robot raises its left are and moves it back and forth
void The_left_Hiker(void){
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	80fb      	strh	r3, [r7, #6]

	drive_left_arm(500);
 8000352:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000356:	f7ff ff37 	bl	80001c8 <drive_left_arm>
	drive_right_arm(500);
 800035a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035e:	f7ff ff42 	bl	80001e6 <drive_right_arm>


    mydelay(30);
 8000362:	201e      	movs	r0, #30
 8000364:	f7ff ff4e 	bl	8000204 <mydelay>
    for(i = 0; i < 4; i++){
 8000368:	2300      	movs	r3, #0
 800036a:	80fb      	strh	r3, [r7, #6]
 800036c:	e010      	b.n	8000390 <The_left_Hiker+0x48>
    	drive_left_arm(500);
 800036e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000372:	f7ff ff29 	bl	80001c8 <drive_left_arm>

    	mydelay(25);
 8000376:	2019      	movs	r0, #25
 8000378:	f7ff ff44 	bl	8000204 <mydelay>
    	drive_left_arm(1000);
 800037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000380:	f7ff ff22 	bl	80001c8 <drive_left_arm>

    	mydelay(25);
 8000384:	2019      	movs	r0, #25
 8000386:	f7ff ff3d 	bl	8000204 <mydelay>
    for(i = 0; i < 4; i++){
 800038a:	88fb      	ldrh	r3, [r7, #6]
 800038c:	3301      	adds	r3, #1
 800038e:	80fb      	strh	r3, [r7, #6]
 8000390:	88fb      	ldrh	r3, [r7, #6]
 8000392:	2b03      	cmp	r3, #3
 8000394:	d9eb      	bls.n	800036e <The_left_Hiker+0x26>


    }
    drive_left_arm(2500);
 8000396:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800039a:	f7ff ff15 	bl	80001c8 <drive_left_arm>

    mydelay(30);
 800039e:	201e      	movs	r0, #30
 80003a0:	f7ff ff30 	bl	8000204 <mydelay>

}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <The_Hands_up>:

//robot raised then lowers its arms
void The_Hands_up(void){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

	drive_left_arm(500);
 80003b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b4:	f7ff ff08 	bl	80001c8 <drive_left_arm>
	drive_right_arm(2500);
 80003b8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003bc:	f7ff ff13 	bl	80001e6 <drive_right_arm>

	mydelay(60);
 80003c0:	203c      	movs	r0, #60	; 0x3c
 80003c2:	f7ff ff1f 	bl	8000204 <mydelay>
	drive_left_arm(2500);
 80003c6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ca:	f7ff fefd 	bl	80001c8 <drive_left_arm>
	drive_right_arm(500);
 80003ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d2:	f7ff ff08 	bl	80001e6 <drive_right_arm>

    mydelay(60);
 80003d6:	203c      	movs	r0, #60	; 0x3c
 80003d8:	f7ff ff14 	bl	8000204 <mydelay>

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}

080003e0 <The_Shimmy>:

//robot swings its arms in a small ark
void The_Shimmy(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	drive_left_arm(1800);
 80003e4:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80003e8:	f7ff feee 	bl	80001c8 <drive_left_arm>
	drive_right_arm(1800);
 80003ec:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80003f0:	f7ff fef9 	bl	80001e6 <drive_right_arm>

	mydelay(30);
 80003f4:	201e      	movs	r0, #30
 80003f6:	f7ff ff05 	bl	8000204 <mydelay>
	drive_left_arm(900);
 80003fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80003fe:	f7ff fee3 	bl	80001c8 <drive_left_arm>
	drive_right_arm(900);
 8000402:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000406:	f7ff feee 	bl	80001e6 <drive_right_arm>

    mydelay(30);
 800040a:	201e      	movs	r0, #30
 800040c:	f7ff fefa 	bl	8000204 <mydelay>

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <The_pop>:

//robot lifts its arms to shoulder hight and the take turns rising its arms
void The_pop(void){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	drive_left_arm(1500);
 8000418:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800041c:	f7ff fed4 	bl	80001c8 <drive_left_arm>
	drive_right_arm(1500);
 8000420:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000424:	f7ff fedf 	bl	80001e6 <drive_right_arm>

	mydelay(15);
 8000428:	200f      	movs	r0, #15
 800042a:	f7ff feeb 	bl	8000204 <mydelay>
	drive_left_arm(900);
 800042e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000432:	f7ff fec9 	bl	80001c8 <drive_left_arm>
	mydelay(20);
 8000436:	2014      	movs	r0, #20
 8000438:	f7ff fee4 	bl	8000204 <mydelay>
	drive_left_arm(1500);
 800043c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000440:	f7ff fec2 	bl	80001c8 <drive_left_arm>
	mydelay(20);
 8000444:	2014      	movs	r0, #20
 8000446:	f7ff fedd 	bl	8000204 <mydelay>
	drive_right_arm(1800);
 800044a:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800044e:	f7ff feca 	bl	80001e6 <drive_right_arm>
	mydelay(20);
 8000452:	2014      	movs	r0, #20
 8000454:	f7ff fed6 	bl	8000204 <mydelay>
	drive_right_arm(1500);
 8000458:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800045c:	f7ff fec3 	bl	80001e6 <drive_right_arm>

    mydelay(15);
 8000460:	200f      	movs	r0, #15
 8000462:	f7ff fecf 	bl	8000204 <mydelay>

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <TIM3_IRQHandler>:



//timer handles eyes blinking and head rotation
void TIM3_IRQHandler(void) {
 800046c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000470:	b084      	sub	sp, #16
 8000472:	af00      	add	r7, sp, #0

	TIM3->SR &= ~(TIM_SR_CC3IF);
 8000474:	4e45      	ldr	r6, [pc, #276]	; (800058c <TIM3_IRQHandler+0x120>)
 8000476:	6936      	ldr	r6, [r6, #16]
 8000478:	4b44      	ldr	r3, [pc, #272]	; (800058c <TIM3_IRQHandler+0x120>)
 800047a:	f026 0608 	bic.w	r6, r6, #8
 800047e:	611e      	str	r6, [r3, #16]
	TIM3->CCR3 += (0xFFFFFFFFF);
 8000480:	4e42      	ldr	r6, [pc, #264]	; (800058c <TIM3_IRQHandler+0x120>)
 8000482:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 8000484:	4b41      	ldr	r3, [pc, #260]	; (800058c <TIM3_IRQHandler+0x120>)
 8000486:	3e01      	subs	r6, #1
 8000488:	63de      	str	r6, [r3, #60]	; 0x3c

	//switch with eye is blinking
	if((count%2) == 0){
 800048a:	4e41      	ldr	r6, [pc, #260]	; (8000590 <TIM3_IRQHandler+0x124>)
 800048c:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8000490:	f04f 0201 	mov.w	r2, #1
 8000494:	f04f 0300 	mov.w	r3, #0
 8000498:	e9c7 2300 	strd	r2, r3, [r7]
 800049c:	4613      	mov	r3, r2
 800049e:	ea0a 0303 	and.w	r3, sl, r3
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	ea0b 0303 	and.w	r3, fp, r3
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	d110      	bne.n	80004d6 <TIM3_IRQHandler+0x6a>
		GPIOA->ODR &= ~GPIO_PIN_5;	// set pin 5 of PORT A to 0
 80004b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004be:	f023 0320 	bic.w	r3, r3, #32
 80004c2:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= GPIO_PIN_4;	// set pin 4 of PORT A to 1
 80004c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ce:	f043 0310 	orr.w	r3, r3, #16
 80004d2:	6153      	str	r3, [r2, #20]
 80004d4:	e00f      	b.n	80004f6 <TIM3_IRQHandler+0x8a>
	} else {
		GPIOA->ODR |= GPIO_PIN_5;		// set pin 5 of PORT A to 1
 80004d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004e0:	f043 0320 	orr.w	r3, r3, #32
 80004e4:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~GPIO_PIN_4;	// set pin 4 of PORT A to 0
 80004e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f0:	f023 0310 	bic.w	r3, r3, #16
 80004f4:	6153      	str	r3, [r2, #20]
	}
	//set the heads possition based on the the set direction
	if(head_increase){
 80004f6:	4b27      	ldr	r3, [pc, #156]	; (8000594 <TIM3_IRQHandler+0x128>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00a      	beq.n	8000514 <TIM3_IRQHandler+0xa8>
		head_pose += 20;
 80004fe:	4b26      	ldr	r3, [pc, #152]	; (8000598 <TIM3_IRQHandler+0x12c>)
 8000500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000504:	f112 0814 	adds.w	r8, r2, #20
 8000508:	f143 0900 	adc.w	r9, r3, #0
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <TIM3_IRQHandler+0x12c>)
 800050e:	e9c3 8900 	strd	r8, r9, [r3]
 8000512:	e009      	b.n	8000528 <TIM3_IRQHandler+0xbc>
	} else {
		head_pose -= 20;
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <TIM3_IRQHandler+0x12c>)
 8000516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800051a:	f1b2 0414 	subs.w	r4, r2, #20
 800051e:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <TIM3_IRQHandler+0x12c>)
 8000524:	e9c3 4500 	strd	r4, r5, [r3]
	}
	//if the head has reached its max rotation
	if(head_pose >= 2500){
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <TIM3_IRQHandler+0x12c>)
 800052a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800052e:	f640 14c3 	movw	r4, #2499	; 0x9c3
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	429d      	cmp	r5, r3
 8000538:	bf08      	it	eq
 800053a:	4294      	cmpeq	r4, r2
 800053c:	d202      	bcs.n	8000544 <TIM3_IRQHandler+0xd8>
		head_increase = 0;
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <TIM3_IRQHandler+0x128>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
	}
	if(head_pose <= 500){
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <TIM3_IRQHandler+0x12c>)
 8000546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800054a:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	429d      	cmp	r5, r3
 8000554:	bf08      	it	eq
 8000556:	4294      	cmpeq	r4, r2
 8000558:	d302      	bcc.n	8000560 <TIM3_IRQHandler+0xf4>
		head_increase = 1;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <TIM3_IRQHandler+0x128>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
	}
	//set the heads possition and increases count
	TIM4->CCR1 = head_pose;
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <TIM3_IRQHandler+0x12c>)
 8000562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000566:	4c0d      	ldr	r4, [pc, #52]	; (800059c <TIM3_IRQHandler+0x130>)
 8000568:	4613      	mov	r3, r2
 800056a:	6363      	str	r3, [r4, #52]	; 0x34
	count++;
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <TIM3_IRQHandler+0x124>)
 800056e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000572:	1c50      	adds	r0, r2, #1
 8000574:	f143 0100 	adc.w	r1, r3, #0
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <TIM3_IRQHandler+0x124>)
 800057a:	e9c3 0100 	strd	r0, r1, [r3]
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40000400 	.word	0x40000400
 8000590:	20000038 	.word	0x20000038
 8000594:	20000008 	.word	0x20000008
 8000598:	20000000 	.word	0x20000000
 800059c:	40000800 	.word	0x40000800

080005a0 <main>:


int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

   HAL_Init();
 80005a4:	f000 fb1d 	bl	8000be2 <HAL_Init>


   SystemClock_Config();
 80005a8:	f000 f88c 	bl	80006c4 <SystemClock_Config>

   //Initalises the and starts the PWM signals
   MX_GPIO_Init();
 80005ac:	f000 f9ae 	bl	800090c <MX_GPIO_Init>
   MX_TIM2_Init();
 80005b0:	f000 f8ce 	bl	8000750 <MX_TIM2_Init>
   MX_TIM4_Init();
 80005b4:	f000 f94e 	bl	8000854 <MX_TIM4_Init>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005b8:	2100      	movs	r1, #0
 80005ba:	483d      	ldr	r0, [pc, #244]	; (80006b0 <main+0x110>)
 80005bc:	f001 fcdc 	bl	8001f78 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005c0:	2104      	movs	r1, #4
 80005c2:	483b      	ldr	r0, [pc, #236]	; (80006b0 <main+0x110>)
 80005c4:	f001 fcd8 	bl	8001f78 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005c8:	2100      	movs	r1, #0
 80005ca:	483a      	ldr	r0, [pc, #232]	; (80006b4 <main+0x114>)
 80005cc:	f001 fcd4 	bl	8001f78 <HAL_TIM_PWM_Start>

   RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOCEN);
 80005d0:	4b39      	ldr	r3, [pc, #228]	; (80006b8 <main+0x118>)
 80005d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d4:	4a38      	ldr	r2, [pc, #224]	; (80006b8 <main+0x118>)
 80005d6:	f043 0305 	orr.w	r3, r3, #5
 80005da:	64d3      	str	r3, [r2, #76]	; 0x4c

   // bank A as GPIO output mode
   GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5);  //clears bits 11 & 10
 80005dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80005ea:	6013      	str	r3, [r2, #0]
   GPIOA->MODER |= (GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0); //sets bit 10
 80005ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005f6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80005fa:	6013      	str	r3, [r2, #0]
   GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5);  //clears bits 27 & 26
 80005fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000606:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800060a:	60d3      	str	r3, [r2, #12]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800060c:	b662      	cpsie	i
}
 800060e:	bf00      	nop

   //starts timer for eyes and head controlls
   __enable_irq();

   NVIC->ISER[0] = (1 << (TIM3_IRQn & 0x1F));
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <main+0x11c>)
 8000612:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000616:	601a      	str	r2, [r3, #0]

   RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM3EN); //Turn on timer 3
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <main+0x118>)
 800061a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061c:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <main+0x118>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6593      	str	r3, [r2, #88]	; 0x58
   TIM3->CCR3 = (0x90);                    //set channel one compare value
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <main+0x120>)
 8000626:	2290      	movs	r2, #144	; 0x90
 8000628:	63da      	str	r2, [r3, #60]	; 0x3c
   TIM3->DIER |= (TIM_DIER_CC3IE);		   //inable interupt on chanle one
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <main+0x120>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <main+0x120>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	60d3      	str	r3, [r2, #12]
   TIM3->SR &= ~(TIM_SR_CC3IF);            //Clear the interupt flag
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <main+0x120>)
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <main+0x120>)
 800063c:	f023 0308 	bic.w	r3, r3, #8
 8000640:	6113      	str	r3, [r2, #16]
   TIM3->ARR = (0xFFFFFFFF);               //reset the counter
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <main+0x120>)
 8000644:	f04f 32ff 	mov.w	r2, #4294967295
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM3->CR1 |= TIM_CR1_CEN;			   //start timer
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <main+0x120>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <main+0x120>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6013      	str	r3, [r2, #0]


   //Move arms to starting possitions
   drive_left_arm(1500);
 8000656:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800065a:	f7ff fdb5 	bl	80001c8 <drive_left_arm>
   drive_right_arm(1500);
 800065e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000662:	f7ff fdc0 	bl	80001e6 <drive_right_arm>

   while (1)
   {

	   //sets order for the dance routain
 	  The_Wave();
 8000666:	f7ff fe0b 	bl	8000280 <The_Wave>
 	  The_Monkey();
 800066a:	f7ff fdef 	bl	800024c <The_Monkey>
 	  The_Monkey();
 800066e:	f7ff fded 	bl	800024c <The_Monkey>
 	  The_Shimmy();
 8000672:	f7ff feb5 	bl	80003e0 <The_Shimmy>
 	  The_Shimmy();
 8000676:	f7ff feb3 	bl	80003e0 <The_Shimmy>
 	  The_Monkey();
 800067a:	f7ff fde7 	bl	800024c <The_Monkey>
 	  The_Shimmy();
 800067e:	f7ff feaf 	bl	80003e0 <The_Shimmy>
 	  The_pop();
 8000682:	f7ff fec7 	bl	8000414 <The_pop>
 	  The_Hands_up();
 8000686:	f7ff fe91 	bl	80003ac <The_Hands_up>
 	  The_Right_Hiker();
 800068a:	f7ff fe2b 	bl	80002e4 <The_Right_Hiker>
 	  The_left_Hiker();
 800068e:	f7ff fe5b 	bl	8000348 <The_left_Hiker>
 	  The_Shimmy();
 8000692:	f7ff fea5 	bl	80003e0 <The_Shimmy>
 	  The_Monkey();
 8000696:	f7ff fdd9 	bl	800024c <The_Monkey>
 	  The_pop();
 800069a:	f7ff febb 	bl	8000414 <The_pop>
 	  The_pop();
 800069e:	f7ff feb9 	bl	8000414 <The_pop>
 	  The_Shimmy();
 80006a2:	f7ff fe9d 	bl	80003e0 <The_Shimmy>
 	  The_Monkey();
 80006a6:	f7ff fdd1 	bl	800024c <The_Monkey>
 	  The_Hands_up();
 80006aa:	f7ff fe7f 	bl	80003ac <The_Hands_up>
 	  The_Wave();
 80006ae:	e7da      	b.n	8000666 <main+0xc6>
 80006b0:	2000008c 	.word	0x2000008c
 80006b4:	20000040 	.word	0x20000040
 80006b8:	40021000 	.word	0x40021000
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	40000400 	.word	0x40000400

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	; 0x58
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2244      	movs	r2, #68	; 0x44
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fc08 	bl	8002ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ea:	f000 fd8d 	bl	8001208 <HAL_PWREx_ControlVoltageScaling>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f4:	f000 f92e 	bl	8000954 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006f8:	2310      	movs	r3, #16
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000704:	2340      	movs	r3, #64	; 0x40
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fdcf 	bl	80012b4 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800071c:	f000 f91a 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f9a1 	bl	8001a80 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000744:	f000 f906 	bl	8000954 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3758      	adds	r7, #88	; 0x58
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08e      	sub	sp, #56	; 0x38
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000782:	4b33      	ldr	r3, [pc, #204]	; (8000850 <MX_TIM2_Init+0x100>)
 8000784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000788:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_TIM2_Init+0x100>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <MX_TIM2_Init+0x100>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <MX_TIM2_Init+0x100>)
 8000798:	f644 6220 	movw	r2, #20000	; 0x4e20
 800079c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <MX_TIM2_Init+0x100>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <MX_TIM2_Init+0x100>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ac:	4828      	ldr	r0, [pc, #160]	; (8000850 <MX_TIM2_Init+0x100>)
 80007ae:	f001 fb35 	bl	8001e1c <HAL_TIM_Base_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80007b8:	f000 f8cc 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4821      	ldr	r0, [pc, #132]	; (8000850 <MX_TIM2_Init+0x100>)
 80007ca:	f001 fdeb 	bl	80023a4 <HAL_TIM_ConfigClockSource>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80007d4:	f000 f8be 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d8:	481d      	ldr	r0, [pc, #116]	; (8000850 <MX_TIM2_Init+0x100>)
 80007da:	f001 fb76 	bl	8001eca <HAL_TIM_PWM_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007e4:	f000 f8b6 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4816      	ldr	r0, [pc, #88]	; (8000850 <MX_TIM2_Init+0x100>)
 80007f8:	f002 faca 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000802:	f000 f8a7 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000806:	2360      	movs	r3, #96	; 0x60
 8000808:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_TIM2_Init+0x100>)
 800081e:	f001 fcb1 	bl	8002184 <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000828:	f000 f894 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	2204      	movs	r2, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4807      	ldr	r0, [pc, #28]	; (8000850 <MX_TIM2_Init+0x100>)
 8000834:	f001 fca6 	bl	8002184 <HAL_TIM_PWM_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800083e:	f000 f889 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <MX_TIM2_Init+0x100>)
 8000844:	f000 f8ee 	bl	8000a24 <HAL_TIM_MspPostInit>

}
 8000848:	bf00      	nop
 800084a:	3738      	adds	r7, #56	; 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000008c 	.word	0x2000008c

08000854 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_TIM4_Init+0xb0>)
 800087a:	4a23      	ldr	r2, [pc, #140]	; (8000908 <MX_TIM4_Init+0xb4>)
 800087c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_TIM4_Init+0xb0>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_TIM4_Init+0xb0>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_TIM4_Init+0xb0>)
 800088c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000890:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_TIM4_Init+0xb0>)
 8000894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000898:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_TIM4_Init+0xb0>)
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008a0:	4818      	ldr	r0, [pc, #96]	; (8000904 <MX_TIM4_Init+0xb0>)
 80008a2:	f001 fb12 	bl	8001eca <HAL_TIM_PWM_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 f852 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_TIM4_Init+0xb0>)
 80008c0:	f002 fa66 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80008ca:	f000 f843 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ce:	2360      	movs	r3, #96	; 0x60
 80008d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <MX_TIM4_Init+0xb0>)
 80008e6:	f001 fc4d 	bl	8002184 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80008f0:	f000 f830 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008f4:	4803      	ldr	r0, [pc, #12]	; (8000904 <MX_TIM4_Init+0xb0>)
 80008f6:	f000 f895 	bl	8000a24 <HAL_TIM_MspPostInit>

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000040 	.word	0x20000040
 8000908:	40000800 	.word	0x40000800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_GPIO_Init+0x44>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <MX_GPIO_Init+0x44>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_GPIO_Init+0x44>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_GPIO_Init+0x44>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <MX_GPIO_Init+0x44>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_GPIO_Init+0x44>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6613      	str	r3, [r2, #96]	; 0x60
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6593      	str	r3, [r2, #88]	; 0x58
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b8:	d10b      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_TIM_PWM_MspInit+0x38>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d10b      	bne.n	8000a0e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_TIM_PWM_MspInit+0x3c>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <HAL_TIM_PWM_MspInit+0x3c>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6593      	str	r3, [r2, #88]	; 0x58
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40000800 	.word	0x40000800
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a44:	d11d      	bne.n	8000a82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_TIM_MspPostInit+0xa8>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a20      	ldr	r2, [pc, #128]	; (8000acc <HAL_TIM_MspPostInit+0xa8>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <HAL_TIM_MspPostInit+0xa8>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 fa0c 	bl	8000e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a80:	e020      	b.n	8000ac4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <HAL_TIM_MspPostInit+0xac>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d11b      	bne.n	8000ac4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_TIM_MspPostInit+0xa8>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_TIM_MspPostInit+0xa8>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_TIM_MspPostInit+0xa8>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aa4:	2340      	movs	r3, #64	; 0x40
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_TIM_MspPostInit+0xb0>)
 8000ac0:	f000 f9ea 	bl	8000e98 <HAL_GPIO_Init>
}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40000800 	.word	0x40000800
 8000ad4:	48000400 	.word	0x48000400

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f8b2 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <SystemInit+0x5c>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <SystemInit+0x5c>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <SystemInit+0x60>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <SystemInit+0x60>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <SystemInit+0x60>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <SystemInit+0x60>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <SystemInit+0x60>)
 8000b58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <SystemInit+0x60>)
 8000b64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <SystemInit+0x60>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <SystemInit+0x60>)
 8000b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SystemInit+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00
 8000b8c:	40021000 	.word	0x40021000

08000b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff ffca 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b9a:	e003      	b.n	8000ba4 <LoopCopyDataInit>

08000b9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ba0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ba2:	3104      	adds	r1, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ba4:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ba8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000baa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bac:	d3f6      	bcc.n	8000b9c <CopyDataInit>
	ldr	r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bb0:	e002      	b.n	8000bb8 <LoopFillZerobss>

08000bb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bb4:	f842 3b04 	str.w	r3, [r2], #4

08000bb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <LoopForever+0x16>)
	cmp	r2, r3
 8000bba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bbc:	d3f9      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f002 f96f 	bl	8002ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc2:	f7ff fced 	bl	80005a0 <main>

08000bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc6:	e7fe      	b.n	8000bc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bcc:	08002f58 	.word	0x08002f58
	ldr	r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bd4:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8000bd8:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8000bdc:	200000dc 	.word	0x200000dc

08000be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_2_IRQHandler>

08000be2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f91f 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f000 f80e 	bl	8000c14 <HAL_InitTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	71fb      	strb	r3, [r7, #7]
 8000c02:	e001      	b.n	8000c08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c04:	f7ff feac 	bl	8000960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c08:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d023      	beq.n	8000c70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_InitTick+0x70>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_InitTick+0x6c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f91d 	bl	8000e7e <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10f      	bne.n	8000c6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d809      	bhi.n	8000c64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f000 f8f5 	bl	8000e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_InitTick+0x74>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e007      	b.n	8000c74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e004      	b.n	8000c74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e001      	b.n	8000c74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000014 	.word	0x20000014
 8000c84:	2000000c 	.word	0x2000000c
 8000c88:	20000010 	.word	0x20000010

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000014 	.word	0x20000014
 8000cb0:	200000d8 	.word	0x200000d8

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000d8 	.word	0x200000d8

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	; (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	; (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff ff8e 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff47 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff5c 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff8e 	bl	8000d84 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5d 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffb0 	bl	8000dec <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea6:	e17f      	b.n	80011a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2101      	movs	r1, #1
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 8171 	beq.w	80011a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d00b      	beq.n	8000ee0 <HAL_GPIO_Init+0x48>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed4:	2b11      	cmp	r3, #17
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b12      	cmp	r3, #18
 8000ede:	d130      	bne.n	8000f42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f16:	2201      	movs	r2, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	f003 0201 	and.w	r2, r3, #1
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d118      	bne.n	8000f80 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x128>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b12      	cmp	r3, #18
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80ac 	beq.w	80011a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <HAL_GPIO_Init+0x330>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104e:	4a5e      	ldr	r2, [pc, #376]	; (80011c8 <HAL_GPIO_Init+0x330>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6613      	str	r3, [r2, #96]	; 0x60
 8001056:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <HAL_GPIO_Init+0x330>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001062:	4a5a      	ldr	r2, [pc, #360]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800108c:	d025      	beq.n	80010da <HAL_GPIO_Init+0x242>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4f      	ldr	r2, [pc, #316]	; (80011d0 <HAL_GPIO_Init+0x338>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d01f      	beq.n	80010d6 <HAL_GPIO_Init+0x23e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4e      	ldr	r2, [pc, #312]	; (80011d4 <HAL_GPIO_Init+0x33c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x23a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4d      	ldr	r2, [pc, #308]	; (80011d8 <HAL_GPIO_Init+0x340>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x236>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4c      	ldr	r2, [pc, #304]	; (80011dc <HAL_GPIO_Init+0x344>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x232>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4b      	ldr	r2, [pc, #300]	; (80011e0 <HAL_GPIO_Init+0x348>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x22e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4a      	ldr	r2, [pc, #296]	; (80011e4 <HAL_GPIO_Init+0x34c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x22a>
 80010be:	2306      	movs	r3, #6
 80010c0:	e00c      	b.n	80010dc <HAL_GPIO_Init+0x244>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e00a      	b.n	80010dc <HAL_GPIO_Init+0x244>
 80010c6:	2305      	movs	r3, #5
 80010c8:	e008      	b.n	80010dc <HAL_GPIO_Init+0x244>
 80010ca:	2304      	movs	r3, #4
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x244>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x244>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x244>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x244>
 80010da:	2300      	movs	r3, #0
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	4093      	lsls	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ec:	4937      	ldr	r1, [pc, #220]	; (80011cc <HAL_GPIO_Init+0x334>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_GPIO_Init+0x350>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111e:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <HAL_GPIO_Init+0x350>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_GPIO_Init+0x350>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001148:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_GPIO_Init+0x350>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_GPIO_Init+0x350>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001172:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_GPIO_Init+0x350>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_GPIO_Init+0x350>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <HAL_GPIO_Init+0x350>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa22 f303 	lsr.w	r3, r2, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f47f ae78 	bne.w	8000ea8 <HAL_GPIO_Init+0x10>
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	371c      	adds	r7, #28
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	48000800 	.word	0x48000800
 80011d8:	48000c00 	.word	0x48000c00
 80011dc:	48001000 	.word	0x48001000
 80011e0:	48001400 	.word	0x48001400
 80011e4:	48001800 	.word	0x48001800
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_PWREx_GetVoltageRange+0x18>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001216:	d130      	bne.n	800127a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001224:	d038      	beq.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800122e:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001234:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2232      	movs	r2, #50	; 0x32
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0c9b      	lsrs	r3, r3, #18
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800124c:	e002      	b.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3b01      	subs	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001260:	d102      	bne.n	8001268 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f2      	bne.n	800124e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001274:	d110      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e00f      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001286:	d007      	beq.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40007000 	.word	0x40007000
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	431bde83 	.word	0x431bde83

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e3d4      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c6:	4ba1      	ldr	r3, [pc, #644]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d0:	4b9e      	ldr	r3, [pc, #632]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80e4 	beq.w	80014b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_RCC_OscConfig+0x4a>
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	f040 808b 	bne.w	800140c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	f040 8087 	bne.w	800140c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012fe:	4b93      	ldr	r3, [pc, #588]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x62>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e3ac      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <HAL_RCC_OscConfig+0x7c>
 8001326:	4b89      	ldr	r3, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800132e:	e005      	b.n	800133c <HAL_RCC_OscConfig+0x88>
 8001330:	4b86      	ldr	r3, [pc, #536]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800133c:	4293      	cmp	r3, r2
 800133e:	d223      	bcs.n	8001388 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fd09 	bl	8001d5c <RCC_SetFlashLatencyFromMSIRange>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e38d      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001354:	4b7d      	ldr	r3, [pc, #500]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a7c      	ldr	r2, [pc, #496]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b7a      	ldr	r3, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4977      	ldr	r1, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001372:	4b76      	ldr	r3, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4972      	ldr	r1, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
 8001386:	e025      	b.n	80013d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001388:	4b70      	ldr	r3, [pc, #448]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a6f      	ldr	r2, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b6d      	ldr	r3, [pc, #436]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	496a      	ldr	r1, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a6:	4b69      	ldr	r3, [pc, #420]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	4965      	ldr	r1, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fcc9 	bl	8001d5c <RCC_SetFlashLatencyFromMSIRange>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e34d      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d4:	f000 fc36 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	495a      	ldr	r1, [pc, #360]	; (8001550 <HAL_RCC_OscConfig+0x29c>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_OscConfig+0x2a0>)
 80013f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f4:	4b58      	ldr	r3, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x2a4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc0b 	bl	8000c14 <HAL_InitTick>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d052      	beq.n	80014ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	e331      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d032      	beq.n	800147a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a4c      	ldr	r2, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001420:	f7ff fc48 	bl	8000cb4 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001428:	f7ff fc44 	bl	8000cb4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e31a      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143a:	4b44      	ldr	r3, [pc, #272]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a40      	ldr	r2, [pc, #256]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	493b      	ldr	r1, [pc, #236]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	4936      	ldr	r1, [pc, #216]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e01a      	b.n	80014b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a33      	ldr	r2, [pc, #204]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001486:	f7ff fc15 	bl	8000cb4 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800148e:	f7ff fc11 	bl	8000cb4 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e2e7      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x1da>
 80014ac:	e000      	b.n	80014b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d074      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x21a>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d10e      	bne.n	80014e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d10b      	bne.n	80014e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d064      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2f0>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d160      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e2c4      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x24a>
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a15      	ldr	r2, [pc, #84]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80014f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e01d      	b.n	800153a <HAL_RCC_OscConfig+0x286>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x26e>
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800150e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x286>
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01c      	beq.n	800157c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fbb7 	bl	8000cb4 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001548:	e011      	b.n	800156e <HAL_RCC_OscConfig+0x2ba>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	08002f10 	.word	0x08002f10
 8001554:	2000000c 	.word	0x2000000c
 8001558:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fbaa 	bl	8000cb4 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e280      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	4baf      	ldr	r3, [pc, #700]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x2a8>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fb9a 	bl	8000cb4 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fb96 	bl	8000cb4 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e26c      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001596:	4ba5      	ldr	r3, [pc, #660]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x2d0>
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d060      	beq.n	8001674 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x310>
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d119      	bne.n	80015f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d116      	bne.n	80015f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c4:	4b99      	ldr	r3, [pc, #612]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x328>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e249      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b93      	ldr	r3, [pc, #588]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	061b      	lsls	r3, r3, #24
 80015ea:	4990      	ldr	r1, [pc, #576]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f0:	e040      	b.n	8001674 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d023      	beq.n	8001642 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fa:	4b8c      	ldr	r3, [pc, #560]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a8b      	ldr	r2, [pc, #556]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fb55 	bl	8000cb4 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fb51 	bl	8000cb4 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e227      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001620:	4b82      	ldr	r3, [pc, #520]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b7f      	ldr	r3, [pc, #508]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	497c      	ldr	r1, [pc, #496]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
 8001640:	e018      	b.n	8001674 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b7a      	ldr	r3, [pc, #488]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a79      	ldr	r2, [pc, #484]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fb31 	bl	8000cb4 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fb2d 	bl	8000cb4 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e203      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001668:	4b70      	ldr	r3, [pc, #448]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d03c      	beq.n	80016fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168e:	4a67      	ldr	r2, [pc, #412]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fb0c 	bl	8000cb4 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fb08 	bl	8000cb4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1de      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b2:	4b5e      	ldr	r3, [pc, #376]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80016b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ef      	beq.n	80016a0 <HAL_RCC_OscConfig+0x3ec>
 80016c0:	e01b      	b.n	80016fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c2:	4b5a      	ldr	r3, [pc, #360]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c8:	4a58      	ldr	r2, [pc, #352]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff faef 	bl	8000cb4 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff faeb 	bl	8000cb4 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1c1      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ec:	4b4f      	ldr	r3, [pc, #316]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80016ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ef      	bne.n	80016da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80a6 	beq.w	8001854 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800170c:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10d      	bne.n	8001734 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	4b44      	ldr	r3, [pc, #272]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	4a43      	ldr	r2, [pc, #268]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001722:	6593      	str	r3, [r2, #88]	; 0x58
 8001724:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001730:	2301      	movs	r3, #1
 8001732:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <HAL_RCC_OscConfig+0x57c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d118      	bne.n	8001772 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001740:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_OscConfig+0x57c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a3a      	ldr	r2, [pc, #232]	; (8001830 <HAL_RCC_OscConfig+0x57c>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174c:	f7ff fab2 	bl	8000cb4 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001754:	f7ff faae 	bl	8000cb4 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e184      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <HAL_RCC_OscConfig+0x57c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_RCC_OscConfig+0x4d8>
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001780:	4a2a      	ldr	r2, [pc, #168]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178a:	e024      	b.n	80017d6 <HAL_RCC_OscConfig+0x522>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d110      	bne.n	80017b6 <HAL_RCC_OscConfig+0x502>
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	4a24      	ldr	r2, [pc, #144]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017aa:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b4:	e00f      	b.n	80017d6 <HAL_RCC_OscConfig+0x522>
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017ce:	f023 0304 	bic.w	r3, r3, #4
 80017d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d016      	beq.n	800180c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff fa69 	bl	8000cb4 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff fa65 	bl	8000cb4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e139      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ed      	beq.n	80017e6 <HAL_RCC_OscConfig+0x532>
 800180a:	e01a      	b.n	8001842 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fa52 	bl	8000cb4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001812:	e00f      	b.n	8001834 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fa4e 	bl	8000cb4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d906      	bls.n	8001834 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e122      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001834:	4b90      	ldr	r3, [pc, #576]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1e8      	bne.n	8001814 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001842:	7ffb      	ldrb	r3, [r7, #31]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	4a8a      	ldr	r2, [pc, #552]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001852:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8108 	beq.w	8001a6e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	2b02      	cmp	r3, #2
 8001864:	f040 80d0 	bne.w	8001a08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001868:	4b83      	ldr	r3, [pc, #524]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	429a      	cmp	r2, r3
 800187a:	d130      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	3b01      	subs	r3, #1
 8001888:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d127      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11f      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018a8:	2a07      	cmp	r2, #7
 80018aa:	bf14      	ite	ne
 80018ac:	2201      	movne	r2, #1
 80018ae:	2200      	moveq	r2, #0
 80018b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d113      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d109      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	3b01      	subs	r3, #1
 80018d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d06e      	beq.n	80019bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d069      	beq.n	80019b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e4:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018f0:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0b7      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001900:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a5c      	ldr	r2, [pc, #368]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190c:	f7ff f9d2 	bl	8000cb4 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f9ce 	bl	8000cb4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0a4      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001926:	4b54      	ldr	r3, [pc, #336]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001932:	4b51      	ldr	r3, [pc, #324]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <HAL_RCC_OscConfig+0x7c8>)
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001942:	3a01      	subs	r2, #1
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	4311      	orrs	r1, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800194c:	0212      	lsls	r2, r2, #8
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	0552      	lsls	r2, r2, #21
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001960:	0852      	lsrs	r2, r2, #1
 8001962:	3a01      	subs	r2, #1
 8001964:	0652      	lsls	r2, r2, #25
 8001966:	4311      	orrs	r1, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800196c:	0912      	lsrs	r2, r2, #4
 800196e:	0452      	lsls	r2, r2, #17
 8001970:	430a      	orrs	r2, r1
 8001972:	4941      	ldr	r1, [pc, #260]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a3e      	ldr	r2, [pc, #248]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001984:	4b3c      	ldr	r3, [pc, #240]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a3b      	ldr	r2, [pc, #236]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001990:	f7ff f990 	bl	8000cb4 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f98c 	bl	8000cb4 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e062      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b6:	e05a      	b.n	8001a6e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e059      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d152      	bne.n	8001a6e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2a      	ldr	r2, [pc, #168]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 80019da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e0:	f7ff f968 	bl	8000cb4 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f964 	bl	8000cb4 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e03a      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x734>
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d02d      	beq.n	8001a6a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a18:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001a2c:	f023 0303 	bic.w	r3, r3, #3
 8001a30:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001a38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a40:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f937 	bl	8000cb4 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f933 	bl	8000cb4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e009      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_RCC_OscConfig+0x7c4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x796>
 8001a68:	e001      	b.n	8001a6e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	f99d808c 	.word	0xf99d808c

08001a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0c8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b66      	ldr	r3, [pc, #408]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d910      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0207 	bic.w	r2, r3, #7
 8001aaa:	4961      	ldr	r1, [pc, #388]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0b0      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d04c      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad8:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d121      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e09e      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d115      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e092      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e086      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b18:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e07e      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 0203 	bic.w	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	493f      	ldr	r1, [pc, #252]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3a:	f7ff f8bb 	bl	8000cb4 <HAL_GetTick>
 8001b3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b42:	f7ff f8b7 	bl	8000cb4 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e066      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 020c 	and.w	r2, r3, #12
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d1eb      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	492c      	ldr	r1, [pc, #176]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d210      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	4924      	ldr	r1, [pc, #144]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e036      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4918      	ldr	r1, [pc, #96]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4910      	ldr	r1, [pc, #64]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf6:	f000 f825 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	490c      	ldr	r1, [pc, #48]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fffa 	bl	8000c14 <HAL_InitTick>
 8001c20:	4603      	mov	r3, r0
 8001c22:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c24:	7afb      	ldrb	r3, [r7, #11]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08002f10 	.word	0x08002f10
 8001c3c:	2000000c 	.word	0x2000000c
 8001c40:	20000010 	.word	0x20000010

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d121      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d11e      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e005      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ca0:	4a2b      	ldr	r2, [pc, #172]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10d      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	e004      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d134      	bne.n	8001d3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0xa6>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d003      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xac>
 8001ce8:	e005      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cec:	617b      	str	r3, [r7, #20]
      break;
 8001cee:	e005      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf2:	617b      	str	r3, [r7, #20]
      break;
 8001cf4:	e002      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	617b      	str	r3, [r7, #20]
      break;
 8001cfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	3301      	adds	r3, #1
 8001d08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	fb02 f203 	mul.w	r2, r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	0e5b      	lsrs	r3, r3, #25
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08002f20 	.word	0x08002f20
 8001d54:	00f42400 	.word	0x00f42400
 8001d58:	007a1200 	.word	0x007a1200

08001d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d74:	f7ff fa3a 	bl	80011ec <HAL_PWREx_GetVoltageRange>
 8001d78:	6178      	str	r0, [r7, #20]
 8001d7a:	e014      	b.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6593      	str	r3, [r2, #88]	; 0x58
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d94:	f7ff fa2a 	bl	80011ec <HAL_PWREx_GetVoltageRange>
 8001d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dac:	d10b      	bne.n	8001dc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d919      	bls.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2ba0      	cmp	r3, #160	; 0xa0
 8001db8:	d902      	bls.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dba:	2302      	movs	r3, #2
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e013      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e010      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d902      	bls.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dcc:	2303      	movs	r3, #3
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e00a      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d102      	bne.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd8:	2302      	movs	r3, #2
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	e004      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b70      	cmp	r3, #112	; 0x70
 8001de2:	d101      	bne.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de4:	2301      	movs	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 0207 	bic.w	r2, r3, #7
 8001df0:	4909      	ldr	r1, [pc, #36]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e049      	b.n	8001ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fdb0 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 fb68 	bl	8002530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e049      	b.n	8001f70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7fe fd77 	bl	80009e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3304      	adds	r3, #4
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f000 fb11 	bl	8002530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_TIM_PWM_Start+0x24>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e03c      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d109      	bne.n	8001fb6 <HAL_TIM_PWM_Start+0x3e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	e02f      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d109      	bne.n	8001fd0 <HAL_TIM_PWM_Start+0x58>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e022      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d109      	bne.n	8001fea <HAL_TIM_PWM_Start+0x72>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	e015      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d109      	bne.n	8002004 <HAL_TIM_PWM_Start+0x8c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e008      	b.n	8002016 <HAL_TIM_PWM_Start+0x9e>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e09c      	b.n	8002158 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d104      	bne.n	800202e <HAL_TIM_PWM_Start+0xb6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800202c:	e023      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d104      	bne.n	800203e <HAL_TIM_PWM_Start+0xc6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800203c:	e01b      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d104      	bne.n	800204e <HAL_TIM_PWM_Start+0xd6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800204c:	e013      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d104      	bne.n	800205e <HAL_TIM_PWM_Start+0xe6>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800205c:	e00b      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b10      	cmp	r3, #16
 8002062:	d104      	bne.n	800206e <HAL_TIM_PWM_Start+0xf6>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800206c:	e003      	b.n	8002076 <HAL_TIM_PWM_Start+0xfe>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fe60 	bl	8002d44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a35      	ldr	r2, [pc, #212]	; (8002160 <HAL_TIM_PWM_Start+0x1e8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x13e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a34      	ldr	r2, [pc, #208]	; (8002164 <HAL_TIM_PWM_Start+0x1ec>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00e      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x13e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a32      	ldr	r2, [pc, #200]	; (8002168 <HAL_TIM_PWM_Start+0x1f0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x13e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a31      	ldr	r2, [pc, #196]	; (800216c <HAL_TIM_PWM_Start+0x1f4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d004      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x13e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <HAL_TIM_PWM_Start+0x1f8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_PWM_Start+0x142>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_TIM_PWM_Start+0x144>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <HAL_TIM_PWM_Start+0x1e8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01d      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e2:	d018      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a22      	ldr	r2, [pc, #136]	; (8002174 <HAL_TIM_PWM_Start+0x1fc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a21      	ldr	r2, [pc, #132]	; (8002178 <HAL_TIM_PWM_Start+0x200>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00e      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_TIM_PWM_Start+0x204>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_TIM_PWM_Start+0x1ec>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_TIM_PWM_Start+0x19e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a15      	ldr	r2, [pc, #84]	; (8002168 <HAL_TIM_PWM_Start+0x1f0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d115      	bne.n	8002142 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_TIM_PWM_Start+0x208>)
 800211e:	4013      	ands	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b06      	cmp	r3, #6
 8002126:	d015      	beq.n	8002154 <HAL_TIM_PWM_Start+0x1dc>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212e:	d011      	beq.n	8002154 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002140:	e008      	b.n	8002154 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e000      	b.n	8002156 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002154:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40013400 	.word	0x40013400
 8002168:	40014000 	.word	0x40014000
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800
 8002174:	40000400 	.word	0x40000400
 8002178:	40000800 	.word	0x40000800
 800217c:	40000c00 	.word	0x40000c00
 8002180:	00010007 	.word	0x00010007

08002184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800219a:	2302      	movs	r3, #2
 800219c:	e0fd      	b.n	800239a <HAL_TIM_PWM_ConfigChannel+0x216>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b14      	cmp	r3, #20
 80021aa:	f200 80f0 	bhi.w	800238e <HAL_TIM_PWM_ConfigChannel+0x20a>
 80021ae:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	08002209 	.word	0x08002209
 80021b8:	0800238f 	.word	0x0800238f
 80021bc:	0800238f 	.word	0x0800238f
 80021c0:	0800238f 	.word	0x0800238f
 80021c4:	08002249 	.word	0x08002249
 80021c8:	0800238f 	.word	0x0800238f
 80021cc:	0800238f 	.word	0x0800238f
 80021d0:	0800238f 	.word	0x0800238f
 80021d4:	0800228b 	.word	0x0800228b
 80021d8:	0800238f 	.word	0x0800238f
 80021dc:	0800238f 	.word	0x0800238f
 80021e0:	0800238f 	.word	0x0800238f
 80021e4:	080022cb 	.word	0x080022cb
 80021e8:	0800238f 	.word	0x0800238f
 80021ec:	0800238f 	.word	0x0800238f
 80021f0:	0800238f 	.word	0x0800238f
 80021f4:	0800230d 	.word	0x0800230d
 80021f8:	0800238f 	.word	0x0800238f
 80021fc:	0800238f 	.word	0x0800238f
 8002200:	0800238f 	.word	0x0800238f
 8002204:	0800234d 	.word	0x0800234d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fa28 	bl	8002664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0208 	orr.w	r2, r2, #8
 8002222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6999      	ldr	r1, [r3, #24]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	619a      	str	r2, [r3, #24]
      break;
 8002246:	e0a3      	b.n	8002390 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fa98 	bl	8002784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6999      	ldr	r1, [r3, #24]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	021a      	lsls	r2, r3, #8
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	619a      	str	r2, [r3, #24]
      break;
 8002288:	e082      	b.n	8002390 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fb01 	bl	8002898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0208 	orr.w	r2, r2, #8
 80022a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0204 	bic.w	r2, r2, #4
 80022b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69d9      	ldr	r1, [r3, #28]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	61da      	str	r2, [r3, #28]
      break;
 80022c8:	e062      	b.n	8002390 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fb69 	bl	80029a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69d9      	ldr	r1, [r3, #28]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	021a      	lsls	r2, r3, #8
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	61da      	str	r2, [r3, #28]
      break;
 800230a:	e041      	b.n	8002390 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fbb2 	bl	8002a7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0208 	orr.w	r2, r2, #8
 8002326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0204 	bic.w	r2, r2, #4
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800234a:	e021      	b.n	8002390 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fbf6 	bl	8002b44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	021a      	lsls	r2, r3, #8
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800238c:	e000      	b.n	8002390 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800238e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop

080023a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIM_ConfigClockSource+0x18>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e0b5      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x184>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f8:	d03e      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0xd4>
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fe:	f200 8087 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002406:	f000 8085 	beq.w	8002514 <HAL_TIM_ConfigClockSource+0x170>
 800240a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240e:	d87f      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002410:	2b70      	cmp	r3, #112	; 0x70
 8002412:	d01a      	beq.n	800244a <HAL_TIM_ConfigClockSource+0xa6>
 8002414:	2b70      	cmp	r3, #112	; 0x70
 8002416:	d87b      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002418:	2b60      	cmp	r3, #96	; 0x60
 800241a:	d050      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x11a>
 800241c:	2b60      	cmp	r3, #96	; 0x60
 800241e:	d877      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002420:	2b50      	cmp	r3, #80	; 0x50
 8002422:	d03c      	beq.n	800249e <HAL_TIM_ConfigClockSource+0xfa>
 8002424:	2b50      	cmp	r3, #80	; 0x50
 8002426:	d873      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d058      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x13a>
 800242c:	2b40      	cmp	r3, #64	; 0x40
 800242e:	d86f      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002430:	2b30      	cmp	r3, #48	; 0x30
 8002432:	d064      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x15a>
 8002434:	2b30      	cmp	r3, #48	; 0x30
 8002436:	d86b      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002438:	2b20      	cmp	r3, #32
 800243a:	d060      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x15a>
 800243c:	2b20      	cmp	r3, #32
 800243e:	d867      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d05c      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x15a>
 8002444:	2b10      	cmp	r3, #16
 8002446:	d05a      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002448:	e062      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6899      	ldr	r1, [r3, #8]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f000 fc53 	bl	8002d04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800246c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	609a      	str	r2, [r3, #8]
      break;
 8002476:	e04e      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f000 fc3c 	bl	8002d04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800249a:	609a      	str	r2, [r3, #8]
      break;
 800249c:	e03b      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f000 fbb0 	bl	8002c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2150      	movs	r1, #80	; 0x50
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fc09 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 80024bc:	e02b      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f000 fbcf 	bl	8002c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2160      	movs	r1, #96	; 0x60
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fbf9 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 80024dc:	e01b      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f000 fb90 	bl	8002c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2140      	movs	r1, #64	; 0x40
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fbe9 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 80024fc:	e00b      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	4610      	mov	r0, r2
 800250a:	f000 fbe0 	bl	8002cce <TIM_ITRx_SetConfig>
        break;
 800250e:	e002      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002510:	bf00      	nop
 8002512:	e000      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002514:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a40      	ldr	r2, [pc, #256]	; (8002644 <TIM_Base_SetConfig+0x114>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <TIM_Base_SetConfig+0x40>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254e:	d00f      	beq.n	8002570 <TIM_Base_SetConfig+0x40>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a3d      	ldr	r2, [pc, #244]	; (8002648 <TIM_Base_SetConfig+0x118>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d00b      	beq.n	8002570 <TIM_Base_SetConfig+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a3c      	ldr	r2, [pc, #240]	; (800264c <TIM_Base_SetConfig+0x11c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d007      	beq.n	8002570 <TIM_Base_SetConfig+0x40>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <TIM_Base_SetConfig+0x120>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d003      	beq.n	8002570 <TIM_Base_SetConfig+0x40>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a3a      	ldr	r2, [pc, #232]	; (8002654 <TIM_Base_SetConfig+0x124>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d108      	bne.n	8002582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a2f      	ldr	r2, [pc, #188]	; (8002644 <TIM_Base_SetConfig+0x114>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01f      	beq.n	80025ca <TIM_Base_SetConfig+0x9a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002590:	d01b      	beq.n	80025ca <TIM_Base_SetConfig+0x9a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <TIM_Base_SetConfig+0x118>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d017      	beq.n	80025ca <TIM_Base_SetConfig+0x9a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a2b      	ldr	r2, [pc, #172]	; (800264c <TIM_Base_SetConfig+0x11c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <TIM_Base_SetConfig+0x9a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a2a      	ldr	r2, [pc, #168]	; (8002650 <TIM_Base_SetConfig+0x120>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00f      	beq.n	80025ca <TIM_Base_SetConfig+0x9a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a29      	ldr	r2, [pc, #164]	; (8002654 <TIM_Base_SetConfig+0x124>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00b      	beq.n	80025ca <TIM_Base_SetConfig+0x9a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a28      	ldr	r2, [pc, #160]	; (8002658 <TIM_Base_SetConfig+0x128>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <TIM_Base_SetConfig+0x9a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a27      	ldr	r2, [pc, #156]	; (800265c <TIM_Base_SetConfig+0x12c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d003      	beq.n	80025ca <TIM_Base_SetConfig+0x9a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <TIM_Base_SetConfig+0x130>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d108      	bne.n	80025dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <TIM_Base_SetConfig+0x114>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00f      	beq.n	8002628 <TIM_Base_SetConfig+0xf8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <TIM_Base_SetConfig+0x124>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00b      	beq.n	8002628 <TIM_Base_SetConfig+0xf8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a11      	ldr	r2, [pc, #68]	; (8002658 <TIM_Base_SetConfig+0x128>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <TIM_Base_SetConfig+0xf8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <TIM_Base_SetConfig+0x12c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <TIM_Base_SetConfig+0xf8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <TIM_Base_SetConfig+0x130>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d103      	bne.n	8002630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	615a      	str	r2, [r3, #20]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40000400 	.word	0x40000400
 800264c:	40000800 	.word	0x40000800
 8002650:	40000c00 	.word	0x40000c00
 8002654:	40013400 	.word	0x40013400
 8002658:	40014000 	.word	0x40014000
 800265c:	40014400 	.word	0x40014400
 8002660:	40014800 	.word	0x40014800

08002664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f023 0201 	bic.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f023 0302 	bic.w	r3, r3, #2
 80026b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a2c      	ldr	r2, [pc, #176]	; (8002770 <TIM_OC1_SetConfig+0x10c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00f      	beq.n	80026e4 <TIM_OC1_SetConfig+0x80>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a2b      	ldr	r2, [pc, #172]	; (8002774 <TIM_OC1_SetConfig+0x110>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00b      	beq.n	80026e4 <TIM_OC1_SetConfig+0x80>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <TIM_OC1_SetConfig+0x114>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d007      	beq.n	80026e4 <TIM_OC1_SetConfig+0x80>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a29      	ldr	r2, [pc, #164]	; (800277c <TIM_OC1_SetConfig+0x118>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d003      	beq.n	80026e4 <TIM_OC1_SetConfig+0x80>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a28      	ldr	r2, [pc, #160]	; (8002780 <TIM_OC1_SetConfig+0x11c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10c      	bne.n	80026fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0308 	bic.w	r3, r3, #8
 80026ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <TIM_OC1_SetConfig+0x10c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00f      	beq.n	8002726 <TIM_OC1_SetConfig+0xc2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a1a      	ldr	r2, [pc, #104]	; (8002774 <TIM_OC1_SetConfig+0x110>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00b      	beq.n	8002726 <TIM_OC1_SetConfig+0xc2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <TIM_OC1_SetConfig+0x114>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <TIM_OC1_SetConfig+0xc2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <TIM_OC1_SetConfig+0x118>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_OC1_SetConfig+0xc2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a17      	ldr	r2, [pc, #92]	; (8002780 <TIM_OC1_SetConfig+0x11c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d111      	bne.n	800274a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	621a      	str	r2, [r3, #32]
}
 8002764:	bf00      	nop
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40013400 	.word	0x40013400
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400
 8002780:	40014800 	.word	0x40014800

08002784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0210 	bic.w	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f023 0320 	bic.w	r3, r3, #32
 80027d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a28      	ldr	r2, [pc, #160]	; (8002884 <TIM_OC2_SetConfig+0x100>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <TIM_OC2_SetConfig+0x6c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a27      	ldr	r2, [pc, #156]	; (8002888 <TIM_OC2_SetConfig+0x104>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10d      	bne.n	800280c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <TIM_OC2_SetConfig+0x100>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00f      	beq.n	8002834 <TIM_OC2_SetConfig+0xb0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <TIM_OC2_SetConfig+0x104>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00b      	beq.n	8002834 <TIM_OC2_SetConfig+0xb0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a1b      	ldr	r2, [pc, #108]	; (800288c <TIM_OC2_SetConfig+0x108>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d007      	beq.n	8002834 <TIM_OC2_SetConfig+0xb0>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <TIM_OC2_SetConfig+0x10c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d003      	beq.n	8002834 <TIM_OC2_SetConfig+0xb0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a19      	ldr	r2, [pc, #100]	; (8002894 <TIM_OC2_SetConfig+0x110>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d113      	bne.n	800285c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800283a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	621a      	str	r2, [r3, #32]
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40013400 	.word	0x40013400
 800288c:	40014000 	.word	0x40014000
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800

08002898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a27      	ldr	r2, [pc, #156]	; (8002994 <TIM_OC3_SetConfig+0xfc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <TIM_OC3_SetConfig+0x6a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a26      	ldr	r2, [pc, #152]	; (8002998 <TIM_OC3_SetConfig+0x100>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10d      	bne.n	800291e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800291c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <TIM_OC3_SetConfig+0xfc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00f      	beq.n	8002946 <TIM_OC3_SetConfig+0xae>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <TIM_OC3_SetConfig+0x100>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_OC3_SetConfig+0xae>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <TIM_OC3_SetConfig+0x104>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_OC3_SetConfig+0xae>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <TIM_OC3_SetConfig+0x108>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_OC3_SetConfig+0xae>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <TIM_OC3_SetConfig+0x10c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d113      	bne.n	800296e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800294c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	621a      	str	r2, [r3, #32]
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40013400 	.word	0x40013400
 800299c:	40014000 	.word	0x40014000
 80029a0:	40014400 	.word	0x40014400
 80029a4:	40014800 	.word	0x40014800

080029a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	031b      	lsls	r3, r3, #12
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <TIM_OC4_SetConfig+0xc0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00f      	beq.n	8002a2c <TIM_OC4_SetConfig+0x84>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <TIM_OC4_SetConfig+0xc4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00b      	beq.n	8002a2c <TIM_OC4_SetConfig+0x84>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <TIM_OC4_SetConfig+0xc8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_OC4_SetConfig+0x84>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <TIM_OC4_SetConfig+0xcc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_OC4_SetConfig+0x84>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <TIM_OC4_SetConfig+0xd0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d109      	bne.n	8002a40 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	621a      	str	r2, [r3, #32]
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40013400 	.word	0x40013400
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40014400 	.word	0x40014400
 8002a78:	40014800 	.word	0x40014800

08002a7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ac0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <TIM_OC5_SetConfig+0xb4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00f      	beq.n	8002af6 <TIM_OC5_SetConfig+0x7a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <TIM_OC5_SetConfig+0xb8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <TIM_OC5_SetConfig+0x7a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <TIM_OC5_SetConfig+0xbc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <TIM_OC5_SetConfig+0x7a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <TIM_OC5_SetConfig+0xc0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <TIM_OC5_SetConfig+0x7a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <TIM_OC5_SetConfig+0xc4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d109      	bne.n	8002b0a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40013400 	.word	0x40013400
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40014400 	.word	0x40014400
 8002b40:	40014800 	.word	0x40014800

08002b44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	051b      	lsls	r3, r3, #20
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <TIM_OC6_SetConfig+0xb8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00f      	beq.n	8002bc0 <TIM_OC6_SetConfig+0x7c>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <TIM_OC6_SetConfig+0xbc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00b      	beq.n	8002bc0 <TIM_OC6_SetConfig+0x7c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <TIM_OC6_SetConfig+0xc0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d007      	beq.n	8002bc0 <TIM_OC6_SetConfig+0x7c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <TIM_OC6_SetConfig+0xc4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_OC6_SetConfig+0x7c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <TIM_OC6_SetConfig+0xc8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d109      	bne.n	8002bd4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	029b      	lsls	r3, r3, #10
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	621a      	str	r2, [r3, #32]
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40013400 	.word	0x40013400
 8002c04:	40014000 	.word	0x40014000
 8002c08:	40014400 	.word	0x40014400
 8002c0c:	40014800 	.word	0x40014800

08002c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f023 0201 	bic.w	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f023 030a 	bic.w	r3, r3, #10
 8002c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f023 0210 	bic.w	r2, r3, #16
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	031b      	lsls	r3, r3, #12
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002caa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f043 0307 	orr.w	r3, r3, #7
 8002cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	609a      	str	r2, [r3, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2201      	movs	r2, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e068      	b.n	8002e7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2e      	ldr	r2, [pc, #184]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d108      	bne.n	8002dee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002de2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01d      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d018      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10c      	bne.n	8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40013400 	.word	0x40013400
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40014000 	.word	0x40014000

08002ea0 <__libc_init_array>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	4d0d      	ldr	r5, [pc, #52]	; (8002ed8 <__libc_init_array+0x38>)
 8002ea4:	4c0d      	ldr	r4, [pc, #52]	; (8002edc <__libc_init_array+0x3c>)
 8002ea6:	1b64      	subs	r4, r4, r5
 8002ea8:	10a4      	asrs	r4, r4, #2
 8002eaa:	2600      	movs	r6, #0
 8002eac:	42a6      	cmp	r6, r4
 8002eae:	d109      	bne.n	8002ec4 <__libc_init_array+0x24>
 8002eb0:	4d0b      	ldr	r5, [pc, #44]	; (8002ee0 <__libc_init_array+0x40>)
 8002eb2:	4c0c      	ldr	r4, [pc, #48]	; (8002ee4 <__libc_init_array+0x44>)
 8002eb4:	f000 f820 	bl	8002ef8 <_init>
 8002eb8:	1b64      	subs	r4, r4, r5
 8002eba:	10a4      	asrs	r4, r4, #2
 8002ebc:	2600      	movs	r6, #0
 8002ebe:	42a6      	cmp	r6, r4
 8002ec0:	d105      	bne.n	8002ece <__libc_init_array+0x2e>
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec8:	4798      	blx	r3
 8002eca:	3601      	adds	r6, #1
 8002ecc:	e7ee      	b.n	8002eac <__libc_init_array+0xc>
 8002ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed2:	4798      	blx	r3
 8002ed4:	3601      	adds	r6, #1
 8002ed6:	e7f2      	b.n	8002ebe <__libc_init_array+0x1e>
 8002ed8:	08002f50 	.word	0x08002f50
 8002edc:	08002f50 	.word	0x08002f50
 8002ee0:	08002f50 	.word	0x08002f50
 8002ee4:	08002f54 	.word	0x08002f54

08002ee8 <memset>:
 8002ee8:	4402      	add	r2, r0
 8002eea:	4603      	mov	r3, r0
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d100      	bne.n	8002ef2 <memset+0xa>
 8002ef0:	4770      	bx	lr
 8002ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef6:	e7f9      	b.n	8002eec <memset+0x4>

08002ef8 <_init>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	bf00      	nop
 8002efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efe:	bc08      	pop	{r3}
 8002f00:	469e      	mov	lr, r3
 8002f02:	4770      	bx	lr

08002f04 <_fini>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	bf00      	nop
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr
