
DAC_A6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800144c  0800144c  0001144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800148c  0800148c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800148c  0800148c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800148c  0800148c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800148c  0800148c  0001148c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001490  08001490  00011490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080014a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080014a0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004fed  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f34  00000000  00000000  00025029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00025f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a8  00000000  00000000  00026490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024214  00000000  00000000  00026938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004efd  00000000  00000000  0004ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df5b9  00000000  00000000  0004fa49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012fc  00000000  00000000  0012f058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001434 	.word	0x08001434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001434 	.word	0x08001434

080001c8 <DAC_Init>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void DAC_Init(void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	  RCC->AHB2ENR |=  (RCC_AHB2ENR_GPIOAEN);
 80001cc:	4b2e      	ldr	r3, [pc, #184]	; (8000288 <DAC_Init+0xc0>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d0:	4a2d      	ldr	r2, [pc, #180]	; (8000288 <DAC_Init+0xc0>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	; 0x4c
	  RCC->APB2ENR |=  (RCC_APB2ENR_SPI1EN);
 80001d8:	4b2b      	ldr	r3, [pc, #172]	; (8000288 <DAC_Init+0xc0>)
 80001da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80001dc:	4a2a      	ldr	r2, [pc, #168]	; (8000288 <DAC_Init+0xc0>)
 80001de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001e2:	6613      	str	r3, [r2, #96]	; 0x60
	  GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 |		// mask function
 80001e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80001f2:	6013      	str	r3, [r2, #0]
	 			  	  	GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
	  GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |	// enable alternate function
 80001f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fe:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000202:	6013      	str	r3, [r2, #0]
	 		 	  	   GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
	  GPIOA->OTYPER  &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 );
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000212:	6053      	str	r3, [r2, #4]
	  GPIOA->PUPDR   &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8000214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000222:	60d3      	str	r3, [r2, #12]
	  GPIOA->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED4_Pos) |
 8000224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000232:	6093      	str	r3, [r2, #8]
	 					  (3 << GPIO_OSPEEDR_OSPEED5_Pos) |
	 				      (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
 					  (3 << GPIO_OSPEEDR_OSPEED7_Pos));
	  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 |		// mask AF selection
 8000234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000238:	6a1b      	ldr	r3, [r3, #32]
 800023a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023e:	b29b      	uxth	r3, r3
 8000240:	6213      	str	r3, [r2, #32]
			  	  	  	 GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
	  GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) |				// select SPI_1 (AF5)
 8000242:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800024c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000250:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000254:	6213      	str	r3, [r2, #32]
	  		  	  	    (5 << GPIO_AFRL_AFSEL5_Pos) |
					    (5 << GPIO_AFRL_AFSEL6_Pos) |
					    (5 << GPIO_AFRL_AFSEL7_Pos));

//	 RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);
	 SPI1->CR1 |= (SPI_CR1_MSTR);				// enable master mode, fck/2, hardware CS, MSB first, full duplex
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <DAC_Init+0xc4>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <DAC_Init+0xc4>)
 800025c:	f043 0304 	orr.w	r3, r3, #4
 8000260:	6013      	str	r3, [r2, #0]
	 SPI1->CR2 |= (SPI_CR2_SSOE |				// enable CS output
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <DAC_Init+0xc4>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	4a09      	ldr	r2, [pc, #36]	; (800028c <DAC_Init+0xc4>)
 8000268:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800026c:	f043 030c 	orr.w	r3, r3, #12
 8000270:	6053      	str	r3, [r2, #4]
			  	   SPI_CR2_NSSP |				// create CS pulse
				  (0xF << SPI_CR2_DS_Pos));	    // 16-bit data frames
	 SPI1->CR1 |= (SPI_CR1_SPE);				// enable SPI
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <DAC_Init+0xc4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <DAC_Init+0xc4>)
 8000278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800027c:	6013      	str	r3, [r2, #0]

}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40021000 	.word	0x40021000
 800028c:	40013000 	.word	0x40013000

08000290 <DAC_writ>:


void DAC_writ(uint16_t data){
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]

//	while(!(SPI1->SR & SPI_SR_TXE));       // ensure room in TXFIFO before writing
//	SPI1->DR = data;

	uint16_t temp;
	while(!(SPI1->SR & SPI_SR_TXE));       // ensure room in TXFIFO before writing
 800029a:	bf00      	nop
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <DAC_writ+0x4c>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	f003 0302 	and.w	r3, r3, #2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d0f9      	beq.n	800029c <DAC_writ+0xc>
		SPI1->DR = ((0x0FFF &  data) | 0x3000);
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <DAC_writ+0x4c>)
 80002b8:	60da      	str	r2, [r3, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));  // wait to receive 16-bits
 80002ba:	bf00      	nop
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <DAC_writ+0x4c>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <DAC_writ+0x2c>
		temp = SPI1->DR;
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <DAC_writ+0x4c>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	81fb      	strh	r3, [r7, #14]
}
 80002ce:	bf00      	nop
 80002d0:	3714      	adds	r7, #20
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40013000 	.word	0x40013000

080002e0 <main>:

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0

  HAL_Init();
 80002e6:	f000 f906 	bl	80004f6 <HAL_Init>
  SystemClock_Config();
 80002ea:	f000 f810 	bl	800030e <SystemClock_Config>

  DAC_Init();
 80002ee:	f7ff ff6b 	bl	80001c8 <DAC_Init>

  uint16_t spi_data0 = 0x0000;
 80002f2:	2300      	movs	r3, #0
 80002f4:	80fb      	strh	r3, [r7, #6]
  uint16_t spi_data1 = 0x0FFF;
 80002f6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80002fa:	80bb      	strh	r3, [r7, #4]
//  uint16_t temp;
    while (1)
    {

    	DAC_writ(spi_data1);
 80002fc:	88bb      	ldrh	r3, [r7, #4]
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffc6 	bl	8000290 <DAC_writ>
    	DAC_writ(spi_data0);
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ffc2 	bl	8000290 <DAC_writ>
    	DAC_writ(spi_data1);
 800030c:	e7f6      	b.n	80002fc <main+0x1c>

0800030e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b096      	sub	sp, #88	; 0x58
 8000312:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	2244      	movs	r2, #68	; 0x44
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f001 f881 	bl	8001424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000322:	463b      	mov	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000330:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000334:	f000 fa48 	bl	80007c8 <HAL_PWREx_ControlVoltageScaling>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800033e:	f000 f82c 	bl	800039a <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000342:	2310      	movs	r3, #16
 8000344:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800034e:	2360      	movs	r3, #96	; 0x60
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000352:	2300      	movs	r3, #0
 8000354:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fa8a 	bl	8000874 <HAL_RCC_OscConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000366:	f000 f818 	bl	800039a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036a:	230f      	movs	r3, #15
 800036c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800036e:	2300      	movs	r3, #0
 8000370:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800037e:	463b      	mov	r3, r7
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fe5c 	bl	8001040 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800038e:	f000 f804 	bl	800039a <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3758      	adds	r7, #88	; 0x58
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039e:	b672      	cpsid	i
}
 80003a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <Error_Handler+0x8>

080003a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x44>)
 80003ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x44>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6613      	str	r3, [r2, #96]	; 0x60
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x44>)
 80003b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <HAL_MspInit+0x44>)
 80003c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <HAL_MspInit+0x44>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003cc:	6593      	str	r3, [r2, #88]	; 0x58
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HAL_MspInit+0x44>)
 80003d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <NMI_Handler+0x4>

080003f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <HardFault_Handler+0x4>

080003f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <MemManage_Handler+0x4>

080003fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000402:	e7fe      	b.n	8000402 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <UsageFault_Handler+0x4>

0800040a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000438:	f000 f8b2 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}

08000440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <SystemInit+0x5c>)
 8000446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <SystemInit+0x5c>)
 800044c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <SystemInit+0x60>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <SystemInit+0x60>)
 800045a:	f043 0301 	orr.w	r3, r3, #1
 800045e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <SystemInit+0x60>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <SystemInit+0x60>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <SystemInit+0x60>)
 800046c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000470:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000474:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <SystemInit+0x60>)
 8000478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800047c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <SystemInit+0x60>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <SystemInit+0x60>)
 8000484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000488:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <SystemInit+0x60>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000ed00 	.word	0xe000ed00
 80004a0:	40021000 	.word	0x40021000

080004a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004a8:	f7ff ffca 	bl	8000440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ae:	e003      	b.n	80004b8 <LoopCopyDataInit>

080004b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004b6:	3104      	adds	r1, #4

080004b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004b8:	480a      	ldr	r0, [pc, #40]	; (80004e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004c0:	d3f6      	bcc.n	80004b0 <CopyDataInit>
	ldr	r2, =_sbss
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80004c4:	e002      	b.n	80004cc <LoopFillZerobss>

080004c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004c8:	f842 3b04 	str.w	r3, [r2], #4

080004cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <LoopForever+0x16>)
	cmp	r2, r3
 80004ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004d0:	d3f9      	bcc.n	80004c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004d2:	f000 ff83 	bl	80013dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004d6:	f7ff ff03 	bl	80002e0 <main>

080004da <LoopForever>:

LoopForever:
    b LoopForever
 80004da:	e7fe      	b.n	80004da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80004e0:	08001494 	.word	0x08001494
	ldr	r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004e8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80004ec:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80004f0:	2000002c 	.word	0x2000002c

080004f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC1_2_IRQHandler>

080004f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004fc:	2300      	movs	r3, #0
 80004fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f91f 	bl	8000744 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f80e 	bl	8000528 <HAL_InitTick>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d002      	beq.n	8000518 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	71fb      	strb	r3, [r7, #7]
 8000516:	e001      	b.n	800051c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000518:	f7ff ff44 	bl	80003a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800051c:	79fb      	ldrb	r3, [r7, #7]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000530:	2300      	movs	r3, #0
 8000532:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <HAL_InitTick+0x6c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d023      	beq.n	8000584 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <HAL_InitTick+0x70>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <HAL_InitTick+0x6c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f91d 	bl	8000792 <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d10f      	bne.n	800057e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d809      	bhi.n	8000578 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f8f5 	bl	800075a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <HAL_InitTick+0x74>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	e007      	b.n	8000588 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000578:	2301      	movs	r3, #1
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e004      	b.n	8000588 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	e001      	b.n	8000588 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000584:	2301      	movs	r3, #1
 8000586:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000008 	.word	0x20000008
 8000598:	20000000 	.word	0x20000000
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000008 	.word	0x20000008
 80005c4:	20000028 	.word	0x20000028

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000028 	.word	0x20000028

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db0a      	blt.n	800066e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	490c      	ldr	r1, [pc, #48]	; (8000690 <__NVIC_SetPriority+0x4c>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800066c:	e00a      	b.n	8000684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4908      	ldr	r1, [pc, #32]	; (8000694 <__NVIC_SetPriority+0x50>)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	3b04      	subs	r3, #4
 800067c:	0112      	lsls	r2, r2, #4
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	440b      	add	r3, r1
 8000682:	761a      	strb	r2, [r3, #24]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000e100 	.word	0xe000e100
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000698:	b480      	push	{r7}
 800069a:	b089      	sub	sp, #36	; 0x24
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	f1c3 0307 	rsb	r3, r3, #7
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	bf28      	it	cs
 80006b6:	2304      	movcs	r3, #4
 80006b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3304      	adds	r3, #4
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d902      	bls.n	80006c8 <NVIC_EncodePriority+0x30>
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3b03      	subs	r3, #3
 80006c6:	e000      	b.n	80006ca <NVIC_EncodePriority+0x32>
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	f04f 32ff 	mov.w	r2, #4294967295
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	43da      	mvns	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	401a      	ands	r2, r3
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e0:	f04f 31ff 	mov.w	r1, #4294967295
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ea:	43d9      	mvns	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	4313      	orrs	r3, r2
         );
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3724      	adds	r7, #36	; 0x24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000710:	d301      	bcc.n	8000716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000712:	2301      	movs	r3, #1
 8000714:	e00f      	b.n	8000736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <SysTick_Config+0x40>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800071e:	210f      	movs	r1, #15
 8000720:	f04f 30ff 	mov.w	r0, #4294967295
 8000724:	f7ff ff8e 	bl	8000644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <SysTick_Config+0x40>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <SysTick_Config+0x40>)
 8000730:	2207      	movs	r2, #7
 8000732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	e000e010 	.word	0xe000e010

08000744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ff47 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	4603      	mov	r3, r0
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
 8000766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800076c:	f7ff ff5c 	bl	8000628 <__NVIC_GetPriorityGrouping>
 8000770:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	6978      	ldr	r0, [r7, #20]
 8000778:	f7ff ff8e 	bl	8000698 <NVIC_EncodePriority>
 800077c:	4602      	mov	r2, r0
 800077e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff5d 	bl	8000644 <__NVIC_SetPriority>
}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ffb0 	bl	8000700 <SysTick_Config>
 80007a0:	4603      	mov	r3, r0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40007000 	.word	0x40007000

080007c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007d6:	d130      	bne.n	800083a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007e4:	d038      	beq.n	8000858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80007f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2232      	movs	r2, #50	; 0x32
 80007fc:	fb02 f303 	mul.w	r3, r2, r3
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	0c9b      	lsrs	r3, r3, #18
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800080c:	e002      	b.n	8000814 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3b01      	subs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800081c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000820:	d102      	bne.n	8000828 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1f2      	bne.n	800080e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000834:	d110      	bne.n	8000858 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000836:	2303      	movs	r3, #3
 8000838:	e00f      	b.n	800085a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000846:	d007      	beq.n	8000858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000856:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40007000 	.word	0x40007000
 800086c:	20000000 	.word	0x20000000
 8000870:	431bde83 	.word	0x431bde83

08000874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e3d4      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000886:	4ba1      	ldr	r3, [pc, #644]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f003 030c 	and.w	r3, r3, #12
 800088e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000890:	4b9e      	ldr	r3, [pc, #632]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f000 80e4 	beq.w	8000a70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d007      	beq.n	80008be <HAL_RCC_OscConfig+0x4a>
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	2b0c      	cmp	r3, #12
 80008b2:	f040 808b 	bne.w	80009cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	f040 8087 	bne.w	80009cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80008be:	4b93      	ldr	r3, [pc, #588]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d005      	beq.n	80008d6 <HAL_RCC_OscConfig+0x62>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d101      	bne.n	80008d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e3ac      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a1a      	ldr	r2, [r3, #32]
 80008da:	4b8c      	ldr	r3, [pc, #560]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <HAL_RCC_OscConfig+0x7c>
 80008e6:	4b89      	ldr	r3, [pc, #548]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008ee:	e005      	b.n	80008fc <HAL_RCC_OscConfig+0x88>
 80008f0:	4b86      	ldr	r3, [pc, #536]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 80008f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d223      	bcs.n	8000948 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a1b      	ldr	r3, [r3, #32]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fd09 	bl	800131c <RCC_SetFlashLatencyFromMSIRange>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e38d      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000914:	4b7d      	ldr	r3, [pc, #500]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a7c      	ldr	r2, [pc, #496]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b7a      	ldr	r3, [pc, #488]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a1b      	ldr	r3, [r3, #32]
 800092c:	4977      	ldr	r1, [pc, #476]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 800092e:	4313      	orrs	r3, r2
 8000930:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000932:	4b76      	ldr	r3, [pc, #472]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	4972      	ldr	r1, [pc, #456]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000942:	4313      	orrs	r3, r2
 8000944:	604b      	str	r3, [r1, #4]
 8000946:	e025      	b.n	8000994 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000948:	4b70      	ldr	r3, [pc, #448]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a6f      	ldr	r2, [pc, #444]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b6d      	ldr	r3, [pc, #436]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a1b      	ldr	r3, [r3, #32]
 8000960:	496a      	ldr	r1, [pc, #424]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000962:	4313      	orrs	r3, r2
 8000964:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000966:	4b69      	ldr	r3, [pc, #420]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	4965      	ldr	r1, [pc, #404]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000976:	4313      	orrs	r3, r2
 8000978:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d109      	bne.n	8000994 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fcc9 	bl	800131c <RCC_SetFlashLatencyFromMSIRange>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e34d      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000994:	f000 fc36 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 8000998:	4602      	mov	r2, r0
 800099a:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	f003 030f 	and.w	r3, r3, #15
 80009a4:	495a      	ldr	r1, [pc, #360]	; (8000b10 <HAL_RCC_OscConfig+0x29c>)
 80009a6:	5ccb      	ldrb	r3, [r1, r3]
 80009a8:	f003 031f 	and.w	r3, r3, #31
 80009ac:	fa22 f303 	lsr.w	r3, r2, r3
 80009b0:	4a58      	ldr	r2, [pc, #352]	; (8000b14 <HAL_RCC_OscConfig+0x2a0>)
 80009b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80009b4:	4b58      	ldr	r3, [pc, #352]	; (8000b18 <HAL_RCC_OscConfig+0x2a4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fdb5 	bl	8000528 <HAL_InitTick>
 80009be:	4603      	mov	r3, r0
 80009c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d052      	beq.n	8000a6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	e331      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d032      	beq.n	8000a3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a4c      	ldr	r2, [pc, #304]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80009e0:	f7ff fdf2 	bl	80005c8 <HAL_GetTick>
 80009e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80009e6:	e008      	b.n	80009fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009e8:	f7ff fdee 	bl	80005c8 <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d901      	bls.n	80009fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80009f6:	2303      	movs	r3, #3
 80009f8:	e31a      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80009fa:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f0      	beq.n	80009e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a06:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	493b      	ldr	r1, [pc, #236]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a20:	4313      	orrs	r3, r2
 8000a22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a24:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	021b      	lsls	r3, r3, #8
 8000a32:	4936      	ldr	r1, [pc, #216]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a34:	4313      	orrs	r3, r2
 8000a36:	604b      	str	r3, [r1, #4]
 8000a38:	e01a      	b.n	8000a70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a33      	ldr	r2, [pc, #204]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000a46:	f7ff fdbf 	bl	80005c8 <HAL_GetTick>
 8000a4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000a4c:	e008      	b.n	8000a60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a4e:	f7ff fdbb 	bl	80005c8 <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d901      	bls.n	8000a60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e2e7      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1f0      	bne.n	8000a4e <HAL_RCC_OscConfig+0x1da>
 8000a6c:	e000      	b.n	8000a70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d074      	beq.n	8000b66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	2b08      	cmp	r3, #8
 8000a80:	d005      	beq.n	8000a8e <HAL_RCC_OscConfig+0x21a>
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	2b0c      	cmp	r3, #12
 8000a86:	d10e      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d10b      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d064      	beq.n	8000b64 <HAL_RCC_OscConfig+0x2f0>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d160      	bne.n	8000b64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e2c4      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aae:	d106      	bne.n	8000abe <HAL_RCC_OscConfig+0x24a>
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	e01d      	b.n	8000afa <HAL_RCC_OscConfig+0x286>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ac6:	d10c      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x26e>
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	e00b      	b.n	8000afa <HAL_RCC_OscConfig+0x286>
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_RCC_OscConfig+0x298>)
 8000af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d01c      	beq.n	8000b3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b02:	f7ff fd61 	bl	80005c8 <HAL_GetTick>
 8000b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b08:	e011      	b.n	8000b2e <HAL_RCC_OscConfig+0x2ba>
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	0800144c 	.word	0x0800144c
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b1c:	f7ff fd54 	bl	80005c8 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2b64      	cmp	r3, #100	; 0x64
 8000b28:	d901      	bls.n	8000b2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e280      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b2e:	4baf      	ldr	r3, [pc, #700]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f0      	beq.n	8000b1c <HAL_RCC_OscConfig+0x2a8>
 8000b3a:	e014      	b.n	8000b66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fd44 	bl	80005c8 <HAL_GetTick>
 8000b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b42:	e008      	b.n	8000b56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b44:	f7ff fd40 	bl	80005c8 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2b64      	cmp	r3, #100	; 0x64
 8000b50:	d901      	bls.n	8000b56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000b52:	2303      	movs	r3, #3
 8000b54:	e26c      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b56:	4ba5      	ldr	r3, [pc, #660]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f0      	bne.n	8000b44 <HAL_RCC_OscConfig+0x2d0>
 8000b62:	e000      	b.n	8000b66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d060      	beq.n	8000c34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d005      	beq.n	8000b84 <HAL_RCC_OscConfig+0x310>
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	2b0c      	cmp	r3, #12
 8000b7c:	d119      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d116      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b84:	4b99      	ldr	r3, [pc, #612]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d005      	beq.n	8000b9c <HAL_RCC_OscConfig+0x328>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d101      	bne.n	8000b9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e249      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b9c:	4b93      	ldr	r3, [pc, #588]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	061b      	lsls	r3, r3, #24
 8000baa:	4990      	ldr	r1, [pc, #576]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bb0:	e040      	b.n	8000c34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d023      	beq.n	8000c02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bba:	4b8c      	ldr	r3, [pc, #560]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a8b      	ldr	r2, [pc, #556]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fcff 	bl	80005c8 <HAL_GetTick>
 8000bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000bcc:	e008      	b.n	8000be0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bce:	f7ff fcfb 	bl	80005c8 <HAL_GetTick>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d901      	bls.n	8000be0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e227      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000be0:	4b82      	ldr	r3, [pc, #520]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0f0      	beq.n	8000bce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bec:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	061b      	lsls	r3, r3, #24
 8000bfa:	497c      	ldr	r1, [pc, #496]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	604b      	str	r3, [r1, #4]
 8000c00:	e018      	b.n	8000c34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c02:	4b7a      	ldr	r3, [pc, #488]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a79      	ldr	r2, [pc, #484]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fcdb 	bl	80005c8 <HAL_GetTick>
 8000c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c14:	e008      	b.n	8000c28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c16:	f7ff fcd7 	bl	80005c8 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e203      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c28:	4b70      	ldr	r3, [pc, #448]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f0      	bne.n	8000c16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d03c      	beq.n	8000cba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d01c      	beq.n	8000c82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c48:	4b68      	ldr	r3, [pc, #416]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c4e:	4a67      	ldr	r2, [pc, #412]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c58:	f7ff fcb6 	bl	80005c8 <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c60:	f7ff fcb2 	bl	80005c8 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e1de      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000c72:	4b5e      	ldr	r3, [pc, #376]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0ef      	beq.n	8000c60 <HAL_RCC_OscConfig+0x3ec>
 8000c80:	e01b      	b.n	8000cba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c82:	4b5a      	ldr	r3, [pc, #360]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c88:	4a58      	ldr	r2, [pc, #352]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c92:	f7ff fc99 	bl	80005c8 <HAL_GetTick>
 8000c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c98:	e008      	b.n	8000cac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c9a:	f7ff fc95 	bl	80005c8 <HAL_GetTick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d901      	bls.n	8000cac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	e1c1      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000cac:	4b4f      	ldr	r3, [pc, #316]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ef      	bne.n	8000c9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 80a6 	beq.w	8000e14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ccc:	4b47      	ldr	r3, [pc, #284]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10d      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cd8:	4b44      	ldr	r3, [pc, #272]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cdc:	4a43      	ldr	r2, [pc, #268]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce4:	4b41      	ldr	r3, [pc, #260]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <HAL_RCC_OscConfig+0x57c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d118      	bne.n	8000d32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d00:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <HAL_RCC_OscConfig+0x57c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a3a      	ldr	r2, [pc, #232]	; (8000df0 <HAL_RCC_OscConfig+0x57c>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d0c:	f7ff fc5c 	bl	80005c8 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d14:	f7ff fc58 	bl	80005c8 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e184      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d26:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <HAL_RCC_OscConfig+0x57c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d108      	bne.n	8000d4c <HAL_RCC_OscConfig+0x4d8>
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d40:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d4a:	e024      	b.n	8000d96 <HAL_RCC_OscConfig+0x522>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b05      	cmp	r3, #5
 8000d52:	d110      	bne.n	8000d76 <HAL_RCC_OscConfig+0x502>
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d5a:	4a24      	ldr	r2, [pc, #144]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d6a:	4a20      	ldr	r2, [pc, #128]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d74:	e00f      	b.n	8000d96 <HAL_RCC_OscConfig+0x522>
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d7e:	f023 0301 	bic.w	r3, r3, #1
 8000d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000d8e:	f023 0304 	bic.w	r3, r3, #4
 8000d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d016      	beq.n	8000dcc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fc13 	bl	80005c8 <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000da4:	e00a      	b.n	8000dbc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da6:	f7ff fc0f 	bl	80005c8 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e139      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_RCC_OscConfig+0x578>)
 8000dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0ed      	beq.n	8000da6 <HAL_RCC_OscConfig+0x532>
 8000dca:	e01a      	b.n	8000e02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fbfc 	bl	80005c8 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000dd2:	e00f      	b.n	8000df4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fbf8 	bl	80005c8 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d906      	bls.n	8000df4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e122      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000df4:	4b90      	ldr	r3, [pc, #576]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1e8      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e02:	7ffb      	ldrb	r3, [r7, #31]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d105      	bne.n	8000e14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e08:	4b8b      	ldr	r3, [pc, #556]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0c:	4a8a      	ldr	r2, [pc, #552]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e12:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 8108 	beq.w	800102e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	f040 80d0 	bne.w	8000fc8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000e28:	4b83      	ldr	r3, [pc, #524]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f003 0203 	and.w	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d130      	bne.n	8000e9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	3b01      	subs	r3, #1
 8000e48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d127      	bne.n	8000e9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d11f      	bne.n	8000e9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000e68:	2a07      	cmp	r2, #7
 8000e6a:	bf14      	ite	ne
 8000e6c:	2201      	movne	r2, #1
 8000e6e:	2200      	moveq	r2, #0
 8000e70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d113      	bne.n	8000e9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	3b01      	subs	r3, #1
 8000e84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d109      	bne.n	8000e9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	085b      	lsrs	r3, r3, #1
 8000e96:	3b01      	subs	r3, #1
 8000e98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d06e      	beq.n	8000f7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	2b0c      	cmp	r3, #12
 8000ea2:	d069      	beq.n	8000f78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000ea4:	4b64      	ldr	r3, [pc, #400]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d105      	bne.n	8000ebc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000eb0:	4b61      	ldr	r3, [pc, #388]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e0b7      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000ec0:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a5c      	ldr	r2, [pc, #368]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000ecc:	f7ff fb7c 	bl	80005c8 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ed4:	f7ff fb78 	bl	80005c8 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e0a4      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ee6:	4b54      	ldr	r3, [pc, #336]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ef2:	4b51      	ldr	r3, [pc, #324]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	4b51      	ldr	r3, [pc, #324]	; (800103c <HAL_RCC_OscConfig+0x7c8>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f02:	3a01      	subs	r2, #1
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	4311      	orrs	r1, r2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f0c:	0212      	lsls	r2, r2, #8
 8000f0e:	4311      	orrs	r1, r2
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000f14:	0852      	lsrs	r2, r2, #1
 8000f16:	3a01      	subs	r2, #1
 8000f18:	0552      	lsls	r2, r2, #21
 8000f1a:	4311      	orrs	r1, r2
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f20:	0852      	lsrs	r2, r2, #1
 8000f22:	3a01      	subs	r2, #1
 8000f24:	0652      	lsls	r2, r2, #25
 8000f26:	4311      	orrs	r1, r2
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f2c:	0912      	lsrs	r2, r2, #4
 8000f2e:	0452      	lsls	r2, r2, #17
 8000f30:	430a      	orrs	r2, r1
 8000f32:	4941      	ldr	r1, [pc, #260]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000f38:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a3e      	ldr	r2, [pc, #248]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f44:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	4a3b      	ldr	r2, [pc, #236]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000f50:	f7ff fb3a 	bl	80005c8 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff fb36 	bl	80005c8 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e062      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f6a:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f0      	beq.n	8000f58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f76:	e05a      	b.n	800102e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e059      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d152      	bne.n	800102e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000fa0:	f7ff fb12 	bl	80005c8 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa8:	f7ff fb0e 	bl	80005c8 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e03a      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x734>
 8000fc6:	e032      	b.n	800102e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	2b0c      	cmp	r3, #12
 8000fcc:	d02d      	beq.n	800102a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a19      	ldr	r2, [pc, #100]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fd8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d105      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000fec:	f023 0303 	bic.w	r3, r3, #3
 8000ff0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 8000ff8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001000:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001002:	f7ff fae1 	bl	80005c8 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800100a:	f7ff fadd 	bl	80005c8 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e009      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_RCC_OscConfig+0x7c4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f0      	bne.n	800100a <HAL_RCC_OscConfig+0x796>
 8001028:	e001      	b.n	800102e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	f99d808c 	.word	0xf99d808c

08001040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0c8      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001054:	4b66      	ldr	r3, [pc, #408]	; (80011f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d910      	bls.n	8001084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001062:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 0207 	bic.w	r2, r3, #7
 800106a:	4961      	ldr	r1, [pc, #388]	; (80011f0 <HAL_RCC_ClockConfig+0x1b0>)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	4313      	orrs	r3, r2
 8001070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001072:	4b5f      	ldr	r3, [pc, #380]	; (80011f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d001      	beq.n	8001084 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0b0      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d04c      	beq.n	800112a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d107      	bne.n	80010a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001098:	4b56      	ldr	r3, [pc, #344]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d121      	bne.n	80010e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e09e      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d107      	bne.n	80010c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b0:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d115      	bne.n	80010e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e092      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d107      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010c8:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e086      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d8:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e07e      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 0203 	bic.w	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	493f      	ldr	r1, [pc, #252]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010fa:	f7ff fa65 	bl	80005c8 <HAL_GetTick>
 80010fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001100:	e00a      	b.n	8001118 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001102:	f7ff fa61 	bl	80005c8 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001110:	4293      	cmp	r3, r2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e066      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 020c 	and.w	r2, r3, #12
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	429a      	cmp	r2, r3
 8001128:	d1eb      	bne.n	8001102 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	492c      	ldr	r1, [pc, #176]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001144:	4313      	orrs	r3, r2
 8001146:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <HAL_RCC_ClockConfig+0x1b0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d210      	bcs.n	8001178 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 0207 	bic.w	r2, r3, #7
 800115e:	4924      	ldr	r1, [pc, #144]	; (80011f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001166:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d001      	beq.n	8001178 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e036      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	4918      	ldr	r1, [pc, #96]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001192:	4313      	orrs	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4910      	ldr	r1, [pc, #64]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011b6:	f000 f825 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_RCC_ClockConfig+0x1b4>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	490c      	ldr	r1, [pc, #48]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	5ccb      	ldrb	r3, [r1, r3]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9a4 	bl	8000528 <HAL_InitTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80011e4:	7afb      	ldrb	r3, [r7, #11]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	0800144c 	.word	0x0800144c
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_RCC_GetSysClockFreq+0x108>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <HAL_RCC_GetSysClockFreq+0x108>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_GetSysClockFreq+0x34>
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	2b0c      	cmp	r3, #12
 8001230:	d121      	bne.n	8001276 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d11e      	bne.n	8001276 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001238:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_RCC_GetSysClockFreq+0x108>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d107      	bne.n	8001254 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_RCC_GetSysClockFreq+0x108>)
 8001246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e005      	b.n	8001260 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001254:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_RCC_GetSysClockFreq+0x108>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001260:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001268:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10d      	bne.n	800128c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001274:	e00a      	b.n	800128c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d102      	bne.n	8001282 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_RCC_GetSysClockFreq+0x110>)
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	e004      	b.n	800128c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d101      	bne.n	800128c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_RCC_GetSysClockFreq+0x114>)
 800128a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d134      	bne.n	80012fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_GetSysClockFreq+0x108>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d003      	beq.n	80012aa <HAL_RCC_GetSysClockFreq+0xa6>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d003      	beq.n	80012b0 <HAL_RCC_GetSysClockFreq+0xac>
 80012a8:	e005      	b.n	80012b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_RCC_GetSysClockFreq+0x110>)
 80012ac:	617b      	str	r3, [r7, #20]
      break;
 80012ae:	e005      	b.n	80012bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_RCC_GetSysClockFreq+0x114>)
 80012b2:	617b      	str	r3, [r7, #20]
      break;
 80012b4:	e002      	b.n	80012bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	617b      	str	r3, [r7, #20]
      break;
 80012ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_RCC_GetSysClockFreq+0x108>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	3301      	adds	r3, #1
 80012c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_RCC_GetSysClockFreq+0x108>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	fb02 f203 	mul.w	r2, r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_RCC_GetSysClockFreq+0x108>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	0e5b      	lsrs	r3, r3, #25
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	3301      	adds	r3, #1
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80012fc:	69bb      	ldr	r3, [r7, #24]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	0800145c 	.word	0x0800145c
 8001314:	00f42400 	.word	0x00f42400
 8001318:	007a1200 	.word	0x007a1200

0800131c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001334:	f7ff fa3a 	bl	80007ac <HAL_PWREx_GetVoltageRange>
 8001338:	6178      	str	r0, [r7, #20]
 800133a:	e014      	b.n	8001366 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001346:	6593      	str	r3, [r2, #88]	; 0x58
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001354:	f7ff fa2a 	bl	80007ac <HAL_PWREx_GetVoltageRange>
 8001358:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001364:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800136c:	d10b      	bne.n	8001386 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b80      	cmp	r3, #128	; 0x80
 8001372:	d919      	bls.n	80013a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2ba0      	cmp	r3, #160	; 0xa0
 8001378:	d902      	bls.n	8001380 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	e013      	b.n	80013a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001380:	2301      	movs	r3, #1
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	e010      	b.n	80013a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b80      	cmp	r3, #128	; 0x80
 800138a:	d902      	bls.n	8001392 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800138c:	2303      	movs	r3, #3
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	e00a      	b.n	80013a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b80      	cmp	r3, #128	; 0x80
 8001396:	d102      	bne.n	800139e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001398:	2302      	movs	r3, #2
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	e004      	b.n	80013a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b70      	cmp	r3, #112	; 0x70
 80013a2:	d101      	bne.n	80013a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 0207 	bic.w	r2, r3, #7
 80013b0:	4909      	ldr	r1, [pc, #36]	; (80013d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d001      	beq.n	80013ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40022000 	.word	0x40022000

080013dc <__libc_init_array>:
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	4d0d      	ldr	r5, [pc, #52]	; (8001414 <__libc_init_array+0x38>)
 80013e0:	4c0d      	ldr	r4, [pc, #52]	; (8001418 <__libc_init_array+0x3c>)
 80013e2:	1b64      	subs	r4, r4, r5
 80013e4:	10a4      	asrs	r4, r4, #2
 80013e6:	2600      	movs	r6, #0
 80013e8:	42a6      	cmp	r6, r4
 80013ea:	d109      	bne.n	8001400 <__libc_init_array+0x24>
 80013ec:	4d0b      	ldr	r5, [pc, #44]	; (800141c <__libc_init_array+0x40>)
 80013ee:	4c0c      	ldr	r4, [pc, #48]	; (8001420 <__libc_init_array+0x44>)
 80013f0:	f000 f820 	bl	8001434 <_init>
 80013f4:	1b64      	subs	r4, r4, r5
 80013f6:	10a4      	asrs	r4, r4, #2
 80013f8:	2600      	movs	r6, #0
 80013fa:	42a6      	cmp	r6, r4
 80013fc:	d105      	bne.n	800140a <__libc_init_array+0x2e>
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
 8001400:	f855 3b04 	ldr.w	r3, [r5], #4
 8001404:	4798      	blx	r3
 8001406:	3601      	adds	r6, #1
 8001408:	e7ee      	b.n	80013e8 <__libc_init_array+0xc>
 800140a:	f855 3b04 	ldr.w	r3, [r5], #4
 800140e:	4798      	blx	r3
 8001410:	3601      	adds	r6, #1
 8001412:	e7f2      	b.n	80013fa <__libc_init_array+0x1e>
 8001414:	0800148c 	.word	0x0800148c
 8001418:	0800148c 	.word	0x0800148c
 800141c:	0800148c 	.word	0x0800148c
 8001420:	08001490 	.word	0x08001490

08001424 <memset>:
 8001424:	4402      	add	r2, r0
 8001426:	4603      	mov	r3, r0
 8001428:	4293      	cmp	r3, r2
 800142a:	d100      	bne.n	800142e <memset+0xa>
 800142c:	4770      	bx	lr
 800142e:	f803 1b01 	strb.w	r1, [r3], #1
 8001432:	e7f9      	b.n	8001428 <memset+0x4>

08001434 <_init>:
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001436:	bf00      	nop
 8001438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143a:	bc08      	pop	{r3}
 800143c:	469e      	mov	lr, r3
 800143e:	4770      	bx	lr

08001440 <_fini>:
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001442:	bf00      	nop
 8001444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001446:	bc08      	pop	{r3}
 8001448:	469e      	mov	lr, r3
 800144a:	4770      	bx	lr
