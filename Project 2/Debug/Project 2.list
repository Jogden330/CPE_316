
Project 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003574  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08003700  08003700  00013700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003950  08003950  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003950  08003950  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003950  08003950  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003950  08003950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000010  08003968  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08003968  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008391  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001687  00000000  00000000  000283d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  00029a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  0002a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256bd  00000000  00000000  0002a590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b70  00000000  00000000  0004fc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e400d  00000000  00000000  000567bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013a7ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000191c  00000000  00000000  0013a820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036e4 	.word	0x080036e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080036e4 	.word	0x080036e4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <DAC_Init>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "DAC.h"


void DAC_Init(void){
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

	  RCC->AHB2ENR |=  (RCC_AHB2ENR_GPIOAEN);
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <DAC_Init+0xc0>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <DAC_Init+0xc0>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
	  RCC->APB2ENR |=  (RCC_APB2ENR_SPI1EN);
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <DAC_Init+0xc0>)
 8000ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad8:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <DAC_Init+0xc0>)
 8000ada:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ade:	6613      	str	r3, [r2, #96]	; 0x60
	  GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 |		// mask function
 8000ae0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000aee:	6013      	str	r3, [r2, #0]
	 			  	  	GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
	  GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |	// enable alternate function
 8000af0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000afa:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000afe:	6013      	str	r3, [r2, #0]
	 		 	  	   GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
	  GPIOA->OTYPER  &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 );
 8000b00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b0e:	6053      	str	r3, [r2, #4]
	  GPIOA->PUPDR   &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8000b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b1e:	60d3      	str	r3, [r2, #12]
	  GPIOA->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED4_Pos) |
 8000b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b2a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000b2e:	6093      	str	r3, [r2, #8]
	 					  (3 << GPIO_OSPEEDR_OSPEED5_Pos) |
	 				      (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
 					  (3 << GPIO_OSPEEDR_OSPEED7_Pos));
	  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 |		// mask AF selection
 8000b30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b34:	6a1b      	ldr	r3, [r3, #32]
 8000b36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	6213      	str	r3, [r2, #32]
			  	  	  	 GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
	  GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) |				// select SPI_1 (AF5)
 8000b3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b48:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000b4c:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000b50:	6213      	str	r3, [r2, #32]
	  		  	  	    (5 << GPIO_AFRL_AFSEL5_Pos) |
					    (5 << GPIO_AFRL_AFSEL6_Pos) |
					    (5 << GPIO_AFRL_AFSEL7_Pos));

	 SPI1->CR1 |= (SPI_CR1_MSTR);				// enable master mode, fck/2, hardware CS, MSB first, full duplex
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <DAC_Init+0xc4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <DAC_Init+0xc4>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6013      	str	r3, [r2, #0]
	 SPI1->CR2 |= (SPI_CR2_SSOE |				// enable CS output
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <DAC_Init+0xc4>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <DAC_Init+0xc4>)
 8000b64:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000b68:	f043 030c 	orr.w	r3, r3, #12
 8000b6c:	6053      	str	r3, [r2, #4]
			  	   SPI_CR2_NSSP |				// create CS pulse
				  (0xF << SPI_CR2_DS_Pos));	    // 16-bit data frames
	 SPI1->CR1 |= (SPI_CR1_SPE);				// enable SPI
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <DAC_Init+0xc4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <DAC_Init+0xc4>)
 8000b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b78:	6013      	str	r3, [r2, #0]

}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40013000 	.word	0x40013000

08000b8c <DAC_writ>:


void DAC_writ(uint16_t data){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]

    uint16_t temp;
    while(!(SPI1->SR & SPI_SR_TXE));       // ensure room in TXFIFO before writing
 8000b96:	bf00      	nop
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <DAC_writ+0x4c>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0f9      	beq.n	8000b98 <DAC_writ+0xc>
    		SPI1->DR = ((0x0FFF &  data) | 0x3000);
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <DAC_writ+0x4c>)
 8000bb4:	60da      	str	r2, [r3, #12]
    while(!(SPI1->SR & SPI_SR_RXNE));  // wait to receive 16-bits
 8000bb6:	bf00      	nop
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <DAC_writ+0x4c>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0f9      	beq.n	8000bb8 <DAC_writ+0x2c>
    		temp = SPI1->DR;
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <DAC_writ+0x4c>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	81fb      	strh	r3, [r7, #14]
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000

08000bdc <read_Pad>:
//
//	}
//	return x;
//}

int read_Pad(void){
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0


	volatile uint8_t row;

	for(uint8_t colum = 0; colum < 3; colum++){
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	e088      	b.n	8000cfa <read_Pad+0x11e>

//		delay();


		GPIOB->BRR |= 0X70;
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <read_Pad+0x134>)
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <read_Pad+0x134>)
 8000bee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000bf2:	6293      	str	r3, [r2, #40]	; 0x28
		GPIOB->BSRR |= (1 << (4 + colum));
 8000bf4:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <read_Pad+0x134>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	79fa      	ldrb	r2, [r7, #7]
 8000bfa:	3204      	adds	r2, #4
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000c02:	4611      	mov	r1, r2
 8000c04:	4a42      	ldr	r2, [pc, #264]	; (8000d10 <read_Pad+0x134>)
 8000c06:	430b      	orrs	r3, r1
 8000c08:	6193      	str	r3, [r2, #24]
		row |= (GPIOB->IDR & 0x0F); //mask
 8000c0a:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <read_Pad+0x134>)
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	71bb      	strb	r3, [r7, #6]

		switch(colum){
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d047      	beq.n	8000cb4 <read_Pad+0xd8>
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	dc65      	bgt.n	8000cf4 <read_Pad+0x118>
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <read_Pad+0x56>
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d021      	beq.n	8000c74 <read_Pad+0x98>
 8000c30:	e060      	b.n	8000cf4 <read_Pad+0x118>
		case 0:
			switch(row){
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	2b07      	cmp	r3, #7
 8000c3a:	d81b      	bhi.n	8000c74 <read_Pad+0x98>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <read_Pad+0x68>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c65 	.word	0x08000c65
 8000c48:	08000c69 	.word	0x08000c69
 8000c4c:	08000c75 	.word	0x08000c75
 8000c50:	08000c6d 	.word	0x08000c6d
 8000c54:	08000c75 	.word	0x08000c75
 8000c58:	08000c75 	.word	0x08000c75
 8000c5c:	08000c75 	.word	0x08000c75
 8000c60:	08000c71 	.word	0x08000c71
				case 1:
					return 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e04d      	b.n	8000d04 <read_Pad+0x128>
				case 2:
					return 4;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	e04b      	b.n	8000d04 <read_Pad+0x128>
				case 4:
					return 7;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	e049      	b.n	8000d04 <read_Pad+0x128>
				case 8:
					return 10;
 8000c70:	230a      	movs	r3, #10
 8000c72:	e047      	b.n	8000d04 <read_Pad+0x128>
				}
		case 1:
			switch(row){
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	d81a      	bhi.n	8000cb4 <read_Pad+0xd8>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <read_Pad+0xa8>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000ca5 	.word	0x08000ca5
 8000c88:	08000ca9 	.word	0x08000ca9
 8000c8c:	08000cb5 	.word	0x08000cb5
 8000c90:	08000cad 	.word	0x08000cad
 8000c94:	08000cb5 	.word	0x08000cb5
 8000c98:	08000cb5 	.word	0x08000cb5
 8000c9c:	08000cb5 	.word	0x08000cb5
 8000ca0:	08000cb1 	.word	0x08000cb1
				case 1:
					return 2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e02d      	b.n	8000d04 <read_Pad+0x128>
				case 2:
					return 5;
 8000ca8:	2305      	movs	r3, #5
 8000caa:	e02b      	b.n	8000d04 <read_Pad+0x128>
				case 4:
					return 8;
 8000cac:	2308      	movs	r3, #8
 8000cae:	e029      	b.n	8000d04 <read_Pad+0x128>
				case 8:
					return 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e027      	b.n	8000d04 <read_Pad+0x128>
			}
		case 2:
			switch(row){
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	d81a      	bhi.n	8000cf4 <read_Pad+0x118>
 8000cbe:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <read_Pad+0xe8>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000ce5 	.word	0x08000ce5
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	08000cf5 	.word	0x08000cf5
 8000cd0:	08000ced 	.word	0x08000ced
 8000cd4:	08000cf5 	.word	0x08000cf5
 8000cd8:	08000cf5 	.word	0x08000cf5
 8000cdc:	08000cf5 	.word	0x08000cf5
 8000ce0:	08000cf1 	.word	0x08000cf1
				case 1:
					return 3;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e00d      	b.n	8000d04 <read_Pad+0x128>
				case 2:
					return 6;
 8000ce8:	2306      	movs	r3, #6
 8000cea:	e00b      	b.n	8000d04 <read_Pad+0x128>
				case 4:
					return 9;
 8000cec:	2309      	movs	r3, #9
 8000cee:	e009      	b.n	8000d04 <read_Pad+0x128>
				case 8:
					return 11;
 8000cf0:	230b      	movs	r3, #11
 8000cf2:	e007      	b.n	8000d04 <read_Pad+0x128>
	for(uint8_t colum = 0; colum < 3; colum++){
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	f67f af73 	bls.w	8000be8 <read_Pad+0xc>

		}


	}
	return 0xFF;
 8000d02:	23ff      	movs	r3, #255	; 0xff

}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	48000400 	.word	0x48000400

08000d14 <Keypad_init>:



void Keypad_init(void){
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0


  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <Keypad_init+0x88>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	4a1f      	ldr	r2, [pc, #124]	; (8000d9c <Keypad_init+0x88>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	64d3      	str	r3, [r2, #76]	; 0x4c
  GPIOB->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <Keypad_init+0x8c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1d      	ldr	r2, [pc, #116]	; (8000da0 <Keypad_init+0x8c>)
 8000d2a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000d2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000d32:	6013      	str	r3, [r2, #0]
		              GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
					  GPIO_MODER_MODE8 | GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11);
  GPIOB->MODER   |=  (GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <Keypad_init+0x8c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <Keypad_init+0x8c>)
 8000d3a:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000d3e:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 8000d42:	6013      	str	r3, [r2, #0]
		              GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE11_0);
  GPIOB->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 |
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <Keypad_init+0x8c>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <Keypad_init+0x8c>)
 8000d4a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d4e:	f023 030f 	bic.w	r3, r3, #15
 8000d52:	6053      	str	r3, [r2, #4]
		  	  	  	  GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 |
					  GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
  GPIOB->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3 |
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <Keypad_init+0x8c>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	4a11      	ldr	r2, [pc, #68]	; (8000da0 <Keypad_init+0x8c>)
 8000d5a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000d5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000d62:	60d3      	str	r3, [r2, #12]
		  	  	  	  GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD8 |
					  GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);
  GPIOB->PUPDR   |=  (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1 |
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <Keypad_init+0x8c>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <Keypad_init+0x8c>)
 8000d6a:	f443 532a 	orr.w	r3, r3, #10880	; 0x2a80
 8000d6e:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 8000d72:	60d3      	str	r3, [r2, #12]
  		  	  	  	  GPIO_PUPDR_PUPD4_1 | GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1 );
  GPIOB->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <Keypad_init+0x8c>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <Keypad_init+0x8c>)
 8000d7a:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 8000d7e:	6093      	str	r3, [r2, #8]
					  (3 << GPIO_OSPEEDR_OSPEED8_Pos) |
                      (3 << GPIO_OSPEEDR_OSPEED9_Pos) |
  	          		  (3 << GPIO_OSPEEDR_OSPEED10_Pos)|
                      (3 << GPIO_OSPEEDR_OSPEED11_Pos));

  GPIOB->BRR = ( 0X3F );   // preset PC0, - PC 10 to zero
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <Keypad_init+0x8c>)
 8000d82:	223f      	movs	r2, #63	; 0x3f
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28


    GPIOB->BRR |= (GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11);
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <Keypad_init+0x8c>)
 8000d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <Keypad_init+0x8c>)
 8000d8c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000d90:	6293      	str	r3, [r2, #40]	; 0x28



}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000400 	.word	0x48000400

08000da4 <LCD_command>:
#include <math.h>
#include "LCD.h"



void LCD_command(unsigned char command){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]

	GPIOC->ODR = (command);
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <LCD_command+0x54>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 fd0f 	bl	80017d8 <HAL_Delay>
    GPIOC->BSRR |= (command | E);
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <LCD_command+0x54>)
 8000dbc:	699a      	ldr	r2, [r3, #24]
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <LCD_command+0x54>)
 8000dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc8:	6193      	str	r3, [r2, #24]
    HAL_Delay(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f000 fd04 	bl	80017d8 <HAL_Delay>
    GPIOC->BRR |= (E);
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <LCD_command+0x54>)
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <LCD_command+0x54>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_Delay(1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f000 fcfb 	bl	80017d8 <HAL_Delay>
    GPIOC->BRR |= (command);
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <LCD_command+0x54>)
 8000de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4903      	ldr	r1, [pc, #12]	; (8000df8 <LCD_command+0x54>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	628b      	str	r3, [r1, #40]	; 0x28




}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	48000800 	.word	0x48000800

08000dfc <LCD_write_char>:

void LCD_write_char(unsigned char letter){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]

	GPIOC->ODR = (letter | RS);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <LCD_write_char+0x5c>)
 8000e0e:	615a      	str	r2, [r3, #20]

	HAL_Delay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fce1 	bl	80017d8 <HAL_Delay>
    GPIOC->BSRR |= (letter | RS | E);
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <LCD_write_char+0x5c>)
 8000e18:	699a      	ldr	r2, [r3, #24]
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <LCD_write_char+0x5c>)
 8000e20:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000e24:	6193      	str	r3, [r2, #24]
    HAL_Delay(1);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 fcd6 	bl	80017d8 <HAL_Delay>
	GPIOC->BRR |= (E);
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <LCD_write_char+0x5c>)
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <LCD_write_char+0x5c>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e36:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_Delay(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fccd 	bl	80017d8 <HAL_Delay>
	GPIOC->BRR |= (letter | RS);
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <LCD_write_char+0x5c>)
 8000e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <LCD_write_char+0x5c>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	6293      	str	r3, [r2, #40]	; 0x28

}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	48000800 	.word	0x48000800

08000e5c <LCD_clear>:

void LCD_clear(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	LCD_command(0X01);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff ff9f 	bl	8000da4 <LCD_command>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <LCD_newline>:

void LCD_newline(void){
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0

	LCD_command(0XC0);
 8000e6e:	20c0      	movs	r0, #192	; 0xc0
 8000e70:	f7ff ff98 	bl	8000da4 <LCD_command>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <LCD_init>:

void LCD_init(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

	  // configure PC0 - PC10 for GPIO output, push-pull
	  // no pull up / pull down, high speed
	  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <LCD_init+0x9c>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <LCD_init+0x9c>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	64d3      	str	r3, [r2, #76]	; 0x4c
	  GPIOC->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <LCD_init+0xa0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <LCD_init+0xa0>)
 8000e8e:	0d9b      	lsrs	r3, r3, #22
 8000e90:	059b      	lsls	r3, r3, #22
 8000e92:	6013      	str	r3, [r2, #0]
			              GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7 |
						  GPIO_MODER_MODE8 | GPIO_MODER_MODE9 | GPIO_MODER_MODE10);
	  GPIOC->MODER   |=  (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <LCD_init+0xa0>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	491f      	ldr	r1, [pc, #124]	; (8000f18 <LCD_init+0xa0>)
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <LCD_init+0xa4>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
			  	  	  	  GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 |
						  GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0);
	  GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 |
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <LCD_init+0xa0>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <LCD_init+0xa0>)
 8000ea6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000eaa:	f023 0307 	bic.w	r3, r3, #7
 8000eae:	6053      	str	r3, [r2, #4]
			  	  	  	  GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 |
						  GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10);
	  GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3 |
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <LCD_init+0xa0>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <LCD_init+0xa0>)
 8000eb6:	0d9b      	lsrs	r3, r3, #22
 8000eb8:	059b      	lsls	r3, r3, #22
 8000eba:	60d3      	str	r3, [r2, #12]
			  	  	  	  GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7 |
						  GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10);
      GPIOC->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <LCD_init+0xa0>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <LCD_init+0xa0>)
 8000ec2:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 8000ec6:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 8000eca:	6093      	str	r3, [r2, #8]
						  (3 << GPIO_OSPEEDR_OSPEED7_Pos) |
						  (3 << GPIO_OSPEEDR_OSPEED8_Pos) |
						  (3 << GPIO_OSPEEDR_OSPEED9_Pos) |
						  (3 << GPIO_OSPEEDR_OSPEED10_Pos));

	   GPIOC->BRR = ( 0x7FF );   // preset PC0, - PC 10 to zero
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <LCD_init+0xa0>)
 8000ece:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28


	LCD_command(0x30);
 8000ed4:	2030      	movs	r0, #48	; 0x30
 8000ed6:	f7ff ff65 	bl	8000da4 <LCD_command>
	HAL_Delay(100);
 8000eda:	2064      	movs	r0, #100	; 0x64
 8000edc:	f000 fc7c 	bl	80017d8 <HAL_Delay>

	LCD_command(0x30);
 8000ee0:	2030      	movs	r0, #48	; 0x30
 8000ee2:	f7ff ff5f 	bl	8000da4 <LCD_command>
	HAL_Delay(10);
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f000 fc76 	bl	80017d8 <HAL_Delay>

    LCD_command(0x30);
 8000eec:	2030      	movs	r0, #48	; 0x30
 8000eee:	f7ff ff59 	bl	8000da4 <LCD_command>
    HAL_Delay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f000 fc70 	bl	80017d8 <HAL_Delay>

    LCD_command(0x38);
 8000ef8:	2038      	movs	r0, #56	; 0x38
 8000efa:	f7ff ff53 	bl	8000da4 <LCD_command>

    LCD_command(0x10);
 8000efe:	2010      	movs	r0, #16
 8000f00:	f7ff ff50 	bl	8000da4 <LCD_command>

    LCD_command(0x0F);
 8000f04:	200f      	movs	r0, #15
 8000f06:	f7ff ff4d 	bl	8000da4 <LCD_command>

    LCD_command(0x06);
 8000f0a:	2006      	movs	r0, #6
 8000f0c:	f7ff ff4a 	bl	8000da4 <LCD_command>


}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48000800 	.word	0x48000800
 8000f1c:	00155555 	.word	0x00155555

08000f20 <sineinitate>:

	 } state_type;

state_type state;

void sineinitate(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
    int i = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
    for(i = 0; i<100;i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e038      	b.n	8000fa2 <sineinitate+0x82>
        SineData[i] =(sin(2*3.14*i/100)+1)*2047;
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fa9b 	bl	800046c <__aeabi_i2d>
 8000f36:	a325      	add	r3, pc, #148	; (adr r3, 8000fcc <sineinitate+0xac>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb00 	bl	8000540 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <sineinitate+0xa0>)
 8000f4e:	f7ff fc21 	bl	8000794 <__aeabi_ddiv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	ec43 2b17 	vmov	d7, r2, r3
 8000f5a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f5e:	eef0 0a67 	vmov.f32	s1, s15
 8000f62:	f001 fb89 	bl	8002678 <sin>
 8000f66:	ec51 0b10 	vmov	r0, r1, d0
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <sineinitate+0xa4>)
 8000f70:	f7ff f930 	bl	80001d4 <__adddf3>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	a30e      	add	r3, pc, #56	; (adr r3, 8000fb8 <sineinitate+0x98>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fadd 	bl	8000540 <__aeabi_dmul>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fd71 	bl	8000a74 <__aeabi_d2iz>
 8000f92:	4602      	mov	r2, r0
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <sineinitate+0xa8>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(i = 0; i<100;i++){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b63      	cmp	r3, #99	; 0x63
 8000fa6:	ddc3      	ble.n	8000f30 <sineinitate+0x10>
    }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	409ffc00 	.word	0x409ffc00
 8000fc0:	40590000 	.word	0x40590000
 8000fc4:	3ff00000 	.word	0x3ff00000
 8000fc8:	20000034 	.word	0x20000034
 8000fcc:	51eb851f 	.word	0x51eb851f
 8000fd0:	40191eb8 	.word	0x40191eb8

08000fd4 <sawinitate>:

void sawinitate(void){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0


    for(int i = 0; i<100;i++){
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	e00b      	b.n	8000ff8 <sawinitate+0x24>
    	SawData[i] = i * 400;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fe6:	fb02 f203 	mul.w	r2, r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <sawinitate+0x38>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i<100;i++){
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b63      	cmp	r3, #99	; 0x63
 8000ffc:	ddf0      	ble.n	8000fe0 <sawinitate+0xc>
    }

}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000354 	.word	0x20000354

08001010 <tiangleinitate>:

void tiangleinitate(void){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0

	for(int i = 0; i < 51; i++){
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	e00c      	b.n	8001036 <tiangleinitate+0x26>
		 TriangleData[i] = i * 80;
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4619      	mov	r1, r3
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <tiangleinitate+0x64>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 51; i++){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b32      	cmp	r3, #50	; 0x32
 800103a:	ddef      	ble.n	800101c <tiangleinitate+0xc>
	}

	for(int i = 50; i<100;i++){
 800103c:	2332      	movs	r3, #50	; 0x32
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	e00d      	b.n	800105e <tiangleinitate+0x4e>
		TriangleData[i] = 4000 - (i * 80);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8001050:	4908      	ldr	r1, [pc, #32]	; (8001074 <tiangleinitate+0x64>)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 50; i<100;i++){
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2b63      	cmp	r3, #99	; 0x63
 8001062:	ddee      	ble.n	8001042 <tiangleinitate+0x32>
	}


}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200001c4 	.word	0x200001c4

08001078 <LCD_write_freq>:

void LCD_write_freq(void){
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

	int i = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

	char line2[5] = {'0','0',' ','H','z'};
 8001082:	4a29      	ldr	r2, [pc, #164]	; (8001128 <LCD_write_freq+0xb0>)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108a:	6018      	str	r0, [r3, #0]
 800108c:	3304      	adds	r3, #4
 800108e:	7019      	strb	r1, [r3, #0]

	LCD_newline();
 8001090:	f7ff feeb 	bl	8000e6a <LCD_newline>

		switch(freq){
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <LCD_write_freq+0xb4>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	f640 126d 	movw	r2, #2413	; 0x96d
 800109c:	4293      	cmp	r3, r2
 800109e:	d01a      	beq.n	80010d6 <LCD_write_freq+0x5e>
 80010a0:	f640 126d 	movw	r2, #2413	; 0x96d
 80010a4:	4293      	cmp	r3, r2
 80010a6:	dc2a      	bgt.n	80010fe <LCD_write_freq+0x86>
 80010a8:	f240 42b6 	movw	r2, #1206	; 0x4b6
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d016      	beq.n	80010de <LCD_write_freq+0x66>
 80010b0:	f240 42b6 	movw	r2, #1206	; 0x4b6
 80010b4:	4293      	cmp	r3, r2
 80010b6:	dc22      	bgt.n	80010fe <LCD_write_freq+0x86>
 80010b8:	f240 3223 	movw	r2, #803	; 0x323
 80010bc:	4293      	cmp	r3, r2
 80010be:	d012      	beq.n	80010e6 <LCD_write_freq+0x6e>
 80010c0:	f5b3 7f49 	cmp.w	r3, #804	; 0x324
 80010c4:	da1b      	bge.n	80010fe <LCD_write_freq+0x86>
 80010c6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80010ca:	d014      	beq.n	80010f6 <LCD_write_freq+0x7e>
 80010cc:	f240 225a 	movw	r2, #602	; 0x25a
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00c      	beq.n	80010ee <LCD_write_freq+0x76>
 80010d4:	e013      	b.n	80010fe <LCD_write_freq+0x86>
		case(FREQ_100Hz):
			LCD_write_char(0x30 + 1);
 80010d6:	2031      	movs	r0, #49	; 0x31
 80010d8:	f7ff fe90 	bl	8000dfc <LCD_write_char>
		    break;
 80010dc:	e00f      	b.n	80010fe <LCD_write_freq+0x86>
		case(FREQ_200Hz):
			LCD_write_char(0x30 + 2);
 80010de:	2032      	movs	r0, #50	; 0x32
 80010e0:	f7ff fe8c 	bl	8000dfc <LCD_write_char>
		    break;
 80010e4:	e00b      	b.n	80010fe <LCD_write_freq+0x86>
		case(FREQ_300Hz):
			LCD_write_char(0x30 + 3);
 80010e6:	2033      	movs	r0, #51	; 0x33
 80010e8:	f7ff fe88 	bl	8000dfc <LCD_write_char>
		    break;
 80010ec:	e007      	b.n	80010fe <LCD_write_freq+0x86>
		case(FREQ_400Hz):
			LCD_write_char(0x30 + 4);
 80010ee:	2034      	movs	r0, #52	; 0x34
 80010f0:	f7ff fe84 	bl	8000dfc <LCD_write_char>
			break;
 80010f4:	e003      	b.n	80010fe <LCD_write_freq+0x86>
		case(FREQ_500Hz):
			LCD_write_char(0x30 + 5);
 80010f6:	2035      	movs	r0, #53	; 0x35
 80010f8:	f7ff fe80 	bl	8000dfc <LCD_write_char>
		    break;
 80010fc:	bf00      	nop

		}
		for(i = 0;i < (sizeof(line2)/sizeof(line2[0]));i++){   //cycle throw second line array printing LCD
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e009      	b.n	8001118 <LCD_write_freq+0xa0>
					  LCD_write_char(line2[i]);
 8001104:	1d3a      	adds	r2, r7, #4
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fe75 	bl	8000dfc <LCD_write_char>
		for(i = 0;i < (sizeof(line2)/sizeof(line2[0]));i++){   //cycle throw second line array printing LCD
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b04      	cmp	r3, #4
 800111c:	d9f2      	bls.n	8001104 <LCD_write_freq+0x8c>
	    }
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	08003700 	.word	0x08003700
 800112c:	20000030 	.word	0x20000030

08001130 <LCD_write_string>:

void LCD_write_string(char *sentence) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	LCD_clear();
 8001138:	f7ff fe90 	bl	8000e5c <LCD_clear>


	int i = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
	while (sentence[i] != 0) {
 8001140:	e009      	b.n	8001156 <LCD_write_string+0x26>
		LCD_write_char(sentence[i++]);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	60fa      	str	r2, [r7, #12]
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe53 	bl	8000dfc <LCD_write_char>
	while (sentence[i] != 0) {
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1ef      	bne.n	8001142 <LCD_write_string+0x12>
	}

	LCD_write_freq();
 8001162:	f7ff ff89 	bl	8001078 <LCD_write_freq>

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

	TIM2->SR &= ~(TIM_SR_CC1IF);
 8001174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117e:	f023 0302 	bic.w	r3, r3, #2
 8001182:	6113      	str	r3, [r2, #16]
	TIM2->CCR1 +=  (freq);              //set channel one compare value
 8001184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118a:	4a2b      	ldr	r2, [pc, #172]	; (8001238 <TIM2_IRQHandler+0xc8>)
 800118c:	8812      	ldrh	r2, [r2, #0]
 800118e:	4611      	mov	r1, r2
 8001190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001194:	440b      	add	r3, r1
 8001196:	6353      	str	r3, [r2, #52]	; 0x34

    if(count < 99){
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <TIM2_IRQHandler+0xcc>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	2b62      	cmp	r3, #98	; 0x62
 800119e:	d83c      	bhi.n	800121a <TIM2_IRQHandler+0xaa>

     	 switch(state){
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <TIM2_IRQHandler+0xd0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d83b      	bhi.n	8001220 <TIM2_IRQHandler+0xb0>
 80011a8:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <TIM2_IRQHandler+0x40>)
 80011aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ae:	bf00      	nop
 80011b0:	080011c1 	.word	0x080011c1
 80011b4:	080011d5 	.word	0x080011d5
 80011b8:	080011e9 	.word	0x080011e9
 80011bc:	080011fd 	.word	0x080011fd
     	 	 case(SineWave):
		        data = SineData[count];
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <TIM2_IRQHandler+0xcc>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <TIM2_IRQHandler+0xd4>)
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <TIM2_IRQHandler+0xd8>)
 80011d0:	801a      	strh	r2, [r3, #0]
     	 	 	break;
 80011d2:	e025      	b.n	8001220 <TIM2_IRQHandler+0xb0>

     	 	 case(Triangle):
     	 		data = TriangleData[count];
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <TIM2_IRQHandler+0xcc>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <TIM2_IRQHandler+0xdc>)
 80011dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <TIM2_IRQHandler+0xd8>)
 80011e4:	801a      	strh	r2, [r3, #0]
     	 	    break;
 80011e6:	e01b      	b.n	8001220 <TIM2_IRQHandler+0xb0>

     	 	 case(SawTooth):
				data = SawData[count];
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <TIM2_IRQHandler+0xcc>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <TIM2_IRQHandler+0xe0>)
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <TIM2_IRQHandler+0xd8>)
 80011f8:	801a      	strh	r2, [r3, #0]
     	 	    break;
 80011fa:	e011      	b.n	8001220 <TIM2_IRQHandler+0xb0>

     	 	 case(SquareWave):
				if (count < Duty){
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <TIM2_IRQHandler+0xcc>)
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <TIM2_IRQHandler+0xe4>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d204      	bcs.n	8001212 <TIM2_IRQHandler+0xa2>
		            data = 0x0FFF;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <TIM2_IRQHandler+0xd8>)
 800120a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800120e:	801a      	strh	r2, [r3, #0]
				}else{
				    data = 0x0000;
				}

     	 	    break;
 8001210:	e006      	b.n	8001220 <TIM2_IRQHandler+0xb0>
				    data = 0x0000;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <TIM2_IRQHandler+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	801a      	strh	r2, [r3, #0]
     	 	    break;
 8001218:	e002      	b.n	8001220 <TIM2_IRQHandler+0xb0>

     	 }
    }else{
    	count = 0;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <TIM2_IRQHandler+0xcc>)
 800121c:	2200      	movs	r2, #0
 800121e:	801a      	strh	r2, [r3, #0]
    }
    count++;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <TIM2_IRQHandler+0xcc>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <TIM2_IRQHandler+0xcc>)
 800122a:	801a      	strh	r2, [r3, #0]

}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000030 	.word	0x20000030
 800123c:	2000002c 	.word	0x2000002c
 8001240:	20000032 	.word	0x20000032
 8001244:	20000034 	.word	0x20000034
 8001248:	2000002e 	.word	0x2000002e
 800124c:	200001c4 	.word	0x200001c4
 8001250:	20000354 	.word	0x20000354
 8001254:	20000000 	.word	0x20000000

08001258 <delay>:

int delay(void){
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
	int x;
	for(uint8_t i = 0; i < 50; i++){
 800125e:	2300      	movs	r3, #0
 8001260:	70fb      	strb	r3, [r7, #3]
 8001262:	e011      	b.n	8001288 <delay+0x30>
		for(uint8_t j = 0; i < 50; i++){
 8001264:	2300      	movs	r3, #0
 8001266:	70bb      	strb	r3, [r7, #2]
 8001268:	e008      	b.n	800127c <delay+0x24>
			  x += i + j;
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	78bb      	ldrb	r3, [r7, #2]
 800126e:	4413      	add	r3, r2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	607b      	str	r3, [r7, #4]
		for(uint8_t j = 0; i < 50; i++){
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	3301      	adds	r3, #1
 800127a:	70fb      	strb	r3, [r7, #3]
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2b31      	cmp	r3, #49	; 0x31
 8001280:	d9f3      	bls.n	800126a <delay+0x12>
	for(uint8_t i = 0; i < 50; i++){
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	3301      	adds	r3, #1
 8001286:	70fb      	strb	r3, [r7, #3]
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b31      	cmp	r3, #49	; 0x31
 800128c:	d9ea      	bls.n	8001264 <delay+0xc>
	    }

	}
	return x;
 800128e:	687b      	ldr	r3, [r7, #4]
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <main>:

int main(void){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  HAL_Init();
 80012a2:	f000 fa24 	bl	80016ee <HAL_Init>

  SystemClock_Config();
 80012a6:	f000 f92d 	bl	8001504 <SystemClock_Config>

  Keypad_init();
 80012aa:	f7ff fd33 	bl	8000d14 <Keypad_init>
  DAC_Init();
 80012ae:	f7ff fc09 	bl	8000ac4 <DAC_Init>
  LCD_init();
 80012b2:	f7ff fde1 	bl	8000e78 <LCD_init>

  freq = FREQ_100Hz;
 80012b6:	4b89      	ldr	r3, [pc, #548]	; (80014dc <main+0x240>)
 80012b8:	f640 126d 	movw	r2, #2413	; 0x96d
 80012bc:	801a      	strh	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80012be:	b662      	cpsie	i
}
 80012c0:	bf00      	nop

  __enable_irq();

  RCC->CFGR = ((RCC->CFGR & ~(RCC_CFGR_MCOSEL)) | (RCC_CFGR_MCOSEL_0));
 80012c2:	4b87      	ldr	r3, [pc, #540]	; (80014e0 <main+0x244>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ca:	4a85      	ldr	r2, [pc, #532]	; (80014e0 <main+0x244>)
 80012cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80012d2:	b662      	cpsie	i
}
 80012d4:	bf00      	nop

   __enable_irq();

   NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F));
 80012d6:	4b83      	ldr	r3, [pc, #524]	; (80014e4 <main+0x248>)
 80012d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012dc:	601a      	str	r2, [r3, #0]

   RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN); //Turn on timer 2
 80012de:	4b80      	ldr	r3, [pc, #512]	; (80014e0 <main+0x244>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	4a7f      	ldr	r2, [pc, #508]	; (80014e0 <main+0x244>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
   TIM2->CCR1 = (freq);                    //set channel one compare value
 80012ea:	4b7c      	ldr	r3, [pc, #496]	; (80014dc <main+0x240>)
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34
   TIM2->DIER |= (TIM_DIER_CC1IE);		   //inable interupt on chanle one
 80012f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	60d3      	str	r3, [r2, #12]
   TIM2->SR &= ~(TIM_SR_CC1IF);            //Clear the interupt flag
 8001304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130e:	f023 0302 	bic.w	r3, r3, #2
 8001312:	6113      	str	r3, [r2, #16]
   TIM2->ARR = (0xFFFFFFFF);               //reset the counter
 8001314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM2->CR1 |= TIM_CR1_CEN;			   //start timer
 800131e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6013      	str	r3, [r2, #0]

  uint8_t Key = 0xFF;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	71bb      	strb	r3, [r7, #6]
  uint8_t LastKey = 0xFF;
 8001332:	23ff      	movs	r3, #255	; 0xff
 8001334:	71fb      	strb	r3, [r7, #7]


  sineinitate();
 8001336:	f7ff fdf3 	bl	8000f20 <sineinitate>
  sawinitate();
 800133a:	f7ff fe4b 	bl	8000fd4 <sawinitate>
  tiangleinitate();
 800133e:	f7ff fe67 	bl	8001010 <tiangleinitate>

  LCD_write_string("SQUARE");
 8001342:	4869      	ldr	r0, [pc, #420]	; (80014e8 <main+0x24c>)
 8001344:	f7ff fef4 	bl	8001130 <LCD_write_string>
  state =  SquareWave;
 8001348:	4b68      	ldr	r3, [pc, #416]	; (80014ec <main+0x250>)
 800134a:	2203      	movs	r2, #3
 800134c:	701a      	strb	r2, [r3, #0]



  while (1){

  	  DAC_writ(data);
 800134e:	4b68      	ldr	r3, [pc, #416]	; (80014f0 <main+0x254>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fc1a 	bl	8000b8c <DAC_writ>

      Key = read_Pad();
 8001358:	f7ff fc40 	bl	8000bdc <read_Pad>
 800135c:	4603      	mov	r3, r0
 800135e:	71bb      	strb	r3, [r7, #6]

      delay();
 8001360:	f7ff ff7a 	bl	8001258 <delay>


  	  if((Key != 0xFF) && (Key != LastKey) && (Key < 13)){
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	2bff      	cmp	r3, #255	; 0xff
 8001368:	d0f1      	beq.n	800134e <main+0xb2>
 800136a:	79ba      	ldrb	r2, [r7, #6]
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	429a      	cmp	r2, r3
 8001370:	d0ed      	beq.n	800134e <main+0xb2>
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	2b0c      	cmp	r3, #12
 8001376:	d8ea      	bhi.n	800134e <main+0xb2>
  		  switch(Key){
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	2b0b      	cmp	r3, #11
 800137c:	f200 80aa 	bhi.w	80014d4 <main+0x238>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <main+0xec>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	080014b1 	.word	0x080014b1
 800138c:	080013b9 	.word	0x080013b9
 8001390:	080013db 	.word	0x080013db
 8001394:	080013fd 	.word	0x080013fd
 8001398:	0800141f 	.word	0x0800141f
 800139c:	08001441 	.word	0x08001441
 80013a0:	08001463 	.word	0x08001463
 80013a4:	08001471 	.word	0x08001471
 80013a8:	0800147f 	.word	0x0800147f
 80013ac:	0800148d 	.word	0x0800148d
 80013b0:	0800149b 	.word	0x0800149b
 80013b4:	080014b9 	.word	0x080014b9
  		      case(1):
  		        freq = FREQ_100Hz;
 80013b8:	4b48      	ldr	r3, [pc, #288]	; (80014dc <main+0x240>)
 80013ba:	f640 126d 	movw	r2, #2413	; 0x96d
 80013be:	801a      	strh	r2, [r3, #0]
  		        LCD_write_freq();
 80013c0:	f7ff fe5a 	bl	8001078 <LCD_write_freq>
  		        TIM2->CCR1 +=  (freq);              //set channel one compare value
 80013c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ca:	4a44      	ldr	r2, [pc, #272]	; (80014dc <main+0x240>)
 80013cc:	8812      	ldrh	r2, [r2, #0]
 80013ce:	4611      	mov	r1, r2
 80013d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d4:	440b      	add	r3, r1
 80013d6:	6353      	str	r3, [r2, #52]	; 0x34
  		    	break;
 80013d8:	e07c      	b.n	80014d4 <main+0x238>

  		      case(2):
  				freq = FREQ_200Hz;
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <main+0x240>)
 80013dc:	f240 42b6 	movw	r2, #1206	; 0x4b6
 80013e0:	801a      	strh	r2, [r3, #0]
  		        LCD_write_freq();
 80013e2:	f7ff fe49 	bl	8001078 <LCD_write_freq>
  		        TIM2->CCR1 +=  (freq);              //set channel one compare value
 80013e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ec:	4a3b      	ldr	r2, [pc, #236]	; (80014dc <main+0x240>)
 80013ee:	8812      	ldrh	r2, [r2, #0]
 80013f0:	4611      	mov	r1, r2
 80013f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f6:	440b      	add	r3, r1
 80013f8:	6353      	str	r3, [r2, #52]	; 0x34
  		      	break;
 80013fa:	e06b      	b.n	80014d4 <main+0x238>

  		      case(3):
  				freq = FREQ_300Hz;
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <main+0x240>)
 80013fe:	f240 3223 	movw	r2, #803	; 0x323
 8001402:	801a      	strh	r2, [r3, #0]
  		        LCD_write_freq();
 8001404:	f7ff fe38 	bl	8001078 <LCD_write_freq>
  		        TIM2->CCR1 +=  (freq);              //set channel one compare value
 8001408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	4a33      	ldr	r2, [pc, #204]	; (80014dc <main+0x240>)
 8001410:	8812      	ldrh	r2, [r2, #0]
 8001412:	4611      	mov	r1, r2
 8001414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001418:	440b      	add	r3, r1
 800141a:	6353      	str	r3, [r2, #52]	; 0x34
  		    	break;
 800141c:	e05a      	b.n	80014d4 <main+0x238>

  		      case(4):
  				freq = FREQ_400Hz;
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <main+0x240>)
 8001420:	f240 225a 	movw	r2, #602	; 0x25a
 8001424:	801a      	strh	r2, [r3, #0]
  		        LCD_write_freq();
 8001426:	f7ff fe27 	bl	8001078 <LCD_write_freq>
  		        TIM2->CCR1 +=  (freq);              //set channel one compare value
 800142a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <main+0x240>)
 8001432:	8812      	ldrh	r2, [r2, #0]
 8001434:	4611      	mov	r1, r2
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	440b      	add	r3, r1
 800143c:	6353      	str	r3, [r2, #52]	; 0x34
  		      	break;
 800143e:	e049      	b.n	80014d4 <main+0x238>

  		      case(5):
  		    	freq = FREQ_500Hz;
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <main+0x240>)
 8001442:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001446:	801a      	strh	r2, [r3, #0]
  		        LCD_write_freq();
 8001448:	f7ff fe16 	bl	8001078 <LCD_write_freq>
  		        TIM2->CCR1 +=  (freq);              //set channel one compare value
 800144c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001452:	4a22      	ldr	r2, [pc, #136]	; (80014dc <main+0x240>)
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	4611      	mov	r1, r2
 8001458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145c:	440b      	add	r3, r1
 800145e:	6353      	str	r3, [r2, #52]	; 0x34
  		      	break;
 8001460:	e038      	b.n	80014d4 <main+0x238>

  		  	  case(6):
  		       	  state =  SineWave;
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <main+0x250>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
  		  	      LCD_write_string("SINEWAVE");
 8001468:	4822      	ldr	r0, [pc, #136]	; (80014f4 <main+0x258>)
 800146a:	f7ff fe61 	bl	8001130 <LCD_write_string>
  		  	      break;
 800146e:	e031      	b.n	80014d4 <main+0x238>

  		  	  case(7):
  		          state =  Triangle;
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <main+0x250>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
  		  	      LCD_write_string("TRIANGLE");
 8001476:	4820      	ldr	r0, [pc, #128]	; (80014f8 <main+0x25c>)
 8001478:	f7ff fe5a 	bl	8001130 <LCD_write_string>
  		  	      break;
 800147c:	e02a      	b.n	80014d4 <main+0x238>

  		  	  case(8):
  		          state =  SawTooth;
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <main+0x250>)
 8001480:	2202      	movs	r2, #2
 8001482:	701a      	strb	r2, [r3, #0]
  		  	      LCD_write_string("SAWTOOTH");
 8001484:	481d      	ldr	r0, [pc, #116]	; (80014fc <main+0x260>)
 8001486:	f7ff fe53 	bl	8001130 <LCD_write_string>
  				  break;
 800148a:	e023      	b.n	80014d4 <main+0x238>

  		  	  case(9):
  		  		  state =  SquareWave;
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <main+0x250>)
 800148e:	2203      	movs	r2, #3
 8001490:	701a      	strb	r2, [r3, #0]
  		  	      LCD_write_string("SQUARE");
 8001492:	4815      	ldr	r0, [pc, #84]	; (80014e8 <main+0x24c>)
 8001494:	f7ff fe4c 	bl	8001130 <LCD_write_string>
  		  		  break;
 8001498:	e01c      	b.n	80014d4 <main+0x238>

  		  	  case(10):
  				  if(Duty > 10)
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <main+0x264>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	d915      	bls.n	80014ce <main+0x232>
  					  Duty = Duty - 10;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <main+0x264>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	3b0a      	subs	r3, #10
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <main+0x264>)
 80014ac:	801a      	strh	r2, [r3, #0]
  		  	      break;
 80014ae:	e00e      	b.n	80014ce <main+0x232>

  		  	  case(0):
  				  Duty = 50;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <main+0x264>)
 80014b2:	2232      	movs	r2, #50	; 0x32
 80014b4:	801a      	strh	r2, [r3, #0]
  		  	      break;
 80014b6:	e00d      	b.n	80014d4 <main+0x238>

  		  	  case(11):
  				  if(Duty < 90)
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <main+0x264>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	2b59      	cmp	r3, #89	; 0x59
 80014be:	d808      	bhi.n	80014d2 <main+0x236>
  					  Duty = Duty + 10;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <main+0x264>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	330a      	adds	r3, #10
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <main+0x264>)
 80014ca:	801a      	strh	r2, [r3, #0]
  		  	      break;
 80014cc:	e001      	b.n	80014d2 <main+0x236>
  		  	      break;
 80014ce:	bf00      	nop
 80014d0:	e000      	b.n	80014d4 <main+0x238>
  		  	      break;
 80014d2:	bf00      	nop
  		  	  }

                LastKey = Key;
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	71fb      	strb	r3, [r7, #7]
  	  DAC_writ(data);
 80014d8:	e739      	b.n	800134e <main+0xb2>
 80014da:	bf00      	nop
 80014dc:	20000030 	.word	0x20000030
 80014e0:	40021000 	.word	0x40021000
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	08003708 	.word	0x08003708
 80014ec:	20000032 	.word	0x20000032
 80014f0:	2000002e 	.word	0x2000002e
 80014f4:	08003710 	.word	0x08003710
 80014f8:	0800371c 	.word	0x0800371c
 80014fc:	08003728 	.word	0x08003728
 8001500:	20000000 	.word	0x20000000

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b096      	sub	sp, #88	; 0x58
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2244      	movs	r2, #68	; 0x44
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f001 f8a6 	bl	8002664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001526:	f44f 7000 	mov.w	r0, #512	; 0x200
 800152a:	f000 fa6d 	bl	8001a08 <HAL_PWREx_ControlVoltageScaling>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001534:	f000 f82c 	bl	8001590 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001538:	2310      	movs	r3, #16
 800153a:	617b      	str	r3, [r7, #20]
  //RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001540:	2390      	movs	r3, #144	; 0x90
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
	#define RCC_MSIRANGE_7                 MSI = 8 MHz
	#define RCC_MSIRANGE_8                 MSI = 16 MHz
	#define RCC_MSIRANGE_9                 MSI = 24 MHz
	#define RCC_MSIRANGE_10                MSI = 32 MHz
	#define RCC_MSIRANGE_11                MSI = 48 MHz   dont use this one*/
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
 8001544:	2301      	movs	r3, #1
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4618      	mov	r0, r3
 8001552:	f000 faaf 	bl	8001ab4 <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800155c:	f000 f818 	bl	8001590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fe81 	bl	8002280 <HAL_RCC_ClockConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001584:	f000 f804 	bl	8001590 <Error_Handler>
  }
}
 8001588:	bf00      	nop
 800158a:	3758      	adds	r7, #88	; 0x58
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>
	...

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_MspInit+0x44>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_MspInit+0x44>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6613      	str	r3, [r2, #96]	; 0x60
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_MspInit+0x44>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x44>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_MspInit+0x44>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x44>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 f8b2 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <SystemInit+0x5c>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a14      	ldr	r2, [pc, #80]	; (8001694 <SystemInit+0x5c>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <SystemInit+0x60>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a11      	ldr	r2, [pc, #68]	; (8001698 <SystemInit+0x60>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <SystemInit+0x60>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <SystemInit+0x60>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <SystemInit+0x60>)
 8001664:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001668:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800166c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <SystemInit+0x60>)
 8001670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001674:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <SystemInit+0x60>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <SystemInit+0x60>)
 800167c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001680:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SystemInit+0x60>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00
 8001698:	40021000 	.word	0x40021000

0800169c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a0:	f7ff ffca 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016a6:	e003      	b.n	80016b0 <LoopCopyDataInit>

080016a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016ae:	3104      	adds	r1, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016b8:	d3f6      	bcc.n	80016a8 <CopyDataInit>
	ldr	r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016bc:	e002      	b.n	80016c4 <LoopFillZerobss>

080016be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016c0:	f842 3b04 	str.w	r3, [r2], #4

080016c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <LoopForever+0x16>)
	cmp	r2, r3
 80016c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016c8:	d3f9      	bcc.n	80016be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f000 ffa7 	bl	800261c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ce:	f7ff fde5 	bl	800129c <main>

080016d2 <LoopForever>:

LoopForever:
    b LoopForever
 80016d2:	e7fe      	b.n	80016d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80016d8:	08003958 	.word	0x08003958
	ldr	r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016e0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80016e4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80016e8:	200004e8 	.word	0x200004e8

080016ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC1_2_IRQHandler>

080016ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 f943 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fe:	200f      	movs	r0, #15
 8001700:	f000 f80e 	bl	8001720 <HAL_InitTick>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	e001      	b.n	8001714 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001710:	f7ff ff44 	bl	800159c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001714:	79fb      	ldrb	r3, [r7, #7]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_InitTick+0x6c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d023      	beq.n	800177c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_InitTick+0x70>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_InitTick+0x6c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f941 	bl	80019d2 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d809      	bhi.n	8001770 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f919 	bl	800199a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_InitTick+0x74>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e007      	b.n	8001780 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e004      	b.n	8001780 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	e001      	b.n	8001780 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000000c 	.word	0x2000000c
 8001790:	20000004 	.word	0x20000004
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000000c 	.word	0x2000000c
 80017bc:	200004e4 	.word	0x200004e4

080017c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_GetTick+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200004e4 	.word	0x200004e4

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff ffee 	bl	80017c0 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffde 	bl	80017c0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000000c 	.word	0x2000000c

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff47 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff5c 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff8e 	bl	80018d8 <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5d 	bl	8001884 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffb0 	bl	8001940 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40007000 	.word	0x40007000

08001a08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a16:	d130      	bne.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a24:	d038      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2232      	movs	r2, #50	; 0x32
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4c:	e002      	b.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a60:	d102      	bne.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f2      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a74:	d110      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e00f      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d007      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e3d4      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac6:	4ba1      	ldr	r3, [pc, #644]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad0:	4b9e      	ldr	r3, [pc, #632]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80e4 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <HAL_RCC_OscConfig+0x4a>
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	f040 808b 	bne.w	8001c0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	f040 8087 	bne.w	8001c0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001afe:	4b93      	ldr	r3, [pc, #588]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x62>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e3ac      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1a      	ldr	r2, [r3, #32]
 8001b1a:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_RCC_OscConfig+0x7c>
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2e:	e005      	b.n	8001b3c <HAL_RCC_OscConfig+0x88>
 8001b30:	4b86      	ldr	r3, [pc, #536]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d223      	bcs.n	8001b88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fd09 	bl	800255c <RCC_SetFlashLatencyFromMSIRange>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e38d      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b54:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a7c      	ldr	r2, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4977      	ldr	r1, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	4972      	ldr	r1, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
 8001b86:	e025      	b.n	8001bd4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b88:	4b70      	ldr	r3, [pc, #448]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6f      	ldr	r2, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	496a      	ldr	r1, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba6:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	4965      	ldr	r1, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fcc9 	bl	800255c <RCC_SetFlashLatencyFromMSIRange>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e34d      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd4:	f000 fc36 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	495a      	ldr	r1, [pc, #360]	; (8001d50 <HAL_RCC_OscConfig+0x29c>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <HAL_RCC_OscConfig+0x2a0>)
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf4:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <HAL_RCC_OscConfig+0x2a4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fd91 	bl	8001720 <HAL_InitTick>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d052      	beq.n	8001cae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	e331      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d032      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c14:	4b4d      	ldr	r3, [pc, #308]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fdce 	bl	80017c0 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c28:	f7ff fdca 	bl	80017c0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e31a      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3a:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	493b      	ldr	r1, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c64:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	4936      	ldr	r1, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
 8001c78:	e01a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fd9b 	bl	80017c0 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fd97 	bl	80017c0 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e2e7      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x1da>
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d074      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x21a>
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d10e      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d064      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d160      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e2c4      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x24a>
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e01d      	b.n	8001d3a <HAL_RCC_OscConfig+0x286>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x26e>
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0x286>
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d01c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff fd3d 	bl	80017c0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d48:	e011      	b.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08003734 	.word	0x08003734
 8001d54:	20000004 	.word	0x20000004
 8001d58:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fd30 	bl	80017c0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e280      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4baf      	ldr	r3, [pc, #700]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2a8>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fd20 	bl	80017c0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fd1c 	bl	80017c0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e26c      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d96:	4ba5      	ldr	r3, [pc, #660]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2d0>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x310>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d116      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	4b99      	ldr	r3, [pc, #612]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x328>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e249      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b93      	ldr	r3, [pc, #588]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4990      	ldr	r1, [pc, #576]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	e040      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	4b8c      	ldr	r3, [pc, #560]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a8b      	ldr	r2, [pc, #556]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff fcdb 	bl	80017c0 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fcd7 	bl	80017c0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e227      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	497c      	ldr	r1, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b7a      	ldr	r3, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a79      	ldr	r2, [pc, #484]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fcb7 	bl	80017c0 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fcb3 	bl	80017c0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e203      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e68:	4b70      	ldr	r3, [pc, #448]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d03c      	beq.n	8001efa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e88:	4b68      	ldr	r3, [pc, #416]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	4a67      	ldr	r2, [pc, #412]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff fc92 	bl	80017c0 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fc8e 	bl	80017c0 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1de      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb2:	4b5e      	ldr	r3, [pc, #376]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ef      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3ec>
 8001ec0:	e01b      	b.n	8001efa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec8:	4a58      	ldr	r2, [pc, #352]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fc75 	bl	80017c0 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eda:	f7ff fc71 	bl	80017c0 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1c1      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eec:	4b4f      	ldr	r3, [pc, #316]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80a6 	beq.w	8002054 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f0c:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	4a43      	ldr	r2, [pc, #268]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	; 0x58
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCC_OscConfig+0x57c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d118      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x57c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a3a      	ldr	r2, [pc, #232]	; (8002030 <HAL_RCC_OscConfig+0x57c>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fc38 	bl	80017c0 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7ff fc34 	bl	80017c0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e184      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f66:	4b32      	ldr	r3, [pc, #200]	; (8002030 <HAL_RCC_OscConfig+0x57c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4d8>
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a2a      	ldr	r2, [pc, #168]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8a:	e024      	b.n	8001fd6 <HAL_RCC_OscConfig+0x522>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d110      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x502>
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a24      	ldr	r2, [pc, #144]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb4:	e00f      	b.n	8001fd6 <HAL_RCC_OscConfig+0x522>
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	4a17      	ldr	r2, [pc, #92]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fce:	f023 0304 	bic.w	r3, r3, #4
 8001fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7ff fbef 	bl	80017c0 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fbeb 	bl	80017c0 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e139      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0ed      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x532>
 800200a:	e01a      	b.n	8002042 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff fbd8 	bl	80017c0 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002012:	e00f      	b.n	8002034 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7ff fbd4 	bl	80017c0 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d906      	bls.n	8002034 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e122      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002034:	4b90      	ldr	r3, [pc, #576]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1e8      	bne.n	8002014 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002042:	7ffb      	ldrb	r3, [r7, #31]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b8b      	ldr	r3, [pc, #556]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	4a8a      	ldr	r2, [pc, #552]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800204e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8108 	beq.w	800226e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	2b02      	cmp	r3, #2
 8002064:	f040 80d0 	bne.w	8002208 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002068:	4b83      	ldr	r3, [pc, #524]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	429a      	cmp	r2, r3
 800207a:	d130      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	3b01      	subs	r3, #1
 8002088:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d127      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d11f      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020a8:	2a07      	cmp	r2, #7
 80020aa:	bf14      	ite	ne
 80020ac:	2201      	movne	r2, #1
 80020ae:	2200      	moveq	r2, #0
 80020b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	3b01      	subs	r3, #1
 80020c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d109      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	3b01      	subs	r3, #1
 80020d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d06e      	beq.n	80021bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d069      	beq.n	80021b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e4:	4b64      	ldr	r3, [pc, #400]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020f0:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b7      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002100:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5c      	ldr	r2, [pc, #368]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800210c:	f7ff fb58 	bl	80017c0 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff fb54 	bl	80017c0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0a4      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002132:	4b51      	ldr	r3, [pc, #324]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b51      	ldr	r3, [pc, #324]	; (800227c <HAL_RCC_OscConfig+0x7c8>)
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002142:	3a01      	subs	r2, #1
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800214c:	0212      	lsls	r2, r2, #8
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002154:	0852      	lsrs	r2, r2, #1
 8002156:	3a01      	subs	r2, #1
 8002158:	0552      	lsls	r2, r2, #21
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002160:	0852      	lsrs	r2, r2, #1
 8002162:	3a01      	subs	r2, #1
 8002164:	0652      	lsls	r2, r2, #25
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800216c:	0912      	lsrs	r2, r2, #4
 800216e:	0452      	lsls	r2, r2, #17
 8002170:	430a      	orrs	r2, r1
 8002172:	4941      	ldr	r1, [pc, #260]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002174:	4313      	orrs	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a3e      	ldr	r2, [pc, #248]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a3b      	ldr	r2, [pc, #236]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002190:	f7ff fb16 	bl	80017c0 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7ff fb12 	bl	80017c0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e062      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b6:	e05a      	b.n	800226e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e059      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d152      	bne.n	800226e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a27      	ldr	r2, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e0:	f7ff faee 	bl	80017c0 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff faea 	bl	80017c0 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e03a      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x734>
 8002206:	e032      	b.n	800226e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d02d      	beq.n	800226a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002218:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a13      	ldr	r2, [pc, #76]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800222c:	f023 0303 	bic.w	r3, r3, #3
 8002230:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002238:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7ff fabd 	bl	80017c0 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff fab9 	bl	80017c0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e009      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x796>
 8002268:	e001      	b.n	800226e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	f99d808c 	.word	0xf99d808c

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0c8      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d910      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b63      	ldr	r3, [pc, #396]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4961      	ldr	r1, [pc, #388]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0b0      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d04c      	beq.n	800236a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d8:	4b56      	ldr	r3, [pc, #344]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d121      	bne.n	8002328 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e09e      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f0:	4b50      	ldr	r3, [pc, #320]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d115      	bne.n	8002328 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e092      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e086      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002318:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e07e      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 0203 	bic.w	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	493f      	ldr	r1, [pc, #252]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233a:	f7ff fa41 	bl	80017c0 <HAL_GetTick>
 800233e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002340:	e00a      	b.n	8002358 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002342:	f7ff fa3d 	bl	80017c0 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e066      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002358:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 020c 	and.w	r2, r3, #12
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	429a      	cmp	r2, r3
 8002368:	d1eb      	bne.n	8002342 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002376:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	492c      	ldr	r1, [pc, #176]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d210      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4924      	ldr	r1, [pc, #144]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e036      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4918      	ldr	r1, [pc, #96]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4910      	ldr	r1, [pc, #64]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f6:	f000 f825 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490c      	ldr	r1, [pc, #48]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f980 	bl	8001720 <HAL_InitTick>
 8002420:	4603      	mov	r3, r0
 8002422:	72fb      	strb	r3, [r7, #11]

  return status;
 8002424:	7afb      	ldrb	r3, [r7, #11]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000
 8002434:	40021000 	.word	0x40021000
 8002438:	08003734 	.word	0x08003734
 800243c:	20000004 	.word	0x20000004
 8002440:	20000008 	.word	0x20000008

08002444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245c:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x34>
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d11e      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002478:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e005      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a0:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d102      	bne.n	80024c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e004      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d134      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0xa6>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d003      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0xac>
 80024e8:	e005      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ec:	617b      	str	r3, [r7, #20]
      break;
 80024ee:	e005      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024f2:	617b      	str	r3, [r7, #20]
      break;
 80024f4:	e002      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	617b      	str	r3, [r7, #20]
      break;
 80024fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	3301      	adds	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	fb02 f203 	mul.w	r2, r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	0e5b      	lsrs	r3, r3, #25
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	3301      	adds	r3, #1
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800253c:	69bb      	ldr	r3, [r7, #24]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	08003744 	.word	0x08003744
 8002554:	00f42400 	.word	0x00f42400
 8002558:	007a1200 	.word	0x007a1200

0800255c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002574:	f7ff fa3a 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 8002578:	6178      	str	r0, [r7, #20]
 800257a:	e014      	b.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002586:	6593      	str	r3, [r2, #88]	; 0x58
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002594:	f7ff fa2a 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 8002598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ac:	d10b      	bne.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d919      	bls.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2ba0      	cmp	r3, #160	; 0xa0
 80025b8:	d902      	bls.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ba:	2302      	movs	r3, #2
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	e013      	b.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c0:	2301      	movs	r3, #1
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	e010      	b.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d902      	bls.n	80025d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025cc:	2303      	movs	r3, #3
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	e00a      	b.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d102      	bne.n	80025de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d8:	2302      	movs	r3, #2
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	e004      	b.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b70      	cmp	r3, #112	; 0x70
 80025e2:	d101      	bne.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025e4:	2301      	movs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 0207 	bic.w	r2, r3, #7
 80025f0:	4909      	ldr	r1, [pc, #36]	; (8002618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025f8:	4b07      	ldr	r3, [pc, #28]	; (8002618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	429a      	cmp	r2, r3
 8002604:	d001      	beq.n	800260a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	40022000 	.word	0x40022000

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	4d0d      	ldr	r5, [pc, #52]	; (8002654 <__libc_init_array+0x38>)
 8002620:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <__libc_init_array+0x3c>)
 8002622:	1b64      	subs	r4, r4, r5
 8002624:	10a4      	asrs	r4, r4, #2
 8002626:	2600      	movs	r6, #0
 8002628:	42a6      	cmp	r6, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	4d0b      	ldr	r5, [pc, #44]	; (800265c <__libc_init_array+0x40>)
 800262e:	4c0c      	ldr	r4, [pc, #48]	; (8002660 <__libc_init_array+0x44>)
 8002630:	f001 f858 	bl	80036e4 <_init>
 8002634:	1b64      	subs	r4, r4, r5
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	2600      	movs	r6, #0
 800263a:	42a6      	cmp	r6, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f855 3b04 	ldr.w	r3, [r5], #4
 8002644:	4798      	blx	r3
 8002646:	3601      	adds	r6, #1
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f855 3b04 	ldr.w	r3, [r5], #4
 800264e:	4798      	blx	r3
 8002650:	3601      	adds	r6, #1
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	08003950 	.word	0x08003950
 8002658:	08003950 	.word	0x08003950
 800265c:	08003950 	.word	0x08003950
 8002660:	08003954 	.word	0x08003954

08002664 <memset>:
 8002664:	4402      	add	r2, r0
 8002666:	4603      	mov	r3, r0
 8002668:	4293      	cmp	r3, r2
 800266a:	d100      	bne.n	800266e <memset+0xa>
 800266c:	4770      	bx	lr
 800266e:	f803 1b01 	strb.w	r1, [r3], #1
 8002672:	e7f9      	b.n	8002668 <memset+0x4>
 8002674:	0000      	movs	r0, r0
	...

08002678 <sin>:
 8002678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800267a:	ec53 2b10 	vmov	r2, r3, d0
 800267e:	4826      	ldr	r0, [pc, #152]	; (8002718 <sin+0xa0>)
 8002680:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002684:	4281      	cmp	r1, r0
 8002686:	dc07      	bgt.n	8002698 <sin+0x20>
 8002688:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002710 <sin+0x98>
 800268c:	2000      	movs	r0, #0
 800268e:	f000 fe5b 	bl	8003348 <__kernel_sin>
 8002692:	ec51 0b10 	vmov	r0, r1, d0
 8002696:	e007      	b.n	80026a8 <sin+0x30>
 8002698:	4820      	ldr	r0, [pc, #128]	; (800271c <sin+0xa4>)
 800269a:	4281      	cmp	r1, r0
 800269c:	dd09      	ble.n	80026b2 <sin+0x3a>
 800269e:	ee10 0a10 	vmov	r0, s0
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7fd fd94 	bl	80001d0 <__aeabi_dsub>
 80026a8:	ec41 0b10 	vmov	d0, r0, r1
 80026ac:	b005      	add	sp, #20
 80026ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80026b2:	4668      	mov	r0, sp
 80026b4:	f000 f834 	bl	8002720 <__ieee754_rem_pio2>
 80026b8:	f000 0003 	and.w	r0, r0, #3
 80026bc:	2801      	cmp	r0, #1
 80026be:	d008      	beq.n	80026d2 <sin+0x5a>
 80026c0:	2802      	cmp	r0, #2
 80026c2:	d00d      	beq.n	80026e0 <sin+0x68>
 80026c4:	b9d0      	cbnz	r0, 80026fc <sin+0x84>
 80026c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80026ca:	ed9d 0b00 	vldr	d0, [sp]
 80026ce:	2001      	movs	r0, #1
 80026d0:	e7dd      	b.n	800268e <sin+0x16>
 80026d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80026d6:	ed9d 0b00 	vldr	d0, [sp]
 80026da:	f000 fa2d 	bl	8002b38 <__kernel_cos>
 80026de:	e7d8      	b.n	8002692 <sin+0x1a>
 80026e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80026e4:	ed9d 0b00 	vldr	d0, [sp]
 80026e8:	2001      	movs	r0, #1
 80026ea:	f000 fe2d 	bl	8003348 <__kernel_sin>
 80026ee:	ec53 2b10 	vmov	r2, r3, d0
 80026f2:	ee10 0a10 	vmov	r0, s0
 80026f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80026fa:	e7d5      	b.n	80026a8 <sin+0x30>
 80026fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002700:	ed9d 0b00 	vldr	d0, [sp]
 8002704:	f000 fa18 	bl	8002b38 <__kernel_cos>
 8002708:	e7f1      	b.n	80026ee <sin+0x76>
 800270a:	bf00      	nop
 800270c:	f3af 8000 	nop.w
	...
 8002718:	3fe921fb 	.word	0x3fe921fb
 800271c:	7fefffff 	.word	0x7fefffff

08002720 <__ieee754_rem_pio2>:
 8002720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002724:	ed2d 8b02 	vpush	{d8}
 8002728:	ec55 4b10 	vmov	r4, r5, d0
 800272c:	4bca      	ldr	r3, [pc, #808]	; (8002a58 <__ieee754_rem_pio2+0x338>)
 800272e:	b08b      	sub	sp, #44	; 0x2c
 8002730:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002734:	4598      	cmp	r8, r3
 8002736:	4682      	mov	sl, r0
 8002738:	9502      	str	r5, [sp, #8]
 800273a:	dc08      	bgt.n	800274e <__ieee754_rem_pio2+0x2e>
 800273c:	2200      	movs	r2, #0
 800273e:	2300      	movs	r3, #0
 8002740:	ed80 0b00 	vstr	d0, [r0]
 8002744:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8002748:	f04f 0b00 	mov.w	fp, #0
 800274c:	e028      	b.n	80027a0 <__ieee754_rem_pio2+0x80>
 800274e:	4bc3      	ldr	r3, [pc, #780]	; (8002a5c <__ieee754_rem_pio2+0x33c>)
 8002750:	4598      	cmp	r8, r3
 8002752:	dc78      	bgt.n	8002846 <__ieee754_rem_pio2+0x126>
 8002754:	9b02      	ldr	r3, [sp, #8]
 8002756:	4ec2      	ldr	r6, [pc, #776]	; (8002a60 <__ieee754_rem_pio2+0x340>)
 8002758:	2b00      	cmp	r3, #0
 800275a:	ee10 0a10 	vmov	r0, s0
 800275e:	a3b0      	add	r3, pc, #704	; (adr r3, 8002a20 <__ieee754_rem_pio2+0x300>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	4629      	mov	r1, r5
 8002766:	dd39      	ble.n	80027dc <__ieee754_rem_pio2+0xbc>
 8002768:	f7fd fd32 	bl	80001d0 <__aeabi_dsub>
 800276c:	45b0      	cmp	r8, r6
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	d01b      	beq.n	80027ac <__ieee754_rem_pio2+0x8c>
 8002774:	a3ac      	add	r3, pc, #688	; (adr r3, 8002a28 <__ieee754_rem_pio2+0x308>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	f7fd fd29 	bl	80001d0 <__aeabi_dsub>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	e9ca 2300 	strd	r2, r3, [sl]
 8002786:	4620      	mov	r0, r4
 8002788:	4629      	mov	r1, r5
 800278a:	f7fd fd21 	bl	80001d0 <__aeabi_dsub>
 800278e:	a3a6      	add	r3, pc, #664	; (adr r3, 8002a28 <__ieee754_rem_pio2+0x308>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd fd1c 	bl	80001d0 <__aeabi_dsub>
 8002798:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800279c:	f04f 0b01 	mov.w	fp, #1
 80027a0:	4658      	mov	r0, fp
 80027a2:	b00b      	add	sp, #44	; 0x2c
 80027a4:	ecbd 8b02 	vpop	{d8}
 80027a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8002a30 <__ieee754_rem_pio2+0x310>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd fd0d 	bl	80001d0 <__aeabi_dsub>
 80027b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8002a38 <__ieee754_rem_pio2+0x318>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	4604      	mov	r4, r0
 80027be:	460d      	mov	r5, r1
 80027c0:	f7fd fd06 	bl	80001d0 <__aeabi_dsub>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	e9ca 2300 	strd	r2, r3, [sl]
 80027cc:	4620      	mov	r0, r4
 80027ce:	4629      	mov	r1, r5
 80027d0:	f7fd fcfe 	bl	80001d0 <__aeabi_dsub>
 80027d4:	a398      	add	r3, pc, #608	; (adr r3, 8002a38 <__ieee754_rem_pio2+0x318>)
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	e7db      	b.n	8002794 <__ieee754_rem_pio2+0x74>
 80027dc:	f7fd fcfa 	bl	80001d4 <__adddf3>
 80027e0:	45b0      	cmp	r8, r6
 80027e2:	4604      	mov	r4, r0
 80027e4:	460d      	mov	r5, r1
 80027e6:	d016      	beq.n	8002816 <__ieee754_rem_pio2+0xf6>
 80027e8:	a38f      	add	r3, pc, #572	; (adr r3, 8002a28 <__ieee754_rem_pio2+0x308>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f7fd fcf1 	bl	80001d4 <__adddf3>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	e9ca 2300 	strd	r2, r3, [sl]
 80027fa:	4620      	mov	r0, r4
 80027fc:	4629      	mov	r1, r5
 80027fe:	f7fd fce7 	bl	80001d0 <__aeabi_dsub>
 8002802:	a389      	add	r3, pc, #548	; (adr r3, 8002a28 <__ieee754_rem_pio2+0x308>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f7fd fce4 	bl	80001d4 <__adddf3>
 800280c:	f04f 3bff 	mov.w	fp, #4294967295
 8002810:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002814:	e7c4      	b.n	80027a0 <__ieee754_rem_pio2+0x80>
 8002816:	a386      	add	r3, pc, #536	; (adr r3, 8002a30 <__ieee754_rem_pio2+0x310>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd fcda 	bl	80001d4 <__adddf3>
 8002820:	a385      	add	r3, pc, #532	; (adr r3, 8002a38 <__ieee754_rem_pio2+0x318>)
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	4604      	mov	r4, r0
 8002828:	460d      	mov	r5, r1
 800282a:	f7fd fcd3 	bl	80001d4 <__adddf3>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	e9ca 2300 	strd	r2, r3, [sl]
 8002836:	4620      	mov	r0, r4
 8002838:	4629      	mov	r1, r5
 800283a:	f7fd fcc9 	bl	80001d0 <__aeabi_dsub>
 800283e:	a37e      	add	r3, pc, #504	; (adr r3, 8002a38 <__ieee754_rem_pio2+0x318>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	e7e0      	b.n	8002808 <__ieee754_rem_pio2+0xe8>
 8002846:	4b87      	ldr	r3, [pc, #540]	; (8002a64 <__ieee754_rem_pio2+0x344>)
 8002848:	4598      	cmp	r8, r3
 800284a:	f300 80d9 	bgt.w	8002a00 <__ieee754_rem_pio2+0x2e0>
 800284e:	f000 fe39 	bl	80034c4 <fabs>
 8002852:	ec55 4b10 	vmov	r4, r5, d0
 8002856:	ee10 0a10 	vmov	r0, s0
 800285a:	a379      	add	r3, pc, #484	; (adr r3, 8002a40 <__ieee754_rem_pio2+0x320>)
 800285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002860:	4629      	mov	r1, r5
 8002862:	f7fd fe6d 	bl	8000540 <__aeabi_dmul>
 8002866:	4b80      	ldr	r3, [pc, #512]	; (8002a68 <__ieee754_rem_pio2+0x348>)
 8002868:	2200      	movs	r2, #0
 800286a:	f7fd fcb3 	bl	80001d4 <__adddf3>
 800286e:	f7fe f901 	bl	8000a74 <__aeabi_d2iz>
 8002872:	4683      	mov	fp, r0
 8002874:	f7fd fdfa 	bl	800046c <__aeabi_i2d>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	ec43 2b18 	vmov	d8, r2, r3
 8002880:	a367      	add	r3, pc, #412	; (adr r3, 8002a20 <__ieee754_rem_pio2+0x300>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f7fd fe5b 	bl	8000540 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4620      	mov	r0, r4
 8002890:	4629      	mov	r1, r5
 8002892:	f7fd fc9d 	bl	80001d0 <__aeabi_dsub>
 8002896:	a364      	add	r3, pc, #400	; (adr r3, 8002a28 <__ieee754_rem_pio2+0x308>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	4606      	mov	r6, r0
 800289e:	460f      	mov	r7, r1
 80028a0:	ec51 0b18 	vmov	r0, r1, d8
 80028a4:	f7fd fe4c 	bl	8000540 <__aeabi_dmul>
 80028a8:	f1bb 0f1f 	cmp.w	fp, #31
 80028ac:	4604      	mov	r4, r0
 80028ae:	460d      	mov	r5, r1
 80028b0:	dc0d      	bgt.n	80028ce <__ieee754_rem_pio2+0x1ae>
 80028b2:	4b6e      	ldr	r3, [pc, #440]	; (8002a6c <__ieee754_rem_pio2+0x34c>)
 80028b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	4543      	cmp	r3, r8
 80028be:	d006      	beq.n	80028ce <__ieee754_rem_pio2+0x1ae>
 80028c0:	4622      	mov	r2, r4
 80028c2:	462b      	mov	r3, r5
 80028c4:	4630      	mov	r0, r6
 80028c6:	4639      	mov	r1, r7
 80028c8:	f7fd fc82 	bl	80001d0 <__aeabi_dsub>
 80028cc:	e00f      	b.n	80028ee <__ieee754_rem_pio2+0x1ce>
 80028ce:	462b      	mov	r3, r5
 80028d0:	4622      	mov	r2, r4
 80028d2:	4630      	mov	r0, r6
 80028d4:	4639      	mov	r1, r7
 80028d6:	f7fd fc7b 	bl	80001d0 <__aeabi_dsub>
 80028da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80028de:	9303      	str	r3, [sp, #12]
 80028e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80028e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80028e8:	f1b8 0f10 	cmp.w	r8, #16
 80028ec:	dc02      	bgt.n	80028f4 <__ieee754_rem_pio2+0x1d4>
 80028ee:	e9ca 0100 	strd	r0, r1, [sl]
 80028f2:	e039      	b.n	8002968 <__ieee754_rem_pio2+0x248>
 80028f4:	a34e      	add	r3, pc, #312	; (adr r3, 8002a30 <__ieee754_rem_pio2+0x310>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	ec51 0b18 	vmov	r0, r1, d8
 80028fe:	f7fd fe1f 	bl	8000540 <__aeabi_dmul>
 8002902:	4604      	mov	r4, r0
 8002904:	460d      	mov	r5, r1
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4630      	mov	r0, r6
 800290c:	4639      	mov	r1, r7
 800290e:	f7fd fc5f 	bl	80001d0 <__aeabi_dsub>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4680      	mov	r8, r0
 8002918:	4689      	mov	r9, r1
 800291a:	4630      	mov	r0, r6
 800291c:	4639      	mov	r1, r7
 800291e:	f7fd fc57 	bl	80001d0 <__aeabi_dsub>
 8002922:	4622      	mov	r2, r4
 8002924:	462b      	mov	r3, r5
 8002926:	f7fd fc53 	bl	80001d0 <__aeabi_dsub>
 800292a:	a343      	add	r3, pc, #268	; (adr r3, 8002a38 <__ieee754_rem_pio2+0x318>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	4604      	mov	r4, r0
 8002932:	460d      	mov	r5, r1
 8002934:	ec51 0b18 	vmov	r0, r1, d8
 8002938:	f7fd fe02 	bl	8000540 <__aeabi_dmul>
 800293c:	4622      	mov	r2, r4
 800293e:	462b      	mov	r3, r5
 8002940:	f7fd fc46 	bl	80001d0 <__aeabi_dsub>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4604      	mov	r4, r0
 800294a:	460d      	mov	r5, r1
 800294c:	4640      	mov	r0, r8
 800294e:	4649      	mov	r1, r9
 8002950:	f7fd fc3e 	bl	80001d0 <__aeabi_dsub>
 8002954:	9a03      	ldr	r2, [sp, #12]
 8002956:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b31      	cmp	r3, #49	; 0x31
 800295e:	dc24      	bgt.n	80029aa <__ieee754_rem_pio2+0x28a>
 8002960:	e9ca 0100 	strd	r0, r1, [sl]
 8002964:	4646      	mov	r6, r8
 8002966:	464f      	mov	r7, r9
 8002968:	e9da 8900 	ldrd	r8, r9, [sl]
 800296c:	4630      	mov	r0, r6
 800296e:	4642      	mov	r2, r8
 8002970:	464b      	mov	r3, r9
 8002972:	4639      	mov	r1, r7
 8002974:	f7fd fc2c 	bl	80001d0 <__aeabi_dsub>
 8002978:	462b      	mov	r3, r5
 800297a:	4622      	mov	r2, r4
 800297c:	f7fd fc28 	bl	80001d0 <__aeabi_dsub>
 8002980:	9b02      	ldr	r3, [sp, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002988:	f6bf af0a 	bge.w	80027a0 <__ieee754_rem_pio2+0x80>
 800298c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002990:	f8ca 3004 	str.w	r3, [sl, #4]
 8002994:	f8ca 8000 	str.w	r8, [sl]
 8002998:	f8ca 0008 	str.w	r0, [sl, #8]
 800299c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80029a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80029a4:	f1cb 0b00 	rsb	fp, fp, #0
 80029a8:	e6fa      	b.n	80027a0 <__ieee754_rem_pio2+0x80>
 80029aa:	a327      	add	r3, pc, #156	; (adr r3, 8002a48 <__ieee754_rem_pio2+0x328>)
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	ec51 0b18 	vmov	r0, r1, d8
 80029b4:	f7fd fdc4 	bl	8000540 <__aeabi_dmul>
 80029b8:	4604      	mov	r4, r0
 80029ba:	460d      	mov	r5, r1
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4640      	mov	r0, r8
 80029c2:	4649      	mov	r1, r9
 80029c4:	f7fd fc04 	bl	80001d0 <__aeabi_dsub>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4606      	mov	r6, r0
 80029ce:	460f      	mov	r7, r1
 80029d0:	4640      	mov	r0, r8
 80029d2:	4649      	mov	r1, r9
 80029d4:	f7fd fbfc 	bl	80001d0 <__aeabi_dsub>
 80029d8:	4622      	mov	r2, r4
 80029da:	462b      	mov	r3, r5
 80029dc:	f7fd fbf8 	bl	80001d0 <__aeabi_dsub>
 80029e0:	a31b      	add	r3, pc, #108	; (adr r3, 8002a50 <__ieee754_rem_pio2+0x330>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	4604      	mov	r4, r0
 80029e8:	460d      	mov	r5, r1
 80029ea:	ec51 0b18 	vmov	r0, r1, d8
 80029ee:	f7fd fda7 	bl	8000540 <__aeabi_dmul>
 80029f2:	4622      	mov	r2, r4
 80029f4:	462b      	mov	r3, r5
 80029f6:	f7fd fbeb 	bl	80001d0 <__aeabi_dsub>
 80029fa:	4604      	mov	r4, r0
 80029fc:	460d      	mov	r5, r1
 80029fe:	e75f      	b.n	80028c0 <__ieee754_rem_pio2+0x1a0>
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <__ieee754_rem_pio2+0x350>)
 8002a02:	4598      	cmp	r8, r3
 8002a04:	dd36      	ble.n	8002a74 <__ieee754_rem_pio2+0x354>
 8002a06:	ee10 2a10 	vmov	r2, s0
 8002a0a:	462b      	mov	r3, r5
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	4629      	mov	r1, r5
 8002a10:	f7fd fbde 	bl	80001d0 <__aeabi_dsub>
 8002a14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002a18:	e9ca 0100 	strd	r0, r1, [sl]
 8002a1c:	e694      	b.n	8002748 <__ieee754_rem_pio2+0x28>
 8002a1e:	bf00      	nop
 8002a20:	54400000 	.word	0x54400000
 8002a24:	3ff921fb 	.word	0x3ff921fb
 8002a28:	1a626331 	.word	0x1a626331
 8002a2c:	3dd0b461 	.word	0x3dd0b461
 8002a30:	1a600000 	.word	0x1a600000
 8002a34:	3dd0b461 	.word	0x3dd0b461
 8002a38:	2e037073 	.word	0x2e037073
 8002a3c:	3ba3198a 	.word	0x3ba3198a
 8002a40:	6dc9c883 	.word	0x6dc9c883
 8002a44:	3fe45f30 	.word	0x3fe45f30
 8002a48:	2e000000 	.word	0x2e000000
 8002a4c:	3ba3198a 	.word	0x3ba3198a
 8002a50:	252049c1 	.word	0x252049c1
 8002a54:	397b839a 	.word	0x397b839a
 8002a58:	3fe921fb 	.word	0x3fe921fb
 8002a5c:	4002d97b 	.word	0x4002d97b
 8002a60:	3ff921fb 	.word	0x3ff921fb
 8002a64:	413921fb 	.word	0x413921fb
 8002a68:	3fe00000 	.word	0x3fe00000
 8002a6c:	08003774 	.word	0x08003774
 8002a70:	7fefffff 	.word	0x7fefffff
 8002a74:	ea4f 5428 	mov.w	r4, r8, asr #20
 8002a78:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8002a7c:	ee10 0a10 	vmov	r0, s0
 8002a80:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8002a84:	ee10 6a10 	vmov	r6, s0
 8002a88:	460f      	mov	r7, r1
 8002a8a:	f7fd fff3 	bl	8000a74 <__aeabi_d2iz>
 8002a8e:	f7fd fced 	bl	800046c <__aeabi_i2d>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4630      	mov	r0, r6
 8002a98:	4639      	mov	r1, r7
 8002a9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a9e:	f7fd fb97 	bl	80001d0 <__aeabi_dsub>
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <__ieee754_rem_pio2+0x40c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f7fd fd4b 	bl	8000540 <__aeabi_dmul>
 8002aaa:	460f      	mov	r7, r1
 8002aac:	4606      	mov	r6, r0
 8002aae:	f7fd ffe1 	bl	8000a74 <__aeabi_d2iz>
 8002ab2:	f7fd fcdb 	bl	800046c <__aeabi_i2d>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4630      	mov	r0, r6
 8002abc:	4639      	mov	r1, r7
 8002abe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002ac2:	f7fd fb85 	bl	80001d0 <__aeabi_dsub>
 8002ac6:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <__ieee754_rem_pio2+0x40c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f7fd fd39 	bl	8000540 <__aeabi_dmul>
 8002ace:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002ad2:	ad04      	add	r5, sp, #16
 8002ad4:	f04f 0803 	mov.w	r8, #3
 8002ad8:	46a9      	mov	r9, r5
 8002ada:	2600      	movs	r6, #0
 8002adc:	2700      	movs	r7, #0
 8002ade:	4632      	mov	r2, r6
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8002ae6:	46c3      	mov	fp, r8
 8002ae8:	3d08      	subs	r5, #8
 8002aea:	f108 38ff 	add.w	r8, r8, #4294967295
 8002aee:	f7fd ff8f 	bl	8000a10 <__aeabi_dcmpeq>
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d1f3      	bne.n	8002ade <__ieee754_rem_pio2+0x3be>
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <__ieee754_rem_pio2+0x410>)
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	2302      	movs	r3, #2
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4622      	mov	r2, r4
 8002b00:	465b      	mov	r3, fp
 8002b02:	4651      	mov	r1, sl
 8002b04:	4648      	mov	r0, r9
 8002b06:	f000 f8df 	bl	8002cc8 <__kernel_rem_pio2>
 8002b0a:	9b02      	ldr	r3, [sp, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	4683      	mov	fp, r0
 8002b10:	f6bf ae46 	bge.w	80027a0 <__ieee754_rem_pio2+0x80>
 8002b14:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002b18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002b1c:	f8ca 3004 	str.w	r3, [sl, #4]
 8002b20:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002b24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002b28:	e73a      	b.n	80029a0 <__ieee754_rem_pio2+0x280>
 8002b2a:	bf00      	nop
 8002b2c:	41700000 	.word	0x41700000
 8002b30:	080037f4 	.word	0x080037f4
 8002b34:	00000000 	.word	0x00000000

08002b38 <__kernel_cos>:
 8002b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b3c:	ec57 6b10 	vmov	r6, r7, d0
 8002b40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8002b44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8002b48:	ed8d 1b00 	vstr	d1, [sp]
 8002b4c:	da07      	bge.n	8002b5e <__kernel_cos+0x26>
 8002b4e:	ee10 0a10 	vmov	r0, s0
 8002b52:	4639      	mov	r1, r7
 8002b54:	f7fd ff8e 	bl	8000a74 <__aeabi_d2iz>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	f000 8088 	beq.w	8002c6e <__kernel_cos+0x136>
 8002b5e:	4632      	mov	r2, r6
 8002b60:	463b      	mov	r3, r7
 8002b62:	4630      	mov	r0, r6
 8002b64:	4639      	mov	r1, r7
 8002b66:	f7fd fceb 	bl	8000540 <__aeabi_dmul>
 8002b6a:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <__kernel_cos+0x178>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
 8002b72:	f7fd fce5 	bl	8000540 <__aeabi_dmul>
 8002b76:	a340      	add	r3, pc, #256	; (adr r3, 8002c78 <__kernel_cos+0x140>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	4682      	mov	sl, r0
 8002b7e:	468b      	mov	fp, r1
 8002b80:	4620      	mov	r0, r4
 8002b82:	4629      	mov	r1, r5
 8002b84:	f7fd fcdc 	bl	8000540 <__aeabi_dmul>
 8002b88:	a33d      	add	r3, pc, #244	; (adr r3, 8002c80 <__kernel_cos+0x148>)
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	f7fd fb21 	bl	80001d4 <__adddf3>
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	f7fd fcd3 	bl	8000540 <__aeabi_dmul>
 8002b9a:	a33b      	add	r3, pc, #236	; (adr r3, 8002c88 <__kernel_cos+0x150>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f7fd fb16 	bl	80001d0 <__aeabi_dsub>
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	462b      	mov	r3, r5
 8002ba8:	f7fd fcca 	bl	8000540 <__aeabi_dmul>
 8002bac:	a338      	add	r3, pc, #224	; (adr r3, 8002c90 <__kernel_cos+0x158>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fb0f 	bl	80001d4 <__adddf3>
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	462b      	mov	r3, r5
 8002bba:	f7fd fcc1 	bl	8000540 <__aeabi_dmul>
 8002bbe:	a336      	add	r3, pc, #216	; (adr r3, 8002c98 <__kernel_cos+0x160>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fb04 	bl	80001d0 <__aeabi_dsub>
 8002bc8:	4622      	mov	r2, r4
 8002bca:	462b      	mov	r3, r5
 8002bcc:	f7fd fcb8 	bl	8000540 <__aeabi_dmul>
 8002bd0:	a333      	add	r3, pc, #204	; (adr r3, 8002ca0 <__kernel_cos+0x168>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	f7fd fafd 	bl	80001d4 <__adddf3>
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	f7fd fcaf 	bl	8000540 <__aeabi_dmul>
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	f7fd fcab 	bl	8000540 <__aeabi_dmul>
 8002bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002bee:	4604      	mov	r4, r0
 8002bf0:	460d      	mov	r5, r1
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	4639      	mov	r1, r7
 8002bf6:	f7fd fca3 	bl	8000540 <__aeabi_dmul>
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4629      	mov	r1, r5
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7fd fae5 	bl	80001d0 <__aeabi_dsub>
 8002c06:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <__kernel_cos+0x17c>)
 8002c08:	4598      	cmp	r8, r3
 8002c0a:	4606      	mov	r6, r0
 8002c0c:	460f      	mov	r7, r1
 8002c0e:	dc10      	bgt.n	8002c32 <__kernel_cos+0xfa>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4650      	mov	r0, sl
 8002c16:	4659      	mov	r1, fp
 8002c18:	f7fd fada 	bl	80001d0 <__aeabi_dsub>
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4926      	ldr	r1, [pc, #152]	; (8002cb8 <__kernel_cos+0x180>)
 8002c20:	4602      	mov	r2, r0
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fd fad4 	bl	80001d0 <__aeabi_dsub>
 8002c28:	ec41 0b10 	vmov	d0, r0, r1
 8002c2c:	b003      	add	sp, #12
 8002c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <__kernel_cos+0x184>)
 8002c34:	4920      	ldr	r1, [pc, #128]	; (8002cb8 <__kernel_cos+0x180>)
 8002c36:	4598      	cmp	r8, r3
 8002c38:	bfcc      	ite	gt
 8002c3a:	4d21      	ldrgt	r5, [pc, #132]	; (8002cc0 <__kernel_cos+0x188>)
 8002c3c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8002c40:	2400      	movs	r4, #0
 8002c42:	4622      	mov	r2, r4
 8002c44:	462b      	mov	r3, r5
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7fd fac2 	bl	80001d0 <__aeabi_dsub>
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	4680      	mov	r8, r0
 8002c50:	4689      	mov	r9, r1
 8002c52:	462b      	mov	r3, r5
 8002c54:	4650      	mov	r0, sl
 8002c56:	4659      	mov	r1, fp
 8002c58:	f7fd faba 	bl	80001d0 <__aeabi_dsub>
 8002c5c:	4632      	mov	r2, r6
 8002c5e:	463b      	mov	r3, r7
 8002c60:	f7fd fab6 	bl	80001d0 <__aeabi_dsub>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4640      	mov	r0, r8
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	e7da      	b.n	8002c24 <__kernel_cos+0xec>
 8002c6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002ca8 <__kernel_cos+0x170>
 8002c72:	e7db      	b.n	8002c2c <__kernel_cos+0xf4>
 8002c74:	f3af 8000 	nop.w
 8002c78:	be8838d4 	.word	0xbe8838d4
 8002c7c:	bda8fae9 	.word	0xbda8fae9
 8002c80:	bdb4b1c4 	.word	0xbdb4b1c4
 8002c84:	3e21ee9e 	.word	0x3e21ee9e
 8002c88:	809c52ad 	.word	0x809c52ad
 8002c8c:	3e927e4f 	.word	0x3e927e4f
 8002c90:	19cb1590 	.word	0x19cb1590
 8002c94:	3efa01a0 	.word	0x3efa01a0
 8002c98:	16c15177 	.word	0x16c15177
 8002c9c:	3f56c16c 	.word	0x3f56c16c
 8002ca0:	5555554c 	.word	0x5555554c
 8002ca4:	3fa55555 	.word	0x3fa55555
 8002ca8:	00000000 	.word	0x00000000
 8002cac:	3ff00000 	.word	0x3ff00000
 8002cb0:	3fe00000 	.word	0x3fe00000
 8002cb4:	3fd33332 	.word	0x3fd33332
 8002cb8:	3ff00000 	.word	0x3ff00000
 8002cbc:	3fe90000 	.word	0x3fe90000
 8002cc0:	3fd20000 	.word	0x3fd20000
 8002cc4:	00000000 	.word	0x00000000

08002cc8 <__kernel_rem_pio2>:
 8002cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ccc:	ed2d 8b02 	vpush	{d8}
 8002cd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8002cd4:	f112 0f14 	cmn.w	r2, #20
 8002cd8:	9308      	str	r3, [sp, #32]
 8002cda:	9101      	str	r1, [sp, #4]
 8002cdc:	4bc6      	ldr	r3, [pc, #792]	; (8002ff8 <__kernel_rem_pio2+0x330>)
 8002cde:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8002ce0:	9009      	str	r0, [sp, #36]	; 0x24
 8002ce2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ce6:	9304      	str	r3, [sp, #16]
 8002ce8:	9b08      	ldr	r3, [sp, #32]
 8002cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8002cee:	bfa8      	it	ge
 8002cf0:	1ed4      	subge	r4, r2, #3
 8002cf2:	9306      	str	r3, [sp, #24]
 8002cf4:	bfb2      	itee	lt
 8002cf6:	2400      	movlt	r4, #0
 8002cf8:	2318      	movge	r3, #24
 8002cfa:	fb94 f4f3 	sdivge	r4, r4, r3
 8002cfe:	f06f 0317 	mvn.w	r3, #23
 8002d02:	fb04 3303 	mla	r3, r4, r3, r3
 8002d06:	eb03 0a02 	add.w	sl, r3, r2
 8002d0a:	9b04      	ldr	r3, [sp, #16]
 8002d0c:	9a06      	ldr	r2, [sp, #24]
 8002d0e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8002fe8 <__kernel_rem_pio2+0x320>
 8002d12:	eb03 0802 	add.w	r8, r3, r2
 8002d16:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002d18:	1aa7      	subs	r7, r4, r2
 8002d1a:	ae20      	add	r6, sp, #128	; 0x80
 8002d1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002d20:	2500      	movs	r5, #0
 8002d22:	4545      	cmp	r5, r8
 8002d24:	dd18      	ble.n	8002d58 <__kernel_rem_pio2+0x90>
 8002d26:	9b08      	ldr	r3, [sp, #32]
 8002d28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002d2c:	aa20      	add	r2, sp, #128	; 0x80
 8002d2e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8002fe8 <__kernel_rem_pio2+0x320>
 8002d32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8002d36:	f1c3 0301 	rsb	r3, r3, #1
 8002d3a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8002d3e:	9307      	str	r3, [sp, #28]
 8002d40:	9b07      	ldr	r3, [sp, #28]
 8002d42:	9a04      	ldr	r2, [sp, #16]
 8002d44:	4443      	add	r3, r8
 8002d46:	429a      	cmp	r2, r3
 8002d48:	db2f      	blt.n	8002daa <__kernel_rem_pio2+0xe2>
 8002d4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8002d4e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8002d52:	462f      	mov	r7, r5
 8002d54:	2600      	movs	r6, #0
 8002d56:	e01b      	b.n	8002d90 <__kernel_rem_pio2+0xc8>
 8002d58:	42ef      	cmn	r7, r5
 8002d5a:	d407      	bmi.n	8002d6c <__kernel_rem_pio2+0xa4>
 8002d5c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002d60:	f7fd fb84 	bl	800046c <__aeabi_i2d>
 8002d64:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002d68:	3501      	adds	r5, #1
 8002d6a:	e7da      	b.n	8002d22 <__kernel_rem_pio2+0x5a>
 8002d6c:	ec51 0b18 	vmov	r0, r1, d8
 8002d70:	e7f8      	b.n	8002d64 <__kernel_rem_pio2+0x9c>
 8002d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d76:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8002d7a:	f7fd fbe1 	bl	8000540 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d86:	f7fd fa25 	bl	80001d4 <__adddf3>
 8002d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d8e:	3601      	adds	r6, #1
 8002d90:	9b06      	ldr	r3, [sp, #24]
 8002d92:	429e      	cmp	r6, r3
 8002d94:	f1a7 0708 	sub.w	r7, r7, #8
 8002d98:	ddeb      	ble.n	8002d72 <__kernel_rem_pio2+0xaa>
 8002d9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002d9e:	3508      	adds	r5, #8
 8002da0:	ecab 7b02 	vstmia	fp!, {d7}
 8002da4:	f108 0801 	add.w	r8, r8, #1
 8002da8:	e7ca      	b.n	8002d40 <__kernel_rem_pio2+0x78>
 8002daa:	9b04      	ldr	r3, [sp, #16]
 8002dac:	aa0c      	add	r2, sp, #48	; 0x30
 8002dae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8002db4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002db6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002dba:	9c04      	ldr	r4, [sp, #16]
 8002dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8002dbe:	ab98      	add	r3, sp, #608	; 0x260
 8002dc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002dc4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8002dc8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8002dcc:	f8cd b008 	str.w	fp, [sp, #8]
 8002dd0:	4625      	mov	r5, r4
 8002dd2:	2d00      	cmp	r5, #0
 8002dd4:	dc78      	bgt.n	8002ec8 <__kernel_rem_pio2+0x200>
 8002dd6:	ec47 6b10 	vmov	d0, r6, r7
 8002dda:	4650      	mov	r0, sl
 8002ddc:	f000 fbfc 	bl	80035d8 <scalbn>
 8002de0:	ec57 6b10 	vmov	r6, r7, d0
 8002de4:	2200      	movs	r2, #0
 8002de6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002dea:	ee10 0a10 	vmov	r0, s0
 8002dee:	4639      	mov	r1, r7
 8002df0:	f7fd fba6 	bl	8000540 <__aeabi_dmul>
 8002df4:	ec41 0b10 	vmov	d0, r0, r1
 8002df8:	f000 fb6e 	bl	80034d8 <floor>
 8002dfc:	4b7f      	ldr	r3, [pc, #508]	; (8002ffc <__kernel_rem_pio2+0x334>)
 8002dfe:	ec51 0b10 	vmov	r0, r1, d0
 8002e02:	2200      	movs	r2, #0
 8002e04:	f7fd fb9c 	bl	8000540 <__aeabi_dmul>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	4639      	mov	r1, r7
 8002e10:	f7fd f9de 	bl	80001d0 <__aeabi_dsub>
 8002e14:	460f      	mov	r7, r1
 8002e16:	4606      	mov	r6, r0
 8002e18:	f7fd fe2c 	bl	8000a74 <__aeabi_d2iz>
 8002e1c:	9007      	str	r0, [sp, #28]
 8002e1e:	f7fd fb25 	bl	800046c <__aeabi_i2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4630      	mov	r0, r6
 8002e28:	4639      	mov	r1, r7
 8002e2a:	f7fd f9d1 	bl	80001d0 <__aeabi_dsub>
 8002e2e:	f1ba 0f00 	cmp.w	sl, #0
 8002e32:	4606      	mov	r6, r0
 8002e34:	460f      	mov	r7, r1
 8002e36:	dd70      	ble.n	8002f1a <__kernel_rem_pio2+0x252>
 8002e38:	1e62      	subs	r2, r4, #1
 8002e3a:	ab0c      	add	r3, sp, #48	; 0x30
 8002e3c:	9d07      	ldr	r5, [sp, #28]
 8002e3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002e42:	f1ca 0118 	rsb	r1, sl, #24
 8002e46:	fa40 f301 	asr.w	r3, r0, r1
 8002e4a:	441d      	add	r5, r3
 8002e4c:	408b      	lsls	r3, r1
 8002e4e:	1ac0      	subs	r0, r0, r3
 8002e50:	ab0c      	add	r3, sp, #48	; 0x30
 8002e52:	9507      	str	r5, [sp, #28]
 8002e54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002e58:	f1ca 0317 	rsb	r3, sl, #23
 8002e5c:	fa40 f303 	asr.w	r3, r0, r3
 8002e60:	9302      	str	r3, [sp, #8]
 8002e62:	9b02      	ldr	r3, [sp, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dd66      	ble.n	8002f36 <__kernel_rem_pio2+0x26e>
 8002e68:	9b07      	ldr	r3, [sp, #28]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	9307      	str	r3, [sp, #28]
 8002e70:	4615      	mov	r5, r2
 8002e72:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002e76:	4294      	cmp	r4, r2
 8002e78:	f300 8099 	bgt.w	8002fae <__kernel_rem_pio2+0x2e6>
 8002e7c:	f1ba 0f00 	cmp.w	sl, #0
 8002e80:	dd07      	ble.n	8002e92 <__kernel_rem_pio2+0x1ca>
 8002e82:	f1ba 0f01 	cmp.w	sl, #1
 8002e86:	f000 80a5 	beq.w	8002fd4 <__kernel_rem_pio2+0x30c>
 8002e8a:	f1ba 0f02 	cmp.w	sl, #2
 8002e8e:	f000 80c1 	beq.w	8003014 <__kernel_rem_pio2+0x34c>
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d14e      	bne.n	8002f36 <__kernel_rem_pio2+0x26e>
 8002e98:	4632      	mov	r2, r6
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	4958      	ldr	r1, [pc, #352]	; (8003000 <__kernel_rem_pio2+0x338>)
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd f996 	bl	80001d0 <__aeabi_dsub>
 8002ea4:	4606      	mov	r6, r0
 8002ea6:	460f      	mov	r7, r1
 8002ea8:	2d00      	cmp	r5, #0
 8002eaa:	d044      	beq.n	8002f36 <__kernel_rem_pio2+0x26e>
 8002eac:	4650      	mov	r0, sl
 8002eae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8002ff0 <__kernel_rem_pio2+0x328>
 8002eb2:	f000 fb91 	bl	80035d8 <scalbn>
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	4639      	mov	r1, r7
 8002eba:	ec53 2b10 	vmov	r2, r3, d0
 8002ebe:	f7fd f987 	bl	80001d0 <__aeabi_dsub>
 8002ec2:	4606      	mov	r6, r0
 8002ec4:	460f      	mov	r7, r1
 8002ec6:	e036      	b.n	8002f36 <__kernel_rem_pio2+0x26e>
 8002ec8:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <__kernel_rem_pio2+0x33c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4630      	mov	r0, r6
 8002ece:	4639      	mov	r1, r7
 8002ed0:	f7fd fb36 	bl	8000540 <__aeabi_dmul>
 8002ed4:	f7fd fdce 	bl	8000a74 <__aeabi_d2iz>
 8002ed8:	f7fd fac8 	bl	800046c <__aeabi_i2d>
 8002edc:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <__kernel_rem_pio2+0x340>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4680      	mov	r8, r0
 8002ee2:	4689      	mov	r9, r1
 8002ee4:	f7fd fb2c 	bl	8000540 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4630      	mov	r0, r6
 8002eee:	4639      	mov	r1, r7
 8002ef0:	f7fd f96e 	bl	80001d0 <__aeabi_dsub>
 8002ef4:	f7fd fdbe 	bl	8000a74 <__aeabi_d2iz>
 8002ef8:	9b02      	ldr	r3, [sp, #8]
 8002efa:	f843 0b04 	str.w	r0, [r3], #4
 8002efe:	3d01      	subs	r5, #1
 8002f00:	9302      	str	r3, [sp, #8]
 8002f02:	ab70      	add	r3, sp, #448	; 0x1c0
 8002f04:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	4640      	mov	r0, r8
 8002f0e:	4649      	mov	r1, r9
 8002f10:	f7fd f960 	bl	80001d4 <__adddf3>
 8002f14:	4606      	mov	r6, r0
 8002f16:	460f      	mov	r7, r1
 8002f18:	e75b      	b.n	8002dd2 <__kernel_rem_pio2+0x10a>
 8002f1a:	d105      	bne.n	8002f28 <__kernel_rem_pio2+0x260>
 8002f1c:	1e63      	subs	r3, r4, #1
 8002f1e:	aa0c      	add	r2, sp, #48	; 0x30
 8002f20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f24:	15c3      	asrs	r3, r0, #23
 8002f26:	e79b      	b.n	8002e60 <__kernel_rem_pio2+0x198>
 8002f28:	4b38      	ldr	r3, [pc, #224]	; (800300c <__kernel_rem_pio2+0x344>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f7fd fd8e 	bl	8000a4c <__aeabi_dcmpge>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d139      	bne.n	8002fa8 <__kernel_rem_pio2+0x2e0>
 8002f34:	9002      	str	r0, [sp, #8]
 8002f36:	2200      	movs	r2, #0
 8002f38:	2300      	movs	r3, #0
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	4639      	mov	r1, r7
 8002f3e:	f7fd fd67 	bl	8000a10 <__aeabi_dcmpeq>
 8002f42:	2800      	cmp	r0, #0
 8002f44:	f000 80b4 	beq.w	80030b0 <__kernel_rem_pio2+0x3e8>
 8002f48:	f104 3bff 	add.w	fp, r4, #4294967295
 8002f4c:	465b      	mov	r3, fp
 8002f4e:	2200      	movs	r2, #0
 8002f50:	9904      	ldr	r1, [sp, #16]
 8002f52:	428b      	cmp	r3, r1
 8002f54:	da65      	bge.n	8003022 <__kernel_rem_pio2+0x35a>
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d07b      	beq.n	8003052 <__kernel_rem_pio2+0x38a>
 8002f5a:	ab0c      	add	r3, sp, #48	; 0x30
 8002f5c:	f1aa 0a18 	sub.w	sl, sl, #24
 8002f60:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a0 	beq.w	80030aa <__kernel_rem_pio2+0x3e2>
 8002f6a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8002ff0 <__kernel_rem_pio2+0x328>
 8002f6e:	4650      	mov	r0, sl
 8002f70:	f000 fb32 	bl	80035d8 <scalbn>
 8002f74:	4f23      	ldr	r7, [pc, #140]	; (8003004 <__kernel_rem_pio2+0x33c>)
 8002f76:	ec55 4b10 	vmov	r4, r5, d0
 8002f7a:	46d8      	mov	r8, fp
 8002f7c:	2600      	movs	r6, #0
 8002f7e:	f1b8 0f00 	cmp.w	r8, #0
 8002f82:	f280 80cf 	bge.w	8003124 <__kernel_rem_pio2+0x45c>
 8002f86:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8002fe8 <__kernel_rem_pio2+0x320>
 8002f8a:	465f      	mov	r7, fp
 8002f8c:	f04f 0800 	mov.w	r8, #0
 8002f90:	2f00      	cmp	r7, #0
 8002f92:	f2c0 80fd 	blt.w	8003190 <__kernel_rem_pio2+0x4c8>
 8002f96:	ab70      	add	r3, sp, #448	; 0x1c0
 8002f98:	f8df a074 	ldr.w	sl, [pc, #116]	; 8003010 <__kernel_rem_pio2+0x348>
 8002f9c:	ec55 4b18 	vmov	r4, r5, d8
 8002fa0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	e0e5      	b.n	8003174 <__kernel_rem_pio2+0x4ac>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	9302      	str	r3, [sp, #8]
 8002fac:	e75c      	b.n	8002e68 <__kernel_rem_pio2+0x1a0>
 8002fae:	f8db 3000 	ldr.w	r3, [fp]
 8002fb2:	b955      	cbnz	r5, 8002fca <__kernel_rem_pio2+0x302>
 8002fb4:	b123      	cbz	r3, 8002fc0 <__kernel_rem_pio2+0x2f8>
 8002fb6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002fba:	f8cb 3000 	str.w	r3, [fp]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	3201      	adds	r2, #1
 8002fc2:	f10b 0b04 	add.w	fp, fp, #4
 8002fc6:	461d      	mov	r5, r3
 8002fc8:	e755      	b.n	8002e76 <__kernel_rem_pio2+0x1ae>
 8002fca:	1acb      	subs	r3, r1, r3
 8002fcc:	f8cb 3000 	str.w	r3, [fp]
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	e7f5      	b.n	8002fc0 <__kernel_rem_pio2+0x2f8>
 8002fd4:	1e62      	subs	r2, r4, #1
 8002fd6:	ab0c      	add	r3, sp, #48	; 0x30
 8002fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fdc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002fe0:	a90c      	add	r1, sp, #48	; 0x30
 8002fe2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002fe6:	e754      	b.n	8002e92 <__kernel_rem_pio2+0x1ca>
	...
 8002ff4:	3ff00000 	.word	0x3ff00000
 8002ff8:	08003940 	.word	0x08003940
 8002ffc:	40200000 	.word	0x40200000
 8003000:	3ff00000 	.word	0x3ff00000
 8003004:	3e700000 	.word	0x3e700000
 8003008:	41700000 	.word	0x41700000
 800300c:	3fe00000 	.word	0x3fe00000
 8003010:	08003900 	.word	0x08003900
 8003014:	1e62      	subs	r2, r4, #1
 8003016:	ab0c      	add	r3, sp, #48	; 0x30
 8003018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003020:	e7de      	b.n	8002fe0 <__kernel_rem_pio2+0x318>
 8003022:	a90c      	add	r1, sp, #48	; 0x30
 8003024:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003028:	3b01      	subs	r3, #1
 800302a:	430a      	orrs	r2, r1
 800302c:	e790      	b.n	8002f50 <__kernel_rem_pio2+0x288>
 800302e:	3301      	adds	r3, #1
 8003030:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003034:	2900      	cmp	r1, #0
 8003036:	d0fa      	beq.n	800302e <__kernel_rem_pio2+0x366>
 8003038:	9a08      	ldr	r2, [sp, #32]
 800303a:	18e3      	adds	r3, r4, r3
 800303c:	18a6      	adds	r6, r4, r2
 800303e:	aa20      	add	r2, sp, #128	; 0x80
 8003040:	1c65      	adds	r5, r4, #1
 8003042:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003046:	9302      	str	r3, [sp, #8]
 8003048:	9b02      	ldr	r3, [sp, #8]
 800304a:	42ab      	cmp	r3, r5
 800304c:	da04      	bge.n	8003058 <__kernel_rem_pio2+0x390>
 800304e:	461c      	mov	r4, r3
 8003050:	e6b5      	b.n	8002dbe <__kernel_rem_pio2+0xf6>
 8003052:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003054:	2301      	movs	r3, #1
 8003056:	e7eb      	b.n	8003030 <__kernel_rem_pio2+0x368>
 8003058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800305a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800305e:	f7fd fa05 	bl	800046c <__aeabi_i2d>
 8003062:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003068:	46b3      	mov	fp, r6
 800306a:	461c      	mov	r4, r3
 800306c:	2700      	movs	r7, #0
 800306e:	f04f 0800 	mov.w	r8, #0
 8003072:	f04f 0900 	mov.w	r9, #0
 8003076:	9b06      	ldr	r3, [sp, #24]
 8003078:	429f      	cmp	r7, r3
 800307a:	dd06      	ble.n	800308a <__kernel_rem_pio2+0x3c2>
 800307c:	ab70      	add	r3, sp, #448	; 0x1c0
 800307e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003082:	e9c3 8900 	strd	r8, r9, [r3]
 8003086:	3501      	adds	r5, #1
 8003088:	e7de      	b.n	8003048 <__kernel_rem_pio2+0x380>
 800308a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800308e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003092:	f7fd fa55 	bl	8000540 <__aeabi_dmul>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4640      	mov	r0, r8
 800309c:	4649      	mov	r1, r9
 800309e:	f7fd f899 	bl	80001d4 <__adddf3>
 80030a2:	3701      	adds	r7, #1
 80030a4:	4680      	mov	r8, r0
 80030a6:	4689      	mov	r9, r1
 80030a8:	e7e5      	b.n	8003076 <__kernel_rem_pio2+0x3ae>
 80030aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80030ae:	e754      	b.n	8002f5a <__kernel_rem_pio2+0x292>
 80030b0:	ec47 6b10 	vmov	d0, r6, r7
 80030b4:	f1ca 0000 	rsb	r0, sl, #0
 80030b8:	f000 fa8e 	bl	80035d8 <scalbn>
 80030bc:	ec57 6b10 	vmov	r6, r7, d0
 80030c0:	4b9f      	ldr	r3, [pc, #636]	; (8003340 <__kernel_rem_pio2+0x678>)
 80030c2:	ee10 0a10 	vmov	r0, s0
 80030c6:	2200      	movs	r2, #0
 80030c8:	4639      	mov	r1, r7
 80030ca:	f7fd fcbf 	bl	8000a4c <__aeabi_dcmpge>
 80030ce:	b300      	cbz	r0, 8003112 <__kernel_rem_pio2+0x44a>
 80030d0:	4b9c      	ldr	r3, [pc, #624]	; (8003344 <__kernel_rem_pio2+0x67c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	4630      	mov	r0, r6
 80030d6:	4639      	mov	r1, r7
 80030d8:	f7fd fa32 	bl	8000540 <__aeabi_dmul>
 80030dc:	f7fd fcca 	bl	8000a74 <__aeabi_d2iz>
 80030e0:	4605      	mov	r5, r0
 80030e2:	f7fd f9c3 	bl	800046c <__aeabi_i2d>
 80030e6:	4b96      	ldr	r3, [pc, #600]	; (8003340 <__kernel_rem_pio2+0x678>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	f7fd fa29 	bl	8000540 <__aeabi_dmul>
 80030ee:	460b      	mov	r3, r1
 80030f0:	4602      	mov	r2, r0
 80030f2:	4639      	mov	r1, r7
 80030f4:	4630      	mov	r0, r6
 80030f6:	f7fd f86b 	bl	80001d0 <__aeabi_dsub>
 80030fa:	f7fd fcbb 	bl	8000a74 <__aeabi_d2iz>
 80030fe:	f104 0b01 	add.w	fp, r4, #1
 8003102:	ab0c      	add	r3, sp, #48	; 0x30
 8003104:	f10a 0a18 	add.w	sl, sl, #24
 8003108:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800310c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8003110:	e72b      	b.n	8002f6a <__kernel_rem_pio2+0x2a2>
 8003112:	4630      	mov	r0, r6
 8003114:	4639      	mov	r1, r7
 8003116:	f7fd fcad 	bl	8000a74 <__aeabi_d2iz>
 800311a:	ab0c      	add	r3, sp, #48	; 0x30
 800311c:	46a3      	mov	fp, r4
 800311e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003122:	e722      	b.n	8002f6a <__kernel_rem_pio2+0x2a2>
 8003124:	ab70      	add	r3, sp, #448	; 0x1c0
 8003126:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800312a:	ab0c      	add	r3, sp, #48	; 0x30
 800312c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003130:	f7fd f99c 	bl	800046c <__aeabi_i2d>
 8003134:	4622      	mov	r2, r4
 8003136:	462b      	mov	r3, r5
 8003138:	f7fd fa02 	bl	8000540 <__aeabi_dmul>
 800313c:	4632      	mov	r2, r6
 800313e:	e9c9 0100 	strd	r0, r1, [r9]
 8003142:	463b      	mov	r3, r7
 8003144:	4620      	mov	r0, r4
 8003146:	4629      	mov	r1, r5
 8003148:	f7fd f9fa 	bl	8000540 <__aeabi_dmul>
 800314c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003150:	4604      	mov	r4, r0
 8003152:	460d      	mov	r5, r1
 8003154:	e713      	b.n	8002f7e <__kernel_rem_pio2+0x2b6>
 8003156:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800315a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800315e:	f7fd f9ef 	bl	8000540 <__aeabi_dmul>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fd f833 	bl	80001d4 <__adddf3>
 800316e:	3601      	adds	r6, #1
 8003170:	4604      	mov	r4, r0
 8003172:	460d      	mov	r5, r1
 8003174:	9b04      	ldr	r3, [sp, #16]
 8003176:	429e      	cmp	r6, r3
 8003178:	dc01      	bgt.n	800317e <__kernel_rem_pio2+0x4b6>
 800317a:	45b0      	cmp	r8, r6
 800317c:	daeb      	bge.n	8003156 <__kernel_rem_pio2+0x48e>
 800317e:	ab48      	add	r3, sp, #288	; 0x120
 8003180:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003184:	e9c3 4500 	strd	r4, r5, [r3]
 8003188:	3f01      	subs	r7, #1
 800318a:	f108 0801 	add.w	r8, r8, #1
 800318e:	e6ff      	b.n	8002f90 <__kernel_rem_pio2+0x2c8>
 8003190:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003192:	2b02      	cmp	r3, #2
 8003194:	dc0b      	bgt.n	80031ae <__kernel_rem_pio2+0x4e6>
 8003196:	2b00      	cmp	r3, #0
 8003198:	dc6e      	bgt.n	8003278 <__kernel_rem_pio2+0x5b0>
 800319a:	d045      	beq.n	8003228 <__kernel_rem_pio2+0x560>
 800319c:	9b07      	ldr	r3, [sp, #28]
 800319e:	f003 0007 	and.w	r0, r3, #7
 80031a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80031a6:	ecbd 8b02 	vpop	{d8}
 80031aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d1f3      	bne.n	800319c <__kernel_rem_pio2+0x4d4>
 80031b4:	ab48      	add	r3, sp, #288	; 0x120
 80031b6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80031ba:	46d0      	mov	r8, sl
 80031bc:	46d9      	mov	r9, fp
 80031be:	f1b9 0f00 	cmp.w	r9, #0
 80031c2:	f1a8 0808 	sub.w	r8, r8, #8
 80031c6:	dc64      	bgt.n	8003292 <__kernel_rem_pio2+0x5ca>
 80031c8:	465c      	mov	r4, fp
 80031ca:	2c01      	cmp	r4, #1
 80031cc:	f1aa 0a08 	sub.w	sl, sl, #8
 80031d0:	dc7e      	bgt.n	80032d0 <__kernel_rem_pio2+0x608>
 80031d2:	2000      	movs	r0, #0
 80031d4:	2100      	movs	r1, #0
 80031d6:	f1bb 0f01 	cmp.w	fp, #1
 80031da:	f300 8097 	bgt.w	800330c <__kernel_rem_pio2+0x644>
 80031de:	9b02      	ldr	r3, [sp, #8]
 80031e0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80031e4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f040 8099 	bne.w	8003320 <__kernel_rem_pio2+0x658>
 80031ee:	9b01      	ldr	r3, [sp, #4]
 80031f0:	e9c3 5600 	strd	r5, r6, [r3]
 80031f4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80031f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80031fc:	e7ce      	b.n	800319c <__kernel_rem_pio2+0x4d4>
 80031fe:	ab48      	add	r3, sp, #288	; 0x120
 8003200:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f7fc ffe4 	bl	80001d4 <__adddf3>
 800320c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003210:	f1bb 0f00 	cmp.w	fp, #0
 8003214:	daf3      	bge.n	80031fe <__kernel_rem_pio2+0x536>
 8003216:	9b02      	ldr	r3, [sp, #8]
 8003218:	b113      	cbz	r3, 8003220 <__kernel_rem_pio2+0x558>
 800321a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800321e:	4619      	mov	r1, r3
 8003220:	9b01      	ldr	r3, [sp, #4]
 8003222:	e9c3 0100 	strd	r0, r1, [r3]
 8003226:	e7b9      	b.n	800319c <__kernel_rem_pio2+0x4d4>
 8003228:	2000      	movs	r0, #0
 800322a:	2100      	movs	r1, #0
 800322c:	e7f0      	b.n	8003210 <__kernel_rem_pio2+0x548>
 800322e:	ab48      	add	r3, sp, #288	; 0x120
 8003230:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fc ffcc 	bl	80001d4 <__adddf3>
 800323c:	3c01      	subs	r4, #1
 800323e:	2c00      	cmp	r4, #0
 8003240:	daf5      	bge.n	800322e <__kernel_rem_pio2+0x566>
 8003242:	9b02      	ldr	r3, [sp, #8]
 8003244:	b1e3      	cbz	r3, 8003280 <__kernel_rem_pio2+0x5b8>
 8003246:	4602      	mov	r2, r0
 8003248:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800324c:	9c01      	ldr	r4, [sp, #4]
 800324e:	e9c4 2300 	strd	r2, r3, [r4]
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800325a:	f7fc ffb9 	bl	80001d0 <__aeabi_dsub>
 800325e:	ad4a      	add	r5, sp, #296	; 0x128
 8003260:	2401      	movs	r4, #1
 8003262:	45a3      	cmp	fp, r4
 8003264:	da0f      	bge.n	8003286 <__kernel_rem_pio2+0x5be>
 8003266:	9b02      	ldr	r3, [sp, #8]
 8003268:	b113      	cbz	r3, 8003270 <__kernel_rem_pio2+0x5a8>
 800326a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800326e:	4619      	mov	r1, r3
 8003270:	9b01      	ldr	r3, [sp, #4]
 8003272:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003276:	e791      	b.n	800319c <__kernel_rem_pio2+0x4d4>
 8003278:	465c      	mov	r4, fp
 800327a:	2000      	movs	r0, #0
 800327c:	2100      	movs	r1, #0
 800327e:	e7de      	b.n	800323e <__kernel_rem_pio2+0x576>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	e7e2      	b.n	800324c <__kernel_rem_pio2+0x584>
 8003286:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800328a:	f7fc ffa3 	bl	80001d4 <__adddf3>
 800328e:	3401      	adds	r4, #1
 8003290:	e7e7      	b.n	8003262 <__kernel_rem_pio2+0x59a>
 8003292:	e9d8 4500 	ldrd	r4, r5, [r8]
 8003296:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800329a:	4620      	mov	r0, r4
 800329c:	4632      	mov	r2, r6
 800329e:	463b      	mov	r3, r7
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7fc ff97 	bl	80001d4 <__adddf3>
 80032a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4620      	mov	r0, r4
 80032b0:	4629      	mov	r1, r5
 80032b2:	f7fc ff8d 	bl	80001d0 <__aeabi_dsub>
 80032b6:	4632      	mov	r2, r6
 80032b8:	463b      	mov	r3, r7
 80032ba:	f7fc ff8b 	bl	80001d4 <__adddf3>
 80032be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80032c2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80032c6:	ed88 7b00 	vstr	d7, [r8]
 80032ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80032ce:	e776      	b.n	80031be <__kernel_rem_pio2+0x4f6>
 80032d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80032d4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80032d8:	4640      	mov	r0, r8
 80032da:	4632      	mov	r2, r6
 80032dc:	463b      	mov	r3, r7
 80032de:	4649      	mov	r1, r9
 80032e0:	f7fc ff78 	bl	80001d4 <__adddf3>
 80032e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4640      	mov	r0, r8
 80032ee:	4649      	mov	r1, r9
 80032f0:	f7fc ff6e 	bl	80001d0 <__aeabi_dsub>
 80032f4:	4632      	mov	r2, r6
 80032f6:	463b      	mov	r3, r7
 80032f8:	f7fc ff6c 	bl	80001d4 <__adddf3>
 80032fc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003300:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003304:	ed8a 7b00 	vstr	d7, [sl]
 8003308:	3c01      	subs	r4, #1
 800330a:	e75e      	b.n	80031ca <__kernel_rem_pio2+0x502>
 800330c:	ab48      	add	r3, sp, #288	; 0x120
 800330e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f7fc ff5d 	bl	80001d4 <__adddf3>
 800331a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800331e:	e75a      	b.n	80031d6 <__kernel_rem_pio2+0x50e>
 8003320:	9b01      	ldr	r3, [sp, #4]
 8003322:	9a01      	ldr	r2, [sp, #4]
 8003324:	601d      	str	r5, [r3, #0]
 8003326:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800332a:	605c      	str	r4, [r3, #4]
 800332c:	609f      	str	r7, [r3, #8]
 800332e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8003332:	60d3      	str	r3, [r2, #12]
 8003334:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003338:	6110      	str	r0, [r2, #16]
 800333a:	6153      	str	r3, [r2, #20]
 800333c:	e72e      	b.n	800319c <__kernel_rem_pio2+0x4d4>
 800333e:	bf00      	nop
 8003340:	41700000 	.word	0x41700000
 8003344:	3e700000 	.word	0x3e700000

08003348 <__kernel_sin>:
 8003348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334c:	ed2d 8b04 	vpush	{d8-d9}
 8003350:	eeb0 8a41 	vmov.f32	s16, s2
 8003354:	eef0 8a61 	vmov.f32	s17, s3
 8003358:	ec55 4b10 	vmov	r4, r5, d0
 800335c:	b083      	sub	sp, #12
 800335e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003362:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003366:	9001      	str	r0, [sp, #4]
 8003368:	da06      	bge.n	8003378 <__kernel_sin+0x30>
 800336a:	ee10 0a10 	vmov	r0, s0
 800336e:	4629      	mov	r1, r5
 8003370:	f7fd fb80 	bl	8000a74 <__aeabi_d2iz>
 8003374:	2800      	cmp	r0, #0
 8003376:	d051      	beq.n	800341c <__kernel_sin+0xd4>
 8003378:	4622      	mov	r2, r4
 800337a:	462b      	mov	r3, r5
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fd f8de 	bl	8000540 <__aeabi_dmul>
 8003384:	4682      	mov	sl, r0
 8003386:	468b      	mov	fp, r1
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4620      	mov	r0, r4
 800338e:	4629      	mov	r1, r5
 8003390:	f7fd f8d6 	bl	8000540 <__aeabi_dmul>
 8003394:	a341      	add	r3, pc, #260	; (adr r3, 800349c <__kernel_sin+0x154>)
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	4680      	mov	r8, r0
 800339c:	4689      	mov	r9, r1
 800339e:	4650      	mov	r0, sl
 80033a0:	4659      	mov	r1, fp
 80033a2:	f7fd f8cd 	bl	8000540 <__aeabi_dmul>
 80033a6:	a33f      	add	r3, pc, #252	; (adr r3, 80034a4 <__kernel_sin+0x15c>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	f7fc ff10 	bl	80001d0 <__aeabi_dsub>
 80033b0:	4652      	mov	r2, sl
 80033b2:	465b      	mov	r3, fp
 80033b4:	f7fd f8c4 	bl	8000540 <__aeabi_dmul>
 80033b8:	a33c      	add	r3, pc, #240	; (adr r3, 80034ac <__kernel_sin+0x164>)
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	f7fc ff09 	bl	80001d4 <__adddf3>
 80033c2:	4652      	mov	r2, sl
 80033c4:	465b      	mov	r3, fp
 80033c6:	f7fd f8bb 	bl	8000540 <__aeabi_dmul>
 80033ca:	a33a      	add	r3, pc, #232	; (adr r3, 80034b4 <__kernel_sin+0x16c>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fc fefe 	bl	80001d0 <__aeabi_dsub>
 80033d4:	4652      	mov	r2, sl
 80033d6:	465b      	mov	r3, fp
 80033d8:	f7fd f8b2 	bl	8000540 <__aeabi_dmul>
 80033dc:	a337      	add	r3, pc, #220	; (adr r3, 80034bc <__kernel_sin+0x174>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f7fc fef7 	bl	80001d4 <__adddf3>
 80033e6:	9b01      	ldr	r3, [sp, #4]
 80033e8:	4606      	mov	r6, r0
 80033ea:	460f      	mov	r7, r1
 80033ec:	b9eb      	cbnz	r3, 800342a <__kernel_sin+0xe2>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4650      	mov	r0, sl
 80033f4:	4659      	mov	r1, fp
 80033f6:	f7fd f8a3 	bl	8000540 <__aeabi_dmul>
 80033fa:	a325      	add	r3, pc, #148	; (adr r3, 8003490 <__kernel_sin+0x148>)
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f7fc fee6 	bl	80001d0 <__aeabi_dsub>
 8003404:	4642      	mov	r2, r8
 8003406:	464b      	mov	r3, r9
 8003408:	f7fd f89a 	bl	8000540 <__aeabi_dmul>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4620      	mov	r0, r4
 8003412:	4629      	mov	r1, r5
 8003414:	f7fc fede 	bl	80001d4 <__adddf3>
 8003418:	4604      	mov	r4, r0
 800341a:	460d      	mov	r5, r1
 800341c:	ec45 4b10 	vmov	d0, r4, r5
 8003420:	b003      	add	sp, #12
 8003422:	ecbd 8b04 	vpop	{d8-d9}
 8003426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <__kernel_sin+0x150>)
 800342c:	ec51 0b18 	vmov	r0, r1, d8
 8003430:	2200      	movs	r2, #0
 8003432:	f7fd f885 	bl	8000540 <__aeabi_dmul>
 8003436:	4632      	mov	r2, r6
 8003438:	ec41 0b19 	vmov	d9, r0, r1
 800343c:	463b      	mov	r3, r7
 800343e:	4640      	mov	r0, r8
 8003440:	4649      	mov	r1, r9
 8003442:	f7fd f87d 	bl	8000540 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	ec51 0b19 	vmov	r0, r1, d9
 800344e:	f7fc febf 	bl	80001d0 <__aeabi_dsub>
 8003452:	4652      	mov	r2, sl
 8003454:	465b      	mov	r3, fp
 8003456:	f7fd f873 	bl	8000540 <__aeabi_dmul>
 800345a:	ec53 2b18 	vmov	r2, r3, d8
 800345e:	f7fc feb7 	bl	80001d0 <__aeabi_dsub>
 8003462:	a30b      	add	r3, pc, #44	; (adr r3, 8003490 <__kernel_sin+0x148>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	4606      	mov	r6, r0
 800346a:	460f      	mov	r7, r1
 800346c:	4640      	mov	r0, r8
 800346e:	4649      	mov	r1, r9
 8003470:	f7fd f866 	bl	8000540 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4630      	mov	r0, r6
 800347a:	4639      	mov	r1, r7
 800347c:	f7fc feaa 	bl	80001d4 <__adddf3>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4620      	mov	r0, r4
 8003486:	4629      	mov	r1, r5
 8003488:	f7fc fea2 	bl	80001d0 <__aeabi_dsub>
 800348c:	e7c4      	b.n	8003418 <__kernel_sin+0xd0>
 800348e:	bf00      	nop
 8003490:	55555549 	.word	0x55555549
 8003494:	3fc55555 	.word	0x3fc55555
 8003498:	3fe00000 	.word	0x3fe00000
 800349c:	5acfd57c 	.word	0x5acfd57c
 80034a0:	3de5d93a 	.word	0x3de5d93a
 80034a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80034a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80034ac:	57b1fe7d 	.word	0x57b1fe7d
 80034b0:	3ec71de3 	.word	0x3ec71de3
 80034b4:	19c161d5 	.word	0x19c161d5
 80034b8:	3f2a01a0 	.word	0x3f2a01a0
 80034bc:	1110f8a6 	.word	0x1110f8a6
 80034c0:	3f811111 	.word	0x3f811111

080034c4 <fabs>:
 80034c4:	ec51 0b10 	vmov	r0, r1, d0
 80034c8:	ee10 2a10 	vmov	r2, s0
 80034cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80034d0:	ec43 2b10 	vmov	d0, r2, r3
 80034d4:	4770      	bx	lr
	...

080034d8 <floor>:
 80034d8:	ec51 0b10 	vmov	r0, r1, d0
 80034dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80034e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80034e8:	2e13      	cmp	r6, #19
 80034ea:	ee10 5a10 	vmov	r5, s0
 80034ee:	ee10 8a10 	vmov	r8, s0
 80034f2:	460c      	mov	r4, r1
 80034f4:	dc32      	bgt.n	800355c <floor+0x84>
 80034f6:	2e00      	cmp	r6, #0
 80034f8:	da14      	bge.n	8003524 <floor+0x4c>
 80034fa:	a333      	add	r3, pc, #204	; (adr r3, 80035c8 <floor+0xf0>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f7fc fe68 	bl	80001d4 <__adddf3>
 8003504:	2200      	movs	r2, #0
 8003506:	2300      	movs	r3, #0
 8003508:	f7fd faaa 	bl	8000a60 <__aeabi_dcmpgt>
 800350c:	b138      	cbz	r0, 800351e <floor+0x46>
 800350e:	2c00      	cmp	r4, #0
 8003510:	da57      	bge.n	80035c2 <floor+0xea>
 8003512:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003516:	431d      	orrs	r5, r3
 8003518:	d001      	beq.n	800351e <floor+0x46>
 800351a:	4c2d      	ldr	r4, [pc, #180]	; (80035d0 <floor+0xf8>)
 800351c:	2500      	movs	r5, #0
 800351e:	4621      	mov	r1, r4
 8003520:	4628      	mov	r0, r5
 8003522:	e025      	b.n	8003570 <floor+0x98>
 8003524:	4f2b      	ldr	r7, [pc, #172]	; (80035d4 <floor+0xfc>)
 8003526:	4137      	asrs	r7, r6
 8003528:	ea01 0307 	and.w	r3, r1, r7
 800352c:	4303      	orrs	r3, r0
 800352e:	d01f      	beq.n	8003570 <floor+0x98>
 8003530:	a325      	add	r3, pc, #148	; (adr r3, 80035c8 <floor+0xf0>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fc fe4d 	bl	80001d4 <__adddf3>
 800353a:	2200      	movs	r2, #0
 800353c:	2300      	movs	r3, #0
 800353e:	f7fd fa8f 	bl	8000a60 <__aeabi_dcmpgt>
 8003542:	2800      	cmp	r0, #0
 8003544:	d0eb      	beq.n	800351e <floor+0x46>
 8003546:	2c00      	cmp	r4, #0
 8003548:	bfbe      	ittt	lt
 800354a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800354e:	fa43 f606 	asrlt.w	r6, r3, r6
 8003552:	19a4      	addlt	r4, r4, r6
 8003554:	ea24 0407 	bic.w	r4, r4, r7
 8003558:	2500      	movs	r5, #0
 800355a:	e7e0      	b.n	800351e <floor+0x46>
 800355c:	2e33      	cmp	r6, #51	; 0x33
 800355e:	dd0b      	ble.n	8003578 <floor+0xa0>
 8003560:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003564:	d104      	bne.n	8003570 <floor+0x98>
 8003566:	ee10 2a10 	vmov	r2, s0
 800356a:	460b      	mov	r3, r1
 800356c:	f7fc fe32 	bl	80001d4 <__adddf3>
 8003570:	ec41 0b10 	vmov	d0, r0, r1
 8003574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003578:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	fa23 f707 	lsr.w	r7, r3, r7
 8003584:	4207      	tst	r7, r0
 8003586:	d0f3      	beq.n	8003570 <floor+0x98>
 8003588:	a30f      	add	r3, pc, #60	; (adr r3, 80035c8 <floor+0xf0>)
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f7fc fe21 	bl	80001d4 <__adddf3>
 8003592:	2200      	movs	r2, #0
 8003594:	2300      	movs	r3, #0
 8003596:	f7fd fa63 	bl	8000a60 <__aeabi_dcmpgt>
 800359a:	2800      	cmp	r0, #0
 800359c:	d0bf      	beq.n	800351e <floor+0x46>
 800359e:	2c00      	cmp	r4, #0
 80035a0:	da02      	bge.n	80035a8 <floor+0xd0>
 80035a2:	2e14      	cmp	r6, #20
 80035a4:	d103      	bne.n	80035ae <floor+0xd6>
 80035a6:	3401      	adds	r4, #1
 80035a8:	ea25 0507 	bic.w	r5, r5, r7
 80035ac:	e7b7      	b.n	800351e <floor+0x46>
 80035ae:	2301      	movs	r3, #1
 80035b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80035b4:	fa03 f606 	lsl.w	r6, r3, r6
 80035b8:	4435      	add	r5, r6
 80035ba:	4545      	cmp	r5, r8
 80035bc:	bf38      	it	cc
 80035be:	18e4      	addcc	r4, r4, r3
 80035c0:	e7f2      	b.n	80035a8 <floor+0xd0>
 80035c2:	2500      	movs	r5, #0
 80035c4:	462c      	mov	r4, r5
 80035c6:	e7aa      	b.n	800351e <floor+0x46>
 80035c8:	8800759c 	.word	0x8800759c
 80035cc:	7e37e43c 	.word	0x7e37e43c
 80035d0:	bff00000 	.word	0xbff00000
 80035d4:	000fffff 	.word	0x000fffff

080035d8 <scalbn>:
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	ec55 4b10 	vmov	r4, r5, d0
 80035de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80035e2:	4606      	mov	r6, r0
 80035e4:	462b      	mov	r3, r5
 80035e6:	b99a      	cbnz	r2, 8003610 <scalbn+0x38>
 80035e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80035ec:	4323      	orrs	r3, r4
 80035ee:	d036      	beq.n	800365e <scalbn+0x86>
 80035f0:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <scalbn+0x100>)
 80035f2:	4629      	mov	r1, r5
 80035f4:	ee10 0a10 	vmov	r0, s0
 80035f8:	2200      	movs	r2, #0
 80035fa:	f7fc ffa1 	bl	8000540 <__aeabi_dmul>
 80035fe:	4b37      	ldr	r3, [pc, #220]	; (80036dc <scalbn+0x104>)
 8003600:	429e      	cmp	r6, r3
 8003602:	4604      	mov	r4, r0
 8003604:	460d      	mov	r5, r1
 8003606:	da10      	bge.n	800362a <scalbn+0x52>
 8003608:	a32b      	add	r3, pc, #172	; (adr r3, 80036b8 <scalbn+0xe0>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	e03a      	b.n	8003686 <scalbn+0xae>
 8003610:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003614:	428a      	cmp	r2, r1
 8003616:	d10c      	bne.n	8003632 <scalbn+0x5a>
 8003618:	ee10 2a10 	vmov	r2, s0
 800361c:	4620      	mov	r0, r4
 800361e:	4629      	mov	r1, r5
 8003620:	f7fc fdd8 	bl	80001d4 <__adddf3>
 8003624:	4604      	mov	r4, r0
 8003626:	460d      	mov	r5, r1
 8003628:	e019      	b.n	800365e <scalbn+0x86>
 800362a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800362e:	460b      	mov	r3, r1
 8003630:	3a36      	subs	r2, #54	; 0x36
 8003632:	4432      	add	r2, r6
 8003634:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003638:	428a      	cmp	r2, r1
 800363a:	dd08      	ble.n	800364e <scalbn+0x76>
 800363c:	2d00      	cmp	r5, #0
 800363e:	a120      	add	r1, pc, #128	; (adr r1, 80036c0 <scalbn+0xe8>)
 8003640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003644:	da1c      	bge.n	8003680 <scalbn+0xa8>
 8003646:	a120      	add	r1, pc, #128	; (adr r1, 80036c8 <scalbn+0xf0>)
 8003648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800364c:	e018      	b.n	8003680 <scalbn+0xa8>
 800364e:	2a00      	cmp	r2, #0
 8003650:	dd08      	ble.n	8003664 <scalbn+0x8c>
 8003652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800365a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800365e:	ec45 4b10 	vmov	d0, r4, r5
 8003662:	bd70      	pop	{r4, r5, r6, pc}
 8003664:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003668:	da19      	bge.n	800369e <scalbn+0xc6>
 800366a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800366e:	429e      	cmp	r6, r3
 8003670:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8003674:	dd0a      	ble.n	800368c <scalbn+0xb4>
 8003676:	a112      	add	r1, pc, #72	; (adr r1, 80036c0 <scalbn+0xe8>)
 8003678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e2      	bne.n	8003646 <scalbn+0x6e>
 8003680:	a30f      	add	r3, pc, #60	; (adr r3, 80036c0 <scalbn+0xe8>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f7fc ff5b 	bl	8000540 <__aeabi_dmul>
 800368a:	e7cb      	b.n	8003624 <scalbn+0x4c>
 800368c:	a10a      	add	r1, pc, #40	; (adr r1, 80036b8 <scalbn+0xe0>)
 800368e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0b8      	beq.n	8003608 <scalbn+0x30>
 8003696:	a10e      	add	r1, pc, #56	; (adr r1, 80036d0 <scalbn+0xf8>)
 8003698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800369c:	e7b4      	b.n	8003608 <scalbn+0x30>
 800369e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80036a2:	3236      	adds	r2, #54	; 0x36
 80036a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80036a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80036ac:	4620      	mov	r0, r4
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <scalbn+0x108>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	e7e8      	b.n	8003686 <scalbn+0xae>
 80036b4:	f3af 8000 	nop.w
 80036b8:	c2f8f359 	.word	0xc2f8f359
 80036bc:	01a56e1f 	.word	0x01a56e1f
 80036c0:	8800759c 	.word	0x8800759c
 80036c4:	7e37e43c 	.word	0x7e37e43c
 80036c8:	8800759c 	.word	0x8800759c
 80036cc:	fe37e43c 	.word	0xfe37e43c
 80036d0:	c2f8f359 	.word	0xc2f8f359
 80036d4:	81a56e1f 	.word	0x81a56e1f
 80036d8:	43500000 	.word	0x43500000
 80036dc:	ffff3cb0 	.word	0xffff3cb0
 80036e0:	3c900000 	.word	0x3c900000

080036e4 <_init>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr

080036f0 <_fini>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	bf00      	nop
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr
