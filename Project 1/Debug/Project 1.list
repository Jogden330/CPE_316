
Project 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000188c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001a14  08001a14  00011a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a90  08001a90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a90  08001a90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a90  08001a90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a90  08001a90  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a94  08001a94  00011a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001aa4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001aa4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c38  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000136f  00000000  00000000  00026c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00027fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  00028598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025425  00000000  00000000  00028ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006262  00000000  00000000  0004dedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f02  00000000  00000000  0005413f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138041  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001468  00000000  00000000  00138094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080019fc 	.word	0x080019fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080019fc 	.word	0x080019fc

080001c8 <LED_Light_on>:
#include "main.h"
#include <math.h>
#include <stdio.h>
#include "KeyPad.h"

void LED_Light_on(void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	 GPIOB->BSRR |= (GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11);
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <LED_Light_on+0x1c>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <LED_Light_on+0x1c>)
 80001d2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80001d6:	6193      	str	r3, [r2, #24]

}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	48000400 	.word	0x48000400

080001e8 <LED_Light_off>:

void LED_Light_off(void){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

	 GPIOB->BRR |= (GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11);
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <LED_Light_off+0x1c>)
 80001ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <LED_Light_off+0x1c>)
 80001f2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80001f6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	48000400 	.word	0x48000400

08000208 <read_Pad>:


int read_Pad(void){
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0


	volatile uint8_t  row;

	for(uint8_t colum = 0; colum < 3; colum++){
 800020e:	2300      	movs	r3, #0
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	e088      	b.n	8000326 <read_Pad+0x11e>

		GPIOB->BRR |= 0X70;
 8000214:	4b49      	ldr	r3, [pc, #292]	; (800033c <read_Pad+0x134>)
 8000216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000218:	4a48      	ldr	r2, [pc, #288]	; (800033c <read_Pad+0x134>)
 800021a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800021e:	6293      	str	r3, [r2, #40]	; 0x28
		GPIOB->BSRR |= (1 << (4 + colum));
 8000220:	4b46      	ldr	r3, [pc, #280]	; (800033c <read_Pad+0x134>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	79fa      	ldrb	r2, [r7, #7]
 8000226:	3204      	adds	r2, #4
 8000228:	2101      	movs	r1, #1
 800022a:	fa01 f202 	lsl.w	r2, r1, r2
 800022e:	4611      	mov	r1, r2
 8000230:	4a42      	ldr	r2, [pc, #264]	; (800033c <read_Pad+0x134>)
 8000232:	430b      	orrs	r3, r1
 8000234:	6193      	str	r3, [r2, #24]
		row |= (GPIOB->IDR & 0x0F); //mask
 8000236:	4b41      	ldr	r3, [pc, #260]	; (800033c <read_Pad+0x134>)
 8000238:	691b      	ldr	r3, [r3, #16]
 800023a:	f003 030f 	and.w	r3, r3, #15
 800023e:	b2da      	uxtb	r2, r3
 8000240:	79bb      	ldrb	r3, [r7, #6]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	4313      	orrs	r3, r2
 8000246:	b2db      	uxtb	r3, r3
 8000248:	71bb      	strb	r3, [r7, #6]

		switch(colum){
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2b02      	cmp	r3, #2
 800024e:	d047      	beq.n	80002e0 <read_Pad+0xd8>
 8000250:	2b02      	cmp	r3, #2
 8000252:	dc65      	bgt.n	8000320 <read_Pad+0x118>
 8000254:	2b00      	cmp	r3, #0
 8000256:	d002      	beq.n	800025e <read_Pad+0x56>
 8000258:	2b01      	cmp	r3, #1
 800025a:	d021      	beq.n	80002a0 <read_Pad+0x98>
 800025c:	e060      	b.n	8000320 <read_Pad+0x118>
		case 0:
			switch(row){
 800025e:	79bb      	ldrb	r3, [r7, #6]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	3b01      	subs	r3, #1
 8000264:	2b07      	cmp	r3, #7
 8000266:	d81b      	bhi.n	80002a0 <read_Pad+0x98>
 8000268:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <read_Pad+0x68>)
 800026a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026e:	bf00      	nop
 8000270:	08000291 	.word	0x08000291
 8000274:	08000295 	.word	0x08000295
 8000278:	080002a1 	.word	0x080002a1
 800027c:	08000299 	.word	0x08000299
 8000280:	080002a1 	.word	0x080002a1
 8000284:	080002a1 	.word	0x080002a1
 8000288:	080002a1 	.word	0x080002a1
 800028c:	0800029d 	.word	0x0800029d
				case 1:
					return 1;
 8000290:	2301      	movs	r3, #1
 8000292:	e04d      	b.n	8000330 <read_Pad+0x128>
				case 2:
					return 4;
 8000294:	2304      	movs	r3, #4
 8000296:	e04b      	b.n	8000330 <read_Pad+0x128>
				case 4:
					return 7;
 8000298:	2307      	movs	r3, #7
 800029a:	e049      	b.n	8000330 <read_Pad+0x128>
				case 8:
					return 10;
 800029c:	230a      	movs	r3, #10
 800029e:	e047      	b.n	8000330 <read_Pad+0x128>
				}
		case 1:
			switch(row){
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	3b01      	subs	r3, #1
 80002a6:	2b07      	cmp	r3, #7
 80002a8:	d81a      	bhi.n	80002e0 <read_Pad+0xd8>
 80002aa:	a201      	add	r2, pc, #4	; (adr r2, 80002b0 <read_Pad+0xa8>)
 80002ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b0:	080002d1 	.word	0x080002d1
 80002b4:	080002d5 	.word	0x080002d5
 80002b8:	080002e1 	.word	0x080002e1
 80002bc:	080002d9 	.word	0x080002d9
 80002c0:	080002e1 	.word	0x080002e1
 80002c4:	080002e1 	.word	0x080002e1
 80002c8:	080002e1 	.word	0x080002e1
 80002cc:	080002dd 	.word	0x080002dd
				case 1:
					return 2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	e02d      	b.n	8000330 <read_Pad+0x128>
				case 2:
					return 5;
 80002d4:	2305      	movs	r3, #5
 80002d6:	e02b      	b.n	8000330 <read_Pad+0x128>
				case 4:
					return 8;
 80002d8:	2308      	movs	r3, #8
 80002da:	e029      	b.n	8000330 <read_Pad+0x128>
				case 8:
					return 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	e027      	b.n	8000330 <read_Pad+0x128>
			}
		case 2:
			switch(row){
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	3b01      	subs	r3, #1
 80002e6:	2b07      	cmp	r3, #7
 80002e8:	d81a      	bhi.n	8000320 <read_Pad+0x118>
 80002ea:	a201      	add	r2, pc, #4	; (adr r2, 80002f0 <read_Pad+0xe8>)
 80002ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f0:	08000311 	.word	0x08000311
 80002f4:	08000315 	.word	0x08000315
 80002f8:	08000321 	.word	0x08000321
 80002fc:	08000319 	.word	0x08000319
 8000300:	08000321 	.word	0x08000321
 8000304:	08000321 	.word	0x08000321
 8000308:	08000321 	.word	0x08000321
 800030c:	0800031d 	.word	0x0800031d
				case 1:
					return 3;
 8000310:	2303      	movs	r3, #3
 8000312:	e00d      	b.n	8000330 <read_Pad+0x128>
				case 2:
					return 6;
 8000314:	2306      	movs	r3, #6
 8000316:	e00b      	b.n	8000330 <read_Pad+0x128>
				case 4:
					return 9;
 8000318:	2309      	movs	r3, #9
 800031a:	e009      	b.n	8000330 <read_Pad+0x128>
				case 8:
					return 11;
 800031c:	230b      	movs	r3, #11
 800031e:	e007      	b.n	8000330 <read_Pad+0x128>
	for(uint8_t colum = 0; colum < 3; colum++){
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	3301      	adds	r3, #1
 8000324:	71fb      	strb	r3, [r7, #7]
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b02      	cmp	r3, #2
 800032a:	f67f af73 	bls.w	8000214 <read_Pad+0xc>


		}

	}
	return 0xFF;
 800032e:	23ff      	movs	r3, #255	; 0xff

}
 8000330:	4618      	mov	r0, r3
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	48000400 	.word	0x48000400

08000340 <Keypad_init>:



void Keypad_init(void){
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0


  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <Keypad_init+0x88>)
 8000346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000348:	4a1f      	ldr	r2, [pc, #124]	; (80003c8 <Keypad_init+0x88>)
 800034a:	f043 0302 	orr.w	r3, r3, #2
 800034e:	64d3      	str	r3, [r2, #76]	; 0x4c
  GPIOB->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <Keypad_init+0x8c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a1d      	ldr	r2, [pc, #116]	; (80003cc <Keypad_init+0x8c>)
 8000356:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800035a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800035e:	6013      	str	r3, [r2, #0]
		              GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
					  GPIO_MODER_MODE8 | GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11);
  GPIOB->MODER   |=  (GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
 8000360:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <Keypad_init+0x8c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a19      	ldr	r2, [pc, #100]	; (80003cc <Keypad_init+0x8c>)
 8000366:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 800036a:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 800036e:	6013      	str	r3, [r2, #0]
		              GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE11_0);
  GPIOB->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 |
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <Keypad_init+0x8c>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4a15      	ldr	r2, [pc, #84]	; (80003cc <Keypad_init+0x8c>)
 8000376:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800037a:	f023 030f 	bic.w	r3, r3, #15
 800037e:	6053      	str	r3, [r2, #4]
		  	  	  	  GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 |
					  GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
  GPIOB->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3 |
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <Keypad_init+0x8c>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <Keypad_init+0x8c>)
 8000386:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800038a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800038e:	60d3      	str	r3, [r2, #12]
		  	  	  	  GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD8 |
					  GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);
  GPIOB->PUPDR   |=  (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1 |
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <Keypad_init+0x8c>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <Keypad_init+0x8c>)
 8000396:	f443 532a 	orr.w	r3, r3, #10880	; 0x2a80
 800039a:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 800039e:	60d3      	str	r3, [r2, #12]
  		  	  	  	  GPIO_PUPDR_PUPD4_1 | GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1 );
  GPIOB->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <Keypad_init+0x8c>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	4a09      	ldr	r2, [pc, #36]	; (80003cc <Keypad_init+0x8c>)
 80003a6:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 80003aa:	6093      	str	r3, [r2, #8]
					  (3 << GPIO_OSPEEDR_OSPEED8_Pos) |
                      (3 << GPIO_OSPEEDR_OSPEED9_Pos) |
  	          		  (3 << GPIO_OSPEEDR_OSPEED10_Pos)|
                      (3 << GPIO_OSPEEDR_OSPEED11_Pos));

  GPIOB->BRR = ( 0X3F );   // preset PC0, - PC 10 to zero
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <Keypad_init+0x8c>)
 80003ae:	223f      	movs	r2, #63	; 0x3f
 80003b0:	629a      	str	r2, [r3, #40]	; 0x28


    GPIOB->BRR |= (GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11);
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <Keypad_init+0x8c>)
 80003b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <Keypad_init+0x8c>)
 80003b8:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80003bc:	6293      	str	r3, [r2, #40]	; 0x28



}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000400 	.word	0x48000400

080003d0 <LCD_command>:
#include <math.h>
#include "LCD.h"



void LCD_command(unsigned char command){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]

	GPIOC->ODR = (command);
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <LCD_command+0x54>)
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 fbbd 	bl	8000b60 <HAL_Delay>
    GPIOC->BSRR |= (command | E);
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <LCD_command+0x54>)
 80003e8:	699a      	ldr	r2, [r3, #24]
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	4313      	orrs	r3, r2
 80003ee:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <LCD_command+0x54>)
 80003f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003f4:	6193      	str	r3, [r2, #24]
    HAL_Delay(1);
 80003f6:	2001      	movs	r0, #1
 80003f8:	f000 fbb2 	bl	8000b60 <HAL_Delay>
    GPIOC->BRR |= (E);
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <LCD_command+0x54>)
 80003fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000400:	4a08      	ldr	r2, [pc, #32]	; (8000424 <LCD_command+0x54>)
 8000402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000406:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_Delay(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f000 fba9 	bl	8000b60 <HAL_Delay>
    GPIOC->BRR |= (command);
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <LCD_command+0x54>)
 8000410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	4903      	ldr	r1, [pc, #12]	; (8000424 <LCD_command+0x54>)
 8000416:	4313      	orrs	r3, r2
 8000418:	628b      	str	r3, [r1, #40]	; 0x28




}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	48000800 	.word	0x48000800

08000428 <LCD_write_char>:

void LCD_write_char(unsigned char letter){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]

	GPIOC->ODR = (letter | RS);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <LCD_write_char+0x5c>)
 800043a:	615a      	str	r2, [r3, #20]

	HAL_Delay(1);
 800043c:	2001      	movs	r0, #1
 800043e:	f000 fb8f 	bl	8000b60 <HAL_Delay>
    GPIOC->BSRR |= (letter | RS | E);
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <LCD_write_char+0x5c>)
 8000444:	699a      	ldr	r2, [r3, #24]
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4313      	orrs	r3, r2
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <LCD_write_char+0x5c>)
 800044c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000450:	6193      	str	r3, [r2, #24]
    HAL_Delay(1);
 8000452:	2001      	movs	r0, #1
 8000454:	f000 fb84 	bl	8000b60 <HAL_Delay>
	GPIOC->BRR |= (E);
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <LCD_write_char+0x5c>)
 800045a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800045c:	4a09      	ldr	r2, [pc, #36]	; (8000484 <LCD_write_char+0x5c>)
 800045e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000462:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_Delay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f000 fb7b 	bl	8000b60 <HAL_Delay>
	GPIOC->BRR |= (letter | RS);
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <LCD_write_char+0x5c>)
 800046c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4313      	orrs	r3, r2
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <LCD_write_char+0x5c>)
 8000474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000478:	6293      	str	r3, [r2, #40]	; 0x28

}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	48000800 	.word	0x48000800

08000488 <LCD_clear>:

void LCD_clear(void){
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	LCD_command(0X01);
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff ff9f 	bl	80003d0 <LCD_command>
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}

08000496 <LCD_newline>:

void LCD_newline(void){
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0

	LCD_command(0XC0);
 800049a:	20c0      	movs	r0, #192	; 0xc0
 800049c:	f7ff ff98 	bl	80003d0 <LCD_command>
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <LCD_init>:

void LCD_init(void){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

	  // configure PC0 - PC10 for GPIO output, push-pull
	  // no pull up / pull down, high speed
	  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 80004a8:	4b25      	ldr	r3, [pc, #148]	; (8000540 <LCD_init+0x9c>)
 80004aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ac:	4a24      	ldr	r2, [pc, #144]	; (8000540 <LCD_init+0x9c>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	64d3      	str	r3, [r2, #76]	; 0x4c
	  GPIOC->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
 80004b4:	4b23      	ldr	r3, [pc, #140]	; (8000544 <LCD_init+0xa0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a22      	ldr	r2, [pc, #136]	; (8000544 <LCD_init+0xa0>)
 80004ba:	0d9b      	lsrs	r3, r3, #22
 80004bc:	059b      	lsls	r3, r3, #22
 80004be:	6013      	str	r3, [r2, #0]
			              GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7 |
						  GPIO_MODER_MODE8 | GPIO_MODER_MODE9 | GPIO_MODER_MODE10);
	  GPIOC->MODER   |=  (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
 80004c0:	4b20      	ldr	r3, [pc, #128]	; (8000544 <LCD_init+0xa0>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	491f      	ldr	r1, [pc, #124]	; (8000544 <LCD_init+0xa0>)
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <LCD_init+0xa4>)
 80004c8:	4313      	orrs	r3, r2
 80004ca:	600b      	str	r3, [r1, #0]
			  	  	  	  GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 |
						  GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0);
	  GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 |
 80004cc:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <LCD_init+0xa0>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <LCD_init+0xa0>)
 80004d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80004d6:	f023 0307 	bic.w	r3, r3, #7
 80004da:	6053      	str	r3, [r2, #4]
			  	  	  	  GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 |
						  GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10);
	  GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3 |
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <LCD_init+0xa0>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a18      	ldr	r2, [pc, #96]	; (8000544 <LCD_init+0xa0>)
 80004e2:	0d9b      	lsrs	r3, r3, #22
 80004e4:	059b      	lsls	r3, r3, #22
 80004e6:	60d3      	str	r3, [r2, #12]
			  	  	  	  GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7 |
						  GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10);
      GPIOC->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <LCD_init+0xa0>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <LCD_init+0xa0>)
 80004ee:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 80004f2:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 80004f6:	6093      	str	r3, [r2, #8]
						  (3 << GPIO_OSPEEDR_OSPEED7_Pos) |
						  (3 << GPIO_OSPEEDR_OSPEED8_Pos) |
						  (3 << GPIO_OSPEEDR_OSPEED9_Pos) |
						  (3 << GPIO_OSPEEDR_OSPEED10_Pos));

	   GPIOC->BRR = ( 0x7FF );   // preset PC0, - PC 10 to zero
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <LCD_init+0xa0>)
 80004fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28


	LCD_command(0x30);
 8000500:	2030      	movs	r0, #48	; 0x30
 8000502:	f7ff ff65 	bl	80003d0 <LCD_command>
	HAL_Delay(100);
 8000506:	2064      	movs	r0, #100	; 0x64
 8000508:	f000 fb2a 	bl	8000b60 <HAL_Delay>

	LCD_command(0x30);
 800050c:	2030      	movs	r0, #48	; 0x30
 800050e:	f7ff ff5f 	bl	80003d0 <LCD_command>
	HAL_Delay(10);
 8000512:	200a      	movs	r0, #10
 8000514:	f000 fb24 	bl	8000b60 <HAL_Delay>

    LCD_command(0x30);
 8000518:	2030      	movs	r0, #48	; 0x30
 800051a:	f7ff ff59 	bl	80003d0 <LCD_command>
    HAL_Delay(10);
 800051e:	200a      	movs	r0, #10
 8000520:	f000 fb1e 	bl	8000b60 <HAL_Delay>

    LCD_command(0x38);
 8000524:	2038      	movs	r0, #56	; 0x38
 8000526:	f7ff ff53 	bl	80003d0 <LCD_command>

    LCD_command(0x10);
 800052a:	2010      	movs	r0, #16
 800052c:	f7ff ff50 	bl	80003d0 <LCD_command>

    LCD_command(0x0F);
 8000530:	200f      	movs	r0, #15
 8000532:	f7ff ff4d 	bl	80003d0 <LCD_command>

    LCD_command(0x06);
 8000536:	2006      	movs	r0, #6
 8000538:	f7ff ff4a 	bl	80003d0 <LCD_command>


}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	48000800 	.word	0x48000800
 8000548:	00155555 	.word	0x00155555

0800054c <set_NEW_code_text>:
/**
  * @brief  The application entry point.
  * @retval int
  */

void set_NEW_code_text(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
           char line1[8] = {'N','E','W',' ','C','O','D','E'};                      //set first text line of array
 8000552:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <set_NEW_code_text+0x88>)
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800055c:	e883 0003 	stmia.w	r3, {r0, r1}
           char line2[7] = {'E','N','T','E','R',':',' '};                           //set second text line of array
 8000560:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <set_NEW_code_text+0x8c>)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000568:	6018      	str	r0, [r3, #0]
 800056a:	3304      	adds	r3, #4
 800056c:	8019      	strh	r1, [r3, #0]
 800056e:	3302      	adds	r3, #2
 8000570:	0c0a      	lsrs	r2, r1, #16
 8000572:	701a      	strb	r2, [r3, #0]

           LCD_clear();                                                             //clear led screen
 8000574:	f7ff ff88 	bl	8000488 <LCD_clear>

           uint8_t i = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	75fb      	strb	r3, [r7, #23]
           for(i = 0;i < (sizeof(line1)/sizeof(line1[0]));i++){                     //cycal throw line array printing LCD
 800057c:	2300      	movs	r3, #0
 800057e:	75fb      	strb	r3, [r7, #23]
 8000580:	e00b      	b.n	800059a <set_NEW_code_text+0x4e>
              LCD_write_char(line1[i]);
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	f107 0218 	add.w	r2, r7, #24
 8000588:	4413      	add	r3, r2
 800058a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff4a 	bl	8000428 <LCD_write_char>
           for(i = 0;i < (sizeof(line1)/sizeof(line1[0]));i++){                     //cycal throw line array printing LCD
 8000594:	7dfb      	ldrb	r3, [r7, #23]
 8000596:	3301      	adds	r3, #1
 8000598:	75fb      	strb	r3, [r7, #23]
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	2b07      	cmp	r3, #7
 800059e:	d9f0      	bls.n	8000582 <set_NEW_code_text+0x36>
           }
           LCD_newline();                                                          //go to next line
 80005a0:	f7ff ff79 	bl	8000496 <LCD_newline>
           for(i = 0;i < (sizeof(line2)/sizeof(line2[0]));i++){                     //cycal throw second line array printing LCD
 80005a4:	2300      	movs	r3, #0
 80005a6:	75fb      	strb	r3, [r7, #23]
 80005a8:	e00b      	b.n	80005c2 <set_NEW_code_text+0x76>
                  LCD_write_char(line2[i]);
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	f107 0218 	add.w	r2, r7, #24
 80005b0:	4413      	add	r3, r2
 80005b2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ff36 	bl	8000428 <LCD_write_char>
           for(i = 0;i < (sizeof(line2)/sizeof(line2[0]));i++){                     //cycal throw second line array printing LCD
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
 80005be:	3301      	adds	r3, #1
 80005c0:	75fb      	strb	r3, [r7, #23]
 80005c2:	7dfb      	ldrb	r3, [r7, #23]
 80005c4:	2b06      	cmp	r3, #6
 80005c6:	d9f0      	bls.n	80005aa <set_NEW_code_text+0x5e>
               }

}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	08001a14 	.word	0x08001a14
 80005d8:	08001a1c 	.word	0x08001a1c

080005dc <set_unlock_text>:

void set_unlock_text(void){
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b089      	sub	sp, #36	; 0x24
 80005e0:	af00      	add	r7, sp, #0
        char line1[8] = {'U','N','L','O','C','K','E','D'};                          //set first text line of array
 80005e2:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <set_unlock_text+0x7c>)
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ec:	e883 0003 	stmia.w	r3, {r0, r1}
        char line2[13] = {'P','R','E','S','S',' ','A','N','Y',' ','K','E','Y'};     //set second text line of array
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <set_unlock_text+0x80>)
 80005f2:	1d3c      	adds	r4, r7, #4
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	c407      	stmia	r4!, {r0, r1, r2}
 80005f8:	7023      	strb	r3, [r4, #0]

        LCD_clear();                                                                 //clear led screen
 80005fa:	f7ff ff45 	bl	8000488 <LCD_clear>

        uint8_t i = 0;                                                                   //cycal throw line array printing LCD
 80005fe:	2300      	movs	r3, #0
 8000600:	77fb      	strb	r3, [r7, #31]
        for(i = 0;i < (sizeof(line1)/sizeof(line1[0]));i++){
 8000602:	2300      	movs	r3, #0
 8000604:	77fb      	strb	r3, [r7, #31]
 8000606:	e00b      	b.n	8000620 <set_unlock_text+0x44>
           LCD_write_char(line1[i]);
 8000608:	7ffb      	ldrb	r3, [r7, #31]
 800060a:	f107 0220 	add.w	r2, r7, #32
 800060e:	4413      	add	r3, r2
 8000610:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff07 	bl	8000428 <LCD_write_char>
        for(i = 0;i < (sizeof(line1)/sizeof(line1[0]));i++){
 800061a:	7ffb      	ldrb	r3, [r7, #31]
 800061c:	3301      	adds	r3, #1
 800061e:	77fb      	strb	r3, [r7, #31]
 8000620:	7ffb      	ldrb	r3, [r7, #31]
 8000622:	2b07      	cmp	r3, #7
 8000624:	d9f0      	bls.n	8000608 <set_unlock_text+0x2c>
        }
        LCD_newline();                                                              //go to next line
 8000626:	f7ff ff36 	bl	8000496 <LCD_newline>
        for(i = 0;i < (sizeof(line2)/sizeof(line2[0]));i++){                         //cycal throw second line array printing LCD
 800062a:	2300      	movs	r3, #0
 800062c:	77fb      	strb	r3, [r7, #31]
 800062e:	e00b      	b.n	8000648 <set_unlock_text+0x6c>
               LCD_write_char(line2[i]);
 8000630:	7ffb      	ldrb	r3, [r7, #31]
 8000632:	f107 0220 	add.w	r2, r7, #32
 8000636:	4413      	add	r3, r2
 8000638:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff fef3 	bl	8000428 <LCD_write_char>
        for(i = 0;i < (sizeof(line2)/sizeof(line2[0]));i++){                         //cycal throw second line array printing LCD
 8000642:	7ffb      	ldrb	r3, [r7, #31]
 8000644:	3301      	adds	r3, #1
 8000646:	77fb      	strb	r3, [r7, #31]
 8000648:	7ffb      	ldrb	r3, [r7, #31]
 800064a:	2b0c      	cmp	r3, #12
 800064c:	d9f0      	bls.n	8000630 <set_unlock_text+0x54>
            }
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	3724      	adds	r7, #36	; 0x24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	08001a24 	.word	0x08001a24
 800065c:	08001a2c 	.word	0x08001a2c

08000660 <set_lock_text>:

void set_lock_text(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
	    char line1[6] = {'L','O','C','K','E','D'};                                   //set first text line of array
 8000666:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <set_lock_text+0x84>)
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000670:	6018      	str	r0, [r3, #0]
 8000672:	3304      	adds	r3, #4
 8000674:	8019      	strh	r1, [r3, #0]
	    char line2[11] = {'E','N','T','E','R',' ','K','E','Y',':',' '};              //set second text line of array
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <set_lock_text+0x88>)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	ca07      	ldmia	r2, {r0, r1, r2}
 800067c:	c303      	stmia	r3!, {r0, r1}
 800067e:	801a      	strh	r2, [r3, #0]
 8000680:	3302      	adds	r3, #2
 8000682:	0c12      	lsrs	r2, r2, #16
 8000684:	701a      	strb	r2, [r3, #0]

	    LCD_clear();                                                                 //clear led screen
 8000686:	f7ff feff 	bl	8000488 <LCD_clear>

	    uint8_t i = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	75fb      	strb	r3, [r7, #23]
	    for(i = 0;i < (sizeof(line1)/sizeof(line1[0]));i++){                         //cycal throw first line array printing LCD
 800068e:	2300      	movs	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]
 8000692:	e00b      	b.n	80006ac <set_lock_text+0x4c>
	        LCD_write_char(line1[i]);
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	f107 0218 	add.w	r2, r7, #24
 800069a:	4413      	add	r3, r2
 800069c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fec1 	bl	8000428 <LCD_write_char>
	    for(i = 0;i < (sizeof(line1)/sizeof(line1[0]));i++){                         //cycal throw first line array printing LCD
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	3301      	adds	r3, #1
 80006aa:	75fb      	strb	r3, [r7, #23]
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d9f0      	bls.n	8000694 <set_lock_text+0x34>
	    }
	    LCD_newline();                                                              //go to next line
 80006b2:	f7ff fef0 	bl	8000496 <LCD_newline>
	    for(i = 0;i < (sizeof(line2)/sizeof(line2[0]));i++){                         //cycal throw second line array printing LCD
 80006b6:	2300      	movs	r3, #0
 80006b8:	75fb      	strb	r3, [r7, #23]
 80006ba:	e00b      	b.n	80006d4 <set_lock_text+0x74>
	        LCD_write_char(line2[i]);
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	f107 0218 	add.w	r2, r7, #24
 80006c2:	4413      	add	r3, r2
 80006c4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fead 	bl	8000428 <LCD_write_char>
	    for(i = 0;i < (sizeof(line2)/sizeof(line2[0]));i++){                         //cycal throw second line array printing LCD
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	3301      	adds	r3, #1
 80006d2:	75fb      	strb	r3, [r7, #23]
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b0a      	cmp	r3, #10
 80006d8:	d9f0      	bls.n	80006bc <set_lock_text+0x5c>
	    }
}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	08001a3c 	.word	0x08001a3c
 80006e8:	08001a44 	.word	0x08001a44

080006ec <main>:



int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
	 HAL_Init();
 80006f2:	f000 f9c0 	bl	8000a76 <HAL_Init>
	 SystemClock_Config();
 80006f6:	f000 f8c9 	bl	800088c <SystemClock_Config>

     uint8_t Key = 0xFF;  //set variables
 80006fa:	23ff      	movs	r3, #255	; 0xff
 80006fc:	72fb      	strb	r3, [r7, #11]
     uint8_t Code[4] = {1,2,3,4};
 80006fe:	4b62      	ldr	r3, [pc, #392]	; (8000888 <main+0x19c>)
 8000700:	607b      	str	r3, [r7, #4]
	 uint8_t count = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
	 uint8_t Entered[4];

	 LCD_init(); //initalis LCD
 8000706:	f7ff fecd 	bl	80004a4 <LCD_init>

	 Keypad_init();
 800070a:	f7ff fe19 	bl	8000340 <Keypad_init>
	 	        EnterKey,
	 	        Set,
	 	        SetCode
	 } state_type;

	 state_type state = Lock; //initialize to lock state
 800070e:	2300      	movs	r3, #0
 8000710:	73bb      	strb	r3, [r7, #14]

	  while(1){ //Forever loop

	        Key = read_Pad(); //gets the input from the keypad
 8000712:	f7ff fd79 	bl	8000208 <read_Pad>
 8000716:	4603      	mov	r3, r0
 8000718:	72fb      	strb	r3, [r7, #11]
                  if(Key == 10){
 800071a:	7afb      	ldrb	r3, [r7, #11]
 800071c:	2b0a      	cmp	r3, #10
 800071e:	d102      	bne.n	8000726 <main+0x3a>
                      state = Lock;
 8000720:	2300      	movs	r3, #0
 8000722:	73bb      	strb	r3, [r7, #14]

                      continue;
 8000724:	e0af      	b.n	8000886 <main+0x19a>
                  }


	        switch(state){ //check states and select case
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	2b05      	cmp	r3, #5
 800072a:	d8f2      	bhi.n	8000712 <main+0x26>
 800072c:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <main+0x48>)
 800072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000732:	bf00      	nop
 8000734:	0800074d 	.word	0x0800074d
 8000738:	0800075f 	.word	0x0800075f
 800073c:	080007e5 	.word	0x080007e5
 8000740:	080007fb 	.word	0x080007fb
 8000744:	08000823 	.word	0x08000823
 8000748:	08000839 	.word	0x08000839

	        case(Lock): //Lock state

	             set_lock_text(); //right to LCD
 800074c:	f7ff ff88 	bl	8000660 <set_lock_text>
	             count = 0;  //start at the beginning of array
 8000750:	2300      	movs	r3, #0
 8000752:	73fb      	strb	r3, [r7, #15]
	             LED_Light_off();
 8000754:	f7ff fd48 	bl	80001e8 <LED_Light_off>
	             state = EnterCode;     //go to the enter state
 8000758:	2301      	movs	r3, #1
 800075a:	73bb      	strb	r3, [r7, #14]
	             break;
 800075c:	e093      	b.n	8000886 <main+0x19a>

	        case(EnterCode): //Were code is entered and checked

	             //Key = read_Pad(); //gets the input from the keypad

	             if( Key != 0xFF && count < (sizeof(Code)/sizeof(Code[0])) ){
 800075e:	7afb      	ldrb	r3, [r7, #11]
 8000760:	2bff      	cmp	r3, #255	; 0xff
 8000762:	d016      	beq.n	8000792 <main+0xa6>
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d813      	bhi.n	8000792 <main+0xa6>
                        //checks if the keypad button is
	                 // and if the make number of presses have been reached


	            	LCD_write_char(0x30+Key); //Right key presses on screen
 800076a:	7afb      	ldrb	r3, [r7, #11]
 800076c:	3330      	adds	r3, #48	; 0x30
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fe59 	bl	8000428 <LCD_write_char>
	            	Entered[count++] = Key; //save key into an array for entered numbers
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	73fa      	strb	r2, [r7, #15]
 800077c:	f107 0210 	add.w	r2, r7, #16
 8000780:	4413      	add	r3, r2
 8000782:	7afa      	ldrb	r2, [r7, #11]
 8000784:	f803 2c10 	strb.w	r2, [r3, #-16]

	            	HAL_Delay(Delay);            //delay to mitigate multiple button presses
 8000788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078c:	f000 f9e8 	bl	8000b60 <HAL_Delay>
	                      } else {
	                         state = Lock;
	                      }

	                    }
	             break;
 8000790:	e076      	b.n	8000880 <main+0x194>
	                 } else if(count == (sizeof(Code)/sizeof(Code[0]))) {
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d173      	bne.n	8000880 <main+0x194>
	                	 uint8_t i = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	737b      	strb	r3, [r7, #13]
	                	 uint8_t Is_equal = 1; //set is equal to true
 800079c:	2301      	movs	r3, #1
 800079e:	733b      	strb	r3, [r7, #12]
	                     for(i = 0;i < (sizeof(Code)/sizeof(Code[0]));i++){
 80007a0:	2300      	movs	r3, #0
 80007a2:	737b      	strb	r3, [r7, #13]
 80007a4:	e012      	b.n	80007cc <main+0xe0>
	                         if(Code[i] != Entered[i]){
 80007a6:	7b7b      	ldrb	r3, [r7, #13]
 80007a8:	f107 0210 	add.w	r2, r7, #16
 80007ac:	4413      	add	r3, r2
 80007ae:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	f107 0110 	add.w	r1, r7, #16
 80007b8:	440b      	add	r3, r1
 80007ba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d001      	beq.n	80007c6 <main+0xda>
	                             Is_equal = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	733b      	strb	r3, [r7, #12]
	                     for(i = 0;i < (sizeof(Code)/sizeof(Code[0]));i++){
 80007c6:	7b7b      	ldrb	r3, [r7, #13]
 80007c8:	3301      	adds	r3, #1
 80007ca:	737b      	strb	r3, [r7, #13]
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d9e9      	bls.n	80007a6 <main+0xba>
	                     if(Is_equal){
 80007d2:	7b3b      	ldrb	r3, [r7, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <main+0xf2>
	                         state = Unlock;
 80007d8:	2302      	movs	r3, #2
 80007da:	73bb      	strb	r3, [r7, #14]
	             break;
 80007dc:	e050      	b.n	8000880 <main+0x194>
	                         state = Lock;
 80007de:	2300      	movs	r3, #0
 80007e0:	73bb      	strb	r3, [r7, #14]
	             break;
 80007e2:	e04d      	b.n	8000880 <main+0x194>

	     case(Unlock): //state that sets unlock protocol
                  set_unlock_text(); //sets screen to read unlock text
 80007e4:	f7ff fefa 	bl	80005dc <set_unlock_text>
	     	 	  LED_Light_on();
 80007e8:	f7ff fcee 	bl	80001c8 <LED_Light_on>
	     	 	  HAL_Delay(Delay);
 80007ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f0:	f000 f9b6 	bl	8000b60 <HAL_Delay>
	              state = EnterKey; //sets state the enterKey
 80007f4:	2303      	movs	r3, #3
 80007f6:	73bb      	strb	r3, [r7, #14]
	              break;
 80007f8:	e045      	b.n	8000886 <main+0x19a>
	     case(EnterKey): //state waits for the user to press a key lock the system
	                     //if # is entered user can set a new code

	                  if( Key != 0xFF){  //checks if a key is pressed
 80007fa:	7afb      	ldrb	r3, [r7, #11]
 80007fc:	2bff      	cmp	r3, #255	; 0xff
 80007fe:	d041      	beq.n	8000884 <main+0x198>
	                      if(Key == 11){ //if # key is pressed set state to set
 8000800:	7afb      	ldrb	r3, [r7, #11]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	d106      	bne.n	8000814 <main+0x128>
	                          state = Set;
 8000806:	2304      	movs	r3, #4
 8000808:	73bb      	strb	r3, [r7, #14]
	                          HAL_Delay(Delay);
 800080a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800080e:	f000 f9a7 	bl	8000b60 <HAL_Delay>
	                           break;
 8000812:	e038      	b.n	8000886 <main+0x19a>
	                      }
                          // if any other key is pressed go back to lock
	                      state = Lock;
 8000814:	2300      	movs	r3, #0
 8000816:	73bb      	strb	r3, [r7, #14]
	                      HAL_Delay(Delay);
 8000818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081c:	f000 f9a0 	bl	8000b60 <HAL_Delay>
	                      break;
 8000820:	e031      	b.n	8000886 <main+0x19a>
	                  }break;


	     case(Set): //sets the set state

	             set_NEW_code_text(); //sets the LCD to tell the user to enter a new code
 8000822:	f7ff fe93 	bl	800054c <set_NEW_code_text>
	             count = 0;          //sets to the front or the array
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
	             HAL_Delay(Delay);
 800082a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082e:	f000 f997 	bl	8000b60 <HAL_Delay>
	             state = SetCode;    //gose to the setcodestate
 8000832:	2305      	movs	r3, #5
 8000834:	73bb      	strb	r3, [r7, #14]
	             break;
 8000836:	e026      	b.n	8000886 <main+0x19a>

	     case(SetCode): //allows the user to enter a new code

	            if( Key != 0xFF && count < (sizeof(Code)/sizeof(Code[0])) && Key != 11 ){           //checks if a valet key is pressed
 8000838:	7afb      	ldrb	r3, [r7, #11]
 800083a:	2bff      	cmp	r3, #255	; 0xff
 800083c:	d019      	beq.n	8000872 <main+0x186>
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d816      	bhi.n	8000872 <main+0x186>
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	2b0b      	cmp	r3, #11
 8000848:	d013      	beq.n	8000872 <main+0x186>
	                                                                                                            //checks if 4 keys have been pressed
	                  LCD_write_char(0x30+Key);   //Wright key to LCD
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	3330      	adds	r3, #48	; 0x30
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fde9 	bl	8000428 <LCD_write_char>
	                  Code[count++] = Key;        //Set key to code
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	73fa      	strb	r2, [r7, #15]
 800085c:	f107 0210 	add.w	r2, r7, #16
 8000860:	4413      	add	r3, r2
 8000862:	7afa      	ldrb	r2, [r7, #11]
 8000864:	f803 2c0c 	strb.w	r2, [r3, #-12]
	                  HAL_Delay(Delay);
 8000868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800086c:	f000 f978 	bl	8000b60 <HAL_Delay>
 8000870:	e009      	b.n	8000886 <main+0x19a>

	             } else if(count == (sizeof(Code)/sizeof(Code[0]))) {
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	2b04      	cmp	r3, #4
 8000876:	f47f af4c 	bne.w	8000712 <main+0x26>
                            //When the digits are filled set the lock state
	                 state = Lock;
 800087a:	2300      	movs	r3, #0
 800087c:	73bb      	strb	r3, [r7, #14]
	                 break;
 800087e:	e002      	b.n	8000886 <main+0x19a>
	             break;
 8000880:	bf00      	nop
 8000882:	e746      	b.n	8000712 <main+0x26>
	                  }break;
 8000884:	bf00      	nop
	        Key = read_Pad(); //gets the input from the keypad
 8000886:	e744      	b.n	8000712 <main+0x26>
 8000888:	04030201 	.word	0x04030201

0800088c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b096      	sub	sp, #88	; 0x58
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2244      	movs	r2, #68	; 0x44
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f001 f8a6 	bl	80019ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008b2:	f000 fa6d 	bl	8000d90 <HAL_PWREx_ControlVoltageScaling>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008bc:	f000 f82c 	bl	8000918 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008c0:	2310      	movs	r3, #16
 80008c2:	617b      	str	r3, [r7, #20]
  //RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
	#define RCC_MSIRANGE_7                 MSI = 8 MHz
	#define RCC_MSIRANGE_8                 MSI = 16 MHz
	#define RCC_MSIRANGE_9                 MSI = 24 MHz
	#define RCC_MSIRANGE_10                MSI = 32 MHz
	#define RCC_MSIRANGE_11                MSI = 48 MHz   dont use this one*/
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
 80008cc:	2301      	movs	r3, #1
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 faaf 	bl	8000e3c <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f818 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fe81 	bl	8001608 <HAL_RCC_ClockConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800090c:	f000 f804 	bl	8000918 <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	3758      	adds	r7, #88	; 0x58
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6613      	str	r3, [r2, #96]	; 0x60
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x44>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6593      	str	r3, [r2, #88]	; 0x58
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f8b2 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <SystemInit+0x5c>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <SystemInit+0x5c>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <SystemInit+0x60>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <SystemInit+0x60>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <SystemInit+0x60>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <SystemInit+0x60>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <SystemInit+0x60>)
 80009ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <SystemInit+0x60>)
 80009f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <SystemInit+0x60>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <SystemInit+0x60>)
 8000a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SystemInit+0x60>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00
 8000a20:	40021000 	.word	0x40021000

08000a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a28:	f7ff ffca 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a2e:	e003      	b.n	8000a38 <LoopCopyDataInit>

08000a30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a36:	3104      	adds	r1, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a38:	480a      	ldr	r0, [pc, #40]	; (8000a64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a40:	d3f6      	bcc.n	8000a30 <CopyDataInit>
	ldr	r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a44:	e002      	b.n	8000a4c <LoopFillZerobss>

08000a46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a48:	f842 3b04 	str.w	r3, [r2], #4

08000a4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <LoopForever+0x16>)
	cmp	r2, r3
 8000a4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a50:	d3f9      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f000 ffa7 	bl	80019a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a56:	f7ff fe49 	bl	80006ec <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a5c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a60:	08001a98 	.word	0x08001a98
	ldr	r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a68:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a6c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a70:	2000002c 	.word	0x2000002c

08000a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_2_IRQHandler>

08000a76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f943 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f80e 	bl	8000aa8 <HAL_InitTick>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	e001      	b.n	8000a9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a98:	f7ff ff44 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_InitTick+0x6c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d023      	beq.n	8000b04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_InitTick+0x70>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_InitTick+0x6c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f941 	bl	8000d5a <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10f      	bne.n	8000afe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d809      	bhi.n	8000af8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f919 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_InitTick+0x74>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e007      	b.n	8000b08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e004      	b.n	8000b08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e001      	b.n	8000b08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000028 	.word	0x20000028

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000028 	.word	0x20000028

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff ffee 	bl	8000b48 <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffde 	bl	8000b48 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff5c 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff8e 	bl	8000c60 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffb0 	bl	8000cc8 <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_PWREx_GetVoltageRange+0x18>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40007000 	.word	0x40007000

08000d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d9e:	d130      	bne.n	8000e02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dac:	d038      	beq.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000db6:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2232      	movs	r2, #50	; 0x32
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	0c9b      	lsrs	r3, r3, #18
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dd4:	e002      	b.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de8:	d102      	bne.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f2      	bne.n	8000dd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfc:	d110      	bne.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e00f      	b.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0e:	d007      	beq.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40007000 	.word	0x40007000
 8000e34:	20000000 	.word	0x20000000
 8000e38:	431bde83 	.word	0x431bde83

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e3d4      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e4e:	4ba1      	ldr	r3, [pc, #644]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e58:	4b9e      	ldr	r3, [pc, #632]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80e4 	beq.w	8001038 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <HAL_RCC_OscConfig+0x4a>
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2b0c      	cmp	r3, #12
 8000e7a:	f040 808b 	bne.w	8000f94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	f040 8087 	bne.w	8000f94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e86:	4b93      	ldr	r3, [pc, #588]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <HAL_RCC_OscConfig+0x62>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e3ac      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a1a      	ldr	r2, [r3, #32]
 8000ea2:	4b8c      	ldr	r3, [pc, #560]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x7c>
 8000eae:	4b89      	ldr	r3, [pc, #548]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eb6:	e005      	b.n	8000ec4 <HAL_RCC_OscConfig+0x88>
 8000eb8:	4b86      	ldr	r3, [pc, #536]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d223      	bcs.n	8000f10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fd09 	bl	80018e4 <RCC_SetFlashLatencyFromMSIRange>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e38d      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000edc:	4b7d      	ldr	r3, [pc, #500]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a7c      	ldr	r2, [pc, #496]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b7a      	ldr	r3, [pc, #488]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4977      	ldr	r1, [pc, #476]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000efa:	4b76      	ldr	r3, [pc, #472]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	4972      	ldr	r1, [pc, #456]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
 8000f0e:	e025      	b.n	8000f5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f10:	4b70      	ldr	r3, [pc, #448]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a6f      	ldr	r2, [pc, #444]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	496a      	ldr	r1, [pc, #424]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f2e:	4b69      	ldr	r3, [pc, #420]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	4965      	ldr	r1, [pc, #404]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d109      	bne.n	8000f5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fcc9 	bl	80018e4 <RCC_SetFlashLatencyFromMSIRange>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e34d      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f5c:	f000 fc36 	bl	80017cc <HAL_RCC_GetSysClockFreq>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b5c      	ldr	r3, [pc, #368]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	495a      	ldr	r1, [pc, #360]	; (80010d8 <HAL_RCC_OscConfig+0x29c>)
 8000f6e:	5ccb      	ldrb	r3, [r1, r3]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	4a58      	ldr	r2, [pc, #352]	; (80010dc <HAL_RCC_OscConfig+0x2a0>)
 8000f7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f7c:	4b58      	ldr	r3, [pc, #352]	; (80010e0 <HAL_RCC_OscConfig+0x2a4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fd91 	bl	8000aa8 <HAL_InitTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d052      	beq.n	8001036 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	e331      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d032      	beq.n	8001002 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fdce 	bl	8000b48 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fdca 	bl	8000b48 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e31a      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fc2:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a40      	ldr	r2, [pc, #256]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	493b      	ldr	r1, [pc, #236]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fec:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	4936      	ldr	r1, [pc, #216]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
 8001000:	e01a      	b.n	8001038 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800100e:	f7ff fd9b 	bl	8000b48 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001016:	f7ff fd97 	bl	8000b48 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e2e7      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f0      	bne.n	8001016 <HAL_RCC_OscConfig+0x1da>
 8001034:	e000      	b.n	8001038 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001036:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d074      	beq.n	800112e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2b08      	cmp	r3, #8
 8001048:	d005      	beq.n	8001056 <HAL_RCC_OscConfig+0x21a>
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d10e      	bne.n	800106e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d10b      	bne.n	800106e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d064      	beq.n	800112c <HAL_RCC_OscConfig+0x2f0>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d160      	bne.n	800112c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e2c4      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x24a>
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e01d      	b.n	80010c2 <HAL_RCC_OscConfig+0x286>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108e:	d10c      	bne.n	80010aa <HAL_RCC_OscConfig+0x26e>
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e00b      	b.n	80010c2 <HAL_RCC_OscConfig+0x286>
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01c      	beq.n	8001104 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff fd3d 	bl	8000b48 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d0:	e011      	b.n	80010f6 <HAL_RCC_OscConfig+0x2ba>
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	08001a50 	.word	0x08001a50
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fd30 	bl	8000b48 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e280      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f6:	4baf      	ldr	r3, [pc, #700]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x2a8>
 8001102:	e014      	b.n	800112e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001104:	f7ff fd20 	bl	8000b48 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fd1c 	bl	8000b48 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	; 0x64
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e26c      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111e:	4ba5      	ldr	r3, [pc, #660]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x2d0>
 800112a:	e000      	b.n	800112e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d060      	beq.n	80011fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d005      	beq.n	800114c <HAL_RCC_OscConfig+0x310>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b0c      	cmp	r3, #12
 8001144:	d119      	bne.n	800117a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d116      	bne.n	800117a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800114c:	4b99      	ldr	r3, [pc, #612]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_OscConfig+0x328>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e249      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b93      	ldr	r3, [pc, #588]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	061b      	lsls	r3, r3, #24
 8001172:	4990      	ldr	r1, [pc, #576]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001178:	e040      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d023      	beq.n	80011ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001182:	4b8c      	ldr	r3, [pc, #560]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a8b      	ldr	r2, [pc, #556]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff fcdb 	bl	8000b48 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fcd7 	bl	8000b48 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e227      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011a8:	4b82      	ldr	r3, [pc, #520]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b7f      	ldr	r3, [pc, #508]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	497c      	ldr	r1, [pc, #496]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	e018      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ca:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a79      	ldr	r2, [pc, #484]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fcb7 	bl	8000b48 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fcb3 	bl	8000b48 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e203      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f0:	4b70      	ldr	r3, [pc, #448]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d03c      	beq.n	8001282 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01c      	beq.n	800124a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	4a67      	ldr	r2, [pc, #412]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fc92 	bl	8000b48 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fc8e 	bl	8000b48 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1de      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800123a:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800123c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ef      	beq.n	8001228 <HAL_RCC_OscConfig+0x3ec>
 8001248:	e01b      	b.n	8001282 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124a:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800124c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001250:	4a58      	ldr	r2, [pc, #352]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125a:	f7ff fc75 	bl	8000b48 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001262:	f7ff fc71 	bl	8000b48 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e1c1      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001274:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1ef      	bne.n	8001262 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 80a6 	beq.w	80013dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10d      	bne.n	80012bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	4a43      	ldr	r2, [pc, #268]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6593      	str	r3, [r2, #88]	; 0x58
 80012ac:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b8:	2301      	movs	r3, #1
 80012ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_RCC_OscConfig+0x57c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d118      	bne.n	80012fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_RCC_OscConfig+0x57c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a3a      	ldr	r2, [pc, #232]	; (80013b8 <HAL_RCC_OscConfig+0x57c>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fc38 	bl	8000b48 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012dc:	f7ff fc34 	bl	8000b48 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e184      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ee:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <HAL_RCC_OscConfig+0x57c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_RCC_OscConfig+0x4d8>
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001308:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001312:	e024      	b.n	800135e <HAL_RCC_OscConfig+0x522>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d110      	bne.n	800133e <HAL_RCC_OscConfig+0x502>
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800131e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001322:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001332:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800133c:	e00f      	b.n	800135e <HAL_RCC_OscConfig+0x522>
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001356:	f023 0304 	bic.w	r3, r3, #4
 800135a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d016      	beq.n	8001394 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fbef 	bl	8000b48 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fbeb 	bl	8000b48 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e139      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0ed      	beq.n	800136e <HAL_RCC_OscConfig+0x532>
 8001392:	e01a      	b.n	80013ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fbd8 	bl	8000b48 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800139a:	e00f      	b.n	80013bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fbd4 	bl	8000b48 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d906      	bls.n	80013bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e122      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013bc:	4b90      	ldr	r3, [pc, #576]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80013be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1e8      	bne.n	800139c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d105      	bne.n	80013dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d0:	4b8b      	ldr	r3, [pc, #556]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	4a8a      	ldr	r2, [pc, #552]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80013d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 8108 	beq.w	80015f6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	f040 80d0 	bne.w	8001590 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013f0:	4b83      	ldr	r3, [pc, #524]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	429a      	cmp	r2, r3
 8001402:	d130      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	3b01      	subs	r3, #1
 8001410:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d127      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001420:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d11f      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001430:	2a07      	cmp	r2, #7
 8001432:	bf14      	ite	ne
 8001434:	2201      	movne	r2, #1
 8001436:	2200      	moveq	r2, #0
 8001438:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800143a:	4293      	cmp	r3, r2
 800143c:	d113      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	3b01      	subs	r3, #1
 800144c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d109      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001462:	429a      	cmp	r2, r3
 8001464:	d06e      	beq.n	8001544 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d069      	beq.n	8001540 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800146c:	4b64      	ldr	r3, [pc, #400]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001478:	4b61      	ldr	r3, [pc, #388]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0b7      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001488:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a5c      	ldr	r2, [pc, #368]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800148e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001492:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001494:	f7ff fb58 	bl	8000b48 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff fb54 	bl	8000b48 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e0a4      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ae:	4b54      	ldr	r3, [pc, #336]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	4b51      	ldr	r3, [pc, #324]	; (8001604 <HAL_RCC_OscConfig+0x7c8>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014ca:	3a01      	subs	r2, #1
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	4311      	orrs	r1, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014d4:	0212      	lsls	r2, r2, #8
 80014d6:	4311      	orrs	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014dc:	0852      	lsrs	r2, r2, #1
 80014de:	3a01      	subs	r2, #1
 80014e0:	0552      	lsls	r2, r2, #21
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014e8:	0852      	lsrs	r2, r2, #1
 80014ea:	3a01      	subs	r2, #1
 80014ec:	0652      	lsls	r2, r2, #25
 80014ee:	4311      	orrs	r1, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014f4:	0912      	lsrs	r2, r2, #4
 80014f6:	0452      	lsls	r2, r2, #17
 80014f8:	430a      	orrs	r2, r1
 80014fa:	4941      	ldr	r1, [pc, #260]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a3e      	ldr	r2, [pc, #248]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800150c:	4b3c      	ldr	r3, [pc, #240]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4a3b      	ldr	r2, [pc, #236]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001516:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001518:	f7ff fb16 	bl	8000b48 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff fb12 	bl	8000b48 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e062      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800153e:	e05a      	b.n	80015f6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e059      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d152      	bne.n	80015f6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001550:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001566:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001568:	f7ff faee 	bl	8000b48 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff faea 	bl	8000b48 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e03a      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x734>
 800158e:	e032      	b.n	80015f6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d02d      	beq.n	80015f2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800159c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d105      	bne.n	80015ba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015b4:	f023 0303 	bic.w	r3, r3, #3
 80015b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fabd 	bl	8000b48 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fab9 	bl	8000b48 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e009      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x796>
 80015f0:	e001      	b.n	80015f6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	f99d808c 	.word	0xf99d808c

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0c8      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d910      	bls.n	800164c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 0207 	bic.w	r2, r3, #7
 8001632:	4961      	ldr	r1, [pc, #388]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0b0      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d04c      	beq.n	80016f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d107      	bne.n	8001670 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001660:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d121      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e09e      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d107      	bne.n	8001688 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d115      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e092      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001690:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e086      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e07e      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 0203 	bic.w	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	493f      	ldr	r1, [pc, #252]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016c2:	f7ff fa41 	bl	8000b48 <HAL_GetTick>
 80016c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ca:	f7ff fa3d 	bl	8000b48 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e066      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 020c 	and.w	r2, r3, #12
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d1eb      	bne.n	80016ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	492c      	ldr	r1, [pc, #176]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d210      	bcs.n	8001740 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 0207 	bic.w	r2, r3, #7
 8001726:	4924      	ldr	r1, [pc, #144]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e036      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4918      	ldr	r1, [pc, #96]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4910      	ldr	r1, [pc, #64]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800177e:	f000 f825 	bl	80017cc <HAL_RCC_GetSysClockFreq>
 8001782:	4602      	mov	r2, r0
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	490c      	ldr	r1, [pc, #48]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	5ccb      	ldrb	r3, [r1, r3]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	fa22 f303 	lsr.w	r3, r2, r3
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f980 	bl	8000aa8 <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80017ac:	7afb      	ldrb	r3, [r7, #11]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	08001a50 	.word	0x08001a50
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e4:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x34>
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d121      	bne.n	800183e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d11e      	bne.n	800183e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800180e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e005      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001828:	4a2b      	ldr	r2, [pc, #172]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10d      	bne.n	8001854 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d102      	bne.n	800184a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	e004      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d101      	bne.n	8001854 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001852:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d134      	bne.n	80018c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0xa6>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d003      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0xac>
 8001870:	e005      	b.n	800187e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001874:	617b      	str	r3, [r7, #20]
      break;
 8001876:	e005      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800187a:	617b      	str	r3, [r7, #20]
      break;
 800187c:	e002      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	617b      	str	r3, [r7, #20]
      break;
 8001882:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	3301      	adds	r3, #1
 8001890:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	fb02 f203 	mul.w	r2, r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	0e5b      	lsrs	r3, r3, #25
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	3301      	adds	r3, #1
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018c4:	69bb      	ldr	r3, [r7, #24]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	08001a60 	.word	0x08001a60
 80018dc:	00f42400 	.word	0x00f42400
 80018e0:	007a1200 	.word	0x007a1200

080018e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018fc:	f7ff fa3a 	bl	8000d74 <HAL_PWREx_GetVoltageRange>
 8001900:	6178      	str	r0, [r7, #20]
 8001902:	e014      	b.n	800192e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	4a24      	ldr	r2, [pc, #144]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	6593      	str	r3, [r2, #88]	; 0x58
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800191c:	f7ff fa2a 	bl	8000d74 <HAL_PWREx_GetVoltageRange>
 8001920:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	4a1d      	ldr	r2, [pc, #116]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001934:	d10b      	bne.n	800194e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b80      	cmp	r3, #128	; 0x80
 800193a:	d919      	bls.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2ba0      	cmp	r3, #160	; 0xa0
 8001940:	d902      	bls.n	8001948 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001942:	2302      	movs	r3, #2
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	e013      	b.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001948:	2301      	movs	r3, #1
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	e010      	b.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b80      	cmp	r3, #128	; 0x80
 8001952:	d902      	bls.n	800195a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001954:	2303      	movs	r3, #3
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	e00a      	b.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b80      	cmp	r3, #128	; 0x80
 800195e:	d102      	bne.n	8001966 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001960:	2302      	movs	r3, #2
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	e004      	b.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b70      	cmp	r3, #112	; 0x70
 800196a:	d101      	bne.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800196c:	2301      	movs	r3, #1
 800196e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 0207 	bic.w	r2, r3, #7
 8001978:	4909      	ldr	r1, [pc, #36]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	40022000 	.word	0x40022000

080019a4 <__libc_init_array>:
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	4d0d      	ldr	r5, [pc, #52]	; (80019dc <__libc_init_array+0x38>)
 80019a8:	4c0d      	ldr	r4, [pc, #52]	; (80019e0 <__libc_init_array+0x3c>)
 80019aa:	1b64      	subs	r4, r4, r5
 80019ac:	10a4      	asrs	r4, r4, #2
 80019ae:	2600      	movs	r6, #0
 80019b0:	42a6      	cmp	r6, r4
 80019b2:	d109      	bne.n	80019c8 <__libc_init_array+0x24>
 80019b4:	4d0b      	ldr	r5, [pc, #44]	; (80019e4 <__libc_init_array+0x40>)
 80019b6:	4c0c      	ldr	r4, [pc, #48]	; (80019e8 <__libc_init_array+0x44>)
 80019b8:	f000 f820 	bl	80019fc <_init>
 80019bc:	1b64      	subs	r4, r4, r5
 80019be:	10a4      	asrs	r4, r4, #2
 80019c0:	2600      	movs	r6, #0
 80019c2:	42a6      	cmp	r6, r4
 80019c4:	d105      	bne.n	80019d2 <__libc_init_array+0x2e>
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019cc:	4798      	blx	r3
 80019ce:	3601      	adds	r6, #1
 80019d0:	e7ee      	b.n	80019b0 <__libc_init_array+0xc>
 80019d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019d6:	4798      	blx	r3
 80019d8:	3601      	adds	r6, #1
 80019da:	e7f2      	b.n	80019c2 <__libc_init_array+0x1e>
 80019dc:	08001a90 	.word	0x08001a90
 80019e0:	08001a90 	.word	0x08001a90
 80019e4:	08001a90 	.word	0x08001a90
 80019e8:	08001a94 	.word	0x08001a94

080019ec <memset>:
 80019ec:	4402      	add	r2, r0
 80019ee:	4603      	mov	r3, r0
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d100      	bne.n	80019f6 <memset+0xa>
 80019f4:	4770      	bx	lr
 80019f6:	f803 1b01 	strb.w	r1, [r3], #1
 80019fa:	e7f9      	b.n	80019f0 <memset+0x4>

080019fc <_init>:
 80019fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fe:	bf00      	nop
 8001a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a02:	bc08      	pop	{r3}
 8001a04:	469e      	mov	lr, r3
 8001a06:	4770      	bx	lr

08001a08 <_fini>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	bf00      	nop
 8001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0e:	bc08      	pop	{r3}
 8001a10:	469e      	mov	lr, r3
 8001a12:	4770      	bx	lr
